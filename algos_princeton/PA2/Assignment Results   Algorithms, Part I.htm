<!DOCTYPE html>
<!-- saved from url=(0075)https://class.coursera.org/algs4partI-002/assignment/part_results?part_id=4 -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Assignment Results | Algorithms, Part I</title>
<link rel="stylesheet" href="https://dt5zaw6a98blc.cloudfront.net/site-static/8be561f5d56b20136c99ea175f81d0a2cc74b164/css/spark.main.css">
<link rel="stylesheet" href="https://www.coursera.org/maestro/api/course/970302/course.css">
<link rel="icon" href="https://spark-public.s3.amazonaws.com/algs4partI/static/images/favicon.ico">
</head>

<body>
    <a href="https://class.coursera.org/algs4partI-002/assignment/part_results?part_id=4#course-page-content" class="hidden">Skip Navigation</a>
    <div class="hidden">
        This page features MathJax technology to render mathematical formulae.
        If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.
    </div>

    <h1 class="hidden">Algorithms, Part I</h1>

    

<div class="course-topbar container-fluid" role="banner">

    <div class="row-fluid">
        
        <div class="span3">
          <a href="https://www.coursera.org/" class="course-topbar-logo" data-if-linkable="add-referrer"></a>
        </div>

        <div class="course-topbar-nav-container span9" style="float:right;">
            <h2 class="hidden">Top Navigation Bar</h2>

            <ul class="course-topbar-nav-list">
                <li class="course-topbar-nav-list-item">
                  <a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a>
                </li>

                                
                <li class="course-topbar-nav-list-item" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="" style="cursor:pointer;" data-popup-direction="se">
                                        <a data-user-id="1484404">  
                        Vishal Juneja 
                        <i class="icon-caret-down"></i>
                    </a>
                </li>
               
                            </ul>
        </div>
    </div>

    <div id="course-topbar-aboutus" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/jobs" target="_new" data-if-linkable="add-referrer">Jobs</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/team" target="_new" data-if-linkable="add-referrer">Team</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/contact" target="_new" data-if-linkable="add-referrer">Contact Us</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/" target="_new" data-if-linkable="add-referrer">About Us</a>
    </div>

    <div id="course-topbar-my" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/" target="_new">Courses</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/profile" target="_new">Profile</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/records" target="_new">Course Records</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/settings" target="_new">Settings</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/class/preferences">Course Preferences</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/auth/logout">Logout</a>
    </div>

</div>








<style type="text/css">
 


</style>
<div class="course-topbanner">
  <div class="course-topbanner-university-logo">
    <a href="https://www.coursera.org/princeton" class="coursera-university-color" target="_blank" data-if-linkable="add-referrer">
      <img src="./Assignment Results   Algorithms, Part I_files/university_logo" alt="University logo">
    </a>
  </div>

  
  <h1 class="course-topbanner-header">
      <a class="course-topbanner-name coursera-university-color" href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock">
        Algorithms, Part I      </a>
      <br>
      <span class="course-topbanner-instructor" style="">
        by Kevin  Wayne, Robert  Sedgewick      </span>
  </h1>
</div>
    
        <div class="container-fluid" style="position:relative;">
        <div class="row-fluid">
            <div id="course-page-sidebar" role="navigation">
                <div class="course-navbar-container">
	<a href="https://class.coursera.org/algs4partI-002/class/index">
	<img src="./Assignment Results   Algorithms, Part I_files/logo" style="width: 210px;height: 112px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.35);">
	</a>
<h2 class="hidden">Side Navigation Bar</h2>
<ul class="course-navbar-list">
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Home							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Syllabus							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=schedule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Schedule							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Lectures							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Exercises							</a>
						</li>
	
		
	<li class="course-navbar-item active">
								<a href="https://class.coursera.org/algs4partI-002/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Programming Assignments							<span class="course-navbar-selected-marker">(selected)</span></a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Job Interview Questions							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/forum/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Discussion Forums							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=errata" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Errata							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Surveys							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="http://algs4.cs.princeton.edu/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Booksite				<span class="icon-share"></span>			</a>
						</li>
	
	
		
		<li class="course-navbar-item">
		<a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">
			Join a Meetup
			<span class="icon-share"></span>
		</a>
	</li>
	
    </ul>

</div>
            </div>
            <div id="course-page-content" role="main">
                                <h2>Programming Assignment 2: Randomized Queues and Deques | queues.zip</h2>
<hr>

<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-08-Mar 00:10:21</td></tr>
        <tr><td>Raw Score</td><td>99.79 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">32/32 tests passed</font>
Memory:       <font color="#039800">46/47 tests passed</font>
Timing:       <font color="#009900">24/24 tests passed</font>

Raw score: <font color="#009900">99.79%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 20K
-rw-r--r-- 1 3.9K Mar  7 18:40 Deque.java
-rw-r--r-- 1 4.4K Mar  7 18:40 RandomizedQueue.java
-rw-r--r-- 1  939 Mar  7 18:40 Subset.java
-rw-r--r-- 1 2.9K Mar  7 18:40 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Deque.java
*-----------------------------------------------------------
================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
Note: RandomizedQueue.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
================================================================

% javac Subset.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Deque.java:11:31: '{' is not preceded with whitespace.
Deque.java:14:9: Instance variable definition in wrong order.
Deque.java:15:9: Instance variable definition in wrong order.
Deque.java:16:9: Instance variable definition in wrong order.
Deque.java:25:29: '{' is not preceded with whitespace.
Deque.java:26:11: 'if' is not followed by whitespace.
Deque.java:26:13: '==' is not preceded with whitespace.
Deque.java:26:15: '==' is not followed by whitespace.
Deque.java:31:22: '{' is not preceded with whitespace.
Deque.java:36:36: '{' is not preceded with whitespace.
Deque.java:37:11: 'if' is not followed by whitespace.
Deque.java:40:11: 'if' is not followed by whitespace.
Deque.java:40:22: '{' is not preceded with whitespace.
Deque.java:54:35: '{' is not preceded with whitespace.
Deque.java:55:11: 'if' is not followed by whitespace.
Deque.java:58:11: 'if' is not followed by whitespace.
Deque.java:58:22: '{' is not preceded with whitespace.
Deque.java:72:30: '{' is not preceded with whitespace.
Deque.java:73:11: 'if' is not followed by whitespace.
Deque.java:76:11: 'if' is not followed by whitespace.
Deque.java:76:13: '==' is not preceded with whitespace.
Deque.java:76:15: '==' is not followed by whitespace.
Deque.java:76:17: '{' is not preceded with whitespace.
Deque.java:77:25: Inner assignments should be avoided.
Deque.java:88:29: '{' is not preceded with whitespace.
Deque.java:89:11: 'if' is not followed by whitespace.
Deque.java:91:18: '=' is not preceded with whitespace.
Deque.java:92:11: 'if' is not followed by whitespace.
Deque.java:92:13: '==' is not preceded with whitespace.
Deque.java:92:15: '==' is not followed by whitespace.
Deque.java:93:25: Inner assignments should be avoided.
Deque.java:104:37: '{' is not preceded with whitespace.
Deque.java:123:43: '{' is not preceded with whitespace.
Deque.java:130:12: 'for' is not followed by whitespace.
Deque.java:130:25: '&lt;=' is not preceded with whitespace.
Deque.java:130:27: '&lt;=' is not followed by whitespace.
Deque.java:130:34: '{' is not preceded with whitespace.
Deque.java:140:14: 'while' is not followed by whitespace.
Deque.java:140:28: '{' is not preceded with whitespace.
RandomizedQueue.java:7:30: Name 'initialCapacity' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.
RandomizedQueue.java:8:23: Array brackets at illegal position.
RandomizedQueue.java:14:29: '{' is not preceded with whitespace.
RandomizedQueue.java:22:29: '{' is not preceded with whitespace.
RandomizedQueue.java:27:22: '{' is not preceded with whitespace.
RandomizedQueue.java:32:35: '{' is not preceded with whitespace.
RandomizedQueue.java:33:11: 'if' is not followed by whitespace.
RandomizedQueue.java:35:11: 'if' is not followed by whitespace.
RandomizedQueue.java:35:29: '!=' is not preceded with whitespace.
RandomizedQueue.java:35:31: '!=' is not followed by whitespace.
RandomizedQueue.java:35:33: '{' is not preceded with whitespace.
RandomizedQueue.java:42:11: 'if' is not followed by whitespace.
RandomizedQueue.java:50:26: '{' is not preceded with whitespace.
RandomizedQueue.java:51:11: 'if' is not followed by whitespace.
RandomizedQueue.java:54:11: 'if' is not followed by whitespace.
RandomizedQueue.java:54:50: '&gt;' is not preceded with whitespace.
RandomizedQueue.java:54:51: '&gt;' is not followed by whitespace.
RandomizedQueue.java:57:14: 'while' is not followed by whitespace.
RandomizedQueue.java:57:36: '{' is not preceded with whitespace.
RandomizedQueue.java:61:26: ',' is not followed by whitespace.
RandomizedQueue.java:69:25: '{' is not preceded with whitespace.
RandomizedQueue.java:70:11: 'if' is not followed by whitespace.
RandomizedQueue.java:73:11: 'if' is not followed by whitespace.
RandomizedQueue.java:73:50: '&gt;' is not preceded with whitespace.
RandomizedQueue.java:73:51: '&gt;' is not followed by whitespace.
RandomizedQueue.java:76:14: 'while' is not followed by whitespace.
RandomizedQueue.java:76:36: '{' is not preceded with whitespace.
RandomizedQueue.java:83:26: '{' is not preceded with whitespace.
RandomizedQueue.java:84:20: Array brackets at illegal position.
RandomizedQueue.java:85:12: 'for' is not followed by whitespace.
RandomizedQueue.java:85:18: '=' is not preceded with whitespace.
RandomizedQueue.java:85:19: '=' is not followed by whitespace.
RandomizedQueue.java:85:23: '&lt;' is not preceded with whitespace.
RandomizedQueue.java:85:24: '&lt;' is not followed by whitespace.
RandomizedQueue.java:85:42: '{' is not preceded with whitespace.
RandomizedQueue.java:91:27: '{' is not preceded with whitespace.
RandomizedQueue.java:92:21: Array brackets at illegal position.
RandomizedQueue.java:94:12: 'for' is not followed by whitespace.
RandomizedQueue.java:94:18: '=' is not preceded with whitespace.
RandomizedQueue.java:94:19: '=' is not followed by whitespace.
RandomizedQueue.java:94:23: '&lt;' is not preceded with whitespace.
RandomizedQueue.java:94:24: '&lt;' is not followed by whitespace.
RandomizedQueue.java:94:42: '{' is not preceded with whitespace.
RandomizedQueue.java:95:15: 'if' is not followed by whitespace.
RandomizedQueue.java:95:24: '!=' is not preceded with whitespace.
RandomizedQueue.java:95:26: '!=' is not followed by whitespace.
RandomizedQueue.java:95:31: '{' is not preceded with whitespace.
RandomizedQueue.java:108:37: '{' is not preceded with whitespace.
RandomizedQueue.java:113:31: Array brackets at illegal position.
RandomizedQueue.java:121:9: Constructor definition in wrong order.
RandomizedQueue.java:121:30: '{' is not preceded with whitespace.
RandomizedQueue.java:124:16: 'for' is not followed by whitespace.
RandomizedQueue.java:124:22: '=' is not preceded with whitespace.
RandomizedQueue.java:124:23: '=' is not followed by whitespace.
RandomizedQueue.java:124:27: '&lt;' is not preceded with whitespace.
RandomizedQueue.java:124:28: '&lt;' is not followed by whitespace.
RandomizedQueue.java:124:43: '{' is not preceded with whitespace.
RandomizedQueue.java:125:19: 'if' is not followed by whitespace.
RandomizedQueue.java:125:28: '!=' is not preceded with whitespace.
RandomizedQueue.java:125:30: '!=' is not followed by whitespace.
RandomizedQueue.java:125:35: '{' is not preceded with whitespace.
RandomizedQueue.java:130:25: '==' is not preceded with whitespace.
RandomizedQueue.java:130:27: '==' is not followed by whitespace.
RandomizedQueue.java:143:29: '{' is not preceded with whitespace.
RandomizedQueue.java:145:11: 'for' is not followed by whitespace.
RandomizedQueue.java:145:17: '=' is not preceded with whitespace.
RandomizedQueue.java:145:18: '=' is not followed by whitespace.
RandomizedQueue.java:145:22: '&lt;' is not preceded with whitespace.
RandomizedQueue.java:145:23: '&lt;' is not followed by whitespace.
RandomizedQueue.java:145:41: '{' is not preceded with whitespace.
RandomizedQueue.java:151:40: Array brackets at illegal position.
RandomizedQueue.java:151:43: '{' is not preceded with whitespace.
Subset.java:2:43: '{' is not preceded with whitespace.
Subset.java:4:11: 'if' is not followed by whitespace.
Subset.java:4:13: '&lt;=' is not preceded with whitespace.
Subset.java:4:15: '&lt;=' is not followed by whitespace.
Subset.java:5:19: Array brackets at illegal position.
Subset.java:8:14: 'while' is not followed by whitespace.
Subset.java:8:32: '{' is not preceded with whitespace.
Subset.java:10:15: 'if' is not followed by whitespace.
Subset.java:10:21: '&lt;=' is not preceded with whitespace.
Subset.java:10:23: '&lt;=' is not followed by whitespace.
Subset.java:10:25: '{' is not preceded with whitespace.
Subset.java:17:19: 'if' is not followed by whitespace.
Subset.java:17:26: '&lt;=' is not preceded with whitespace.
Subset.java:17:28: '&lt;=' is not followed by whitespace.
Subset.java:24:12: 'for' is not followed by whitespace.
Subset.java:24:18: '=' is not preceded with whitespace.
Subset.java:24:19: '=' is not followed by whitespace.
Subset.java:24:23: '&lt;' is not preceded with whitespace.
Subset.java:24:24: '&lt;' is not followed by whitespace.
Subset.java:24:31: '{' is not preceded with whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
CPU time limit exceeded (core dumped)
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 14 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(), and removeLast().
p1, p2, p3, and p4 are the relative frequencies of each operation, respectively.

Test 1: Calls to addFirst() and addLast() only
  *     5 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *    50 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *   500 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *  1000 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
==&gt; passed

Test 2: Calls to addFirst() and removeFirst()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 3: Calls to addFirst() and removeLast()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 4: Calls to addLast() and removeLast()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 5: Calls to addLast() and removeFirst()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 6: Calls to addFirst(), addLast(), removeFirst(), and removeLast()
  *     5 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *    50 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *   500 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *  1000 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
==&gt; passed

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==&gt; passed

Test 8: Create multiple deque objects at the same time
==&gt; passed

Test 9: Check iterator() after calls only to addFirst()
==&gt; passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(), removeFirst(), and removeLast()
==&gt; passed

Test 11: Create two independent iterators to same deque
==&gt; passed

Test 12: Create Deque objects of different parameterized types
==&gt; passed

Test 13: Check that addFirst() and addLast() throw NullPointerExceptions when inserting null items
==&gt; passed

Test 14: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed


Total: 14/14 tests passed!
================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 15 total tests.

Tests 1, 2, 3, and 4 make random calls to enqueue(), dequeue(), and sample().
p1, p2, and p3 are the relative frequencies of each operation, respectively.

Test 1: Calls to enqueue()
  *     5 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *    50 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *   500 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *  1000 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
==&gt; passed

Test 2: Calls to enqueue() and dequeue()
  *     5 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
==&gt; passed

Test 3: Calls to enqueue() and sample()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
==&gt; passed

Test 4: Calls to enqueue(), dequeue(), and sample()
  *     5 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *    50 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *   500 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *  1000 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
==&gt; passed

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==&gt; passed

Test 6: Create multiple randomized queue objects at the same time
==&gt; passed

Test 7: Check that iterator() returns correct items after sequence of enqueue() operations
==&gt; passed

Test 8: Check that iterator() returns correct items after sequence of enqueue() and dequeue() operations
==&gt; passed

Test 9: Create two independent iterators to same randomized queue
  *  N = 10
  *  N = 1000
==&gt; passed

Test 10: Create two iterators to different randomized queues
==&gt; passed

Test 11: Create RandomizedQueue objects of different parameterized types
==&gt; passed

Test 12: Check randomness of sample() by enqueueing strings, repeatedly calling
sample(), and counting the frequency of each value.
  *  enqueue strings A to C and sampling 1500 times
  *  enqueue strings A to E and sampling 2500 times
  *  enqueue strings A to H and sampling 4000 times
  *  enqueue strings A to J and sampling 5000 times
==&gt; passed

Test 13: Check randomness of dequeue() by enqueueing strings, repeatedly calling
dequeue() until a specific enqueued string appears.
  *  enqueue strings A to C and call dequeue() until C is dequeued; repeat 1500 times
  *  enqueue strings A to E and call dequeue() until A is dequeued; repeat 2500 times
  *  enqueue strings A to H and call dequeue() until E is dequeued; repeat 4000 times
  *  enqueue strings A to J and call dequeue() until I is dequeued; repeat 5000 times
==&gt; passed

Test 14: Check that NullPointerException is thrown when inserting null items
==&gt; passed

Test 15: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed


Total: 15/15 tests passed!
================================================================

Testing methods in Subset
*-----------------------------------------------------------
Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
H
B
A

% echo "A B C D E F G H I" | java Subset 3
[student solution]
I
H
E

% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
CC
BB
BB
CC
BB
BB
BB
AA

==&gt; passed

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
E

% echo "A B C D E F G H I" | java Subset 5
[student solution]
G
C
A
D
B

% echo "A B C D E F G H I" | java Subset 5
[student solution]
C
F
I
G
E

% echo "A B C D E F G H I" | java Subset 9
[student solution]
A
G
H
C
I
B
D
E
F

% echo "A B C D E F G H I" | java Subset 0
[student solution]

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
the
was
times
best
of
it
times
the
it
of

% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
dear,
would
their
friend
House
who
of
at
all
he

% echo "AA BB BB BB BB BB CC CC " | java Subset 7
[student solution]
BB
BB
BB
CC
BB
BB
AA

==&gt; passed

Test 3: check for randomness
  * 1000 subsets of size 1 from subset10.txt
  * 250 subsets of size 4 from subset10.txt
  * 600 subsets of size 1 from subset6.txt
  * 300 subsets of size 2 from subset6.txt
  * 800 subsets of size 1 from subset8.txt
  * 160 subsets of size 5 from subset8.txt
==&gt; passed

Total: 3/3 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
Running 26 total tests.

Test 1a-1e: 
 Measuring total memory usage after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          424         
=&gt; passed       64         3112         
=&gt; passed      256        12328         
=&gt; passed     1024        49192         
=&gt; passed     4096       196648         
==&gt; 5/5 tests passed

 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 2a-2e: Measuring total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          472         
=&gt; passed       64         3160         
=&gt; passed      256        12376         
=&gt; passed     1024        49240         
=&gt; passed     4096       196696         
==&gt; 5/5 tests passed

Memory of Deque after adding N = 2^i + 1 items:
 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 3a-3e: Measuring total memory usage after inserting 2N+1 items
then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          472         
=&gt; passed       64         3160         
=&gt; passed      256        12376         
=&gt; passed     1024        49240         
=&gt; passed     4096       196696         
==&gt; 5/5 tests passed

 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 4a-4e: Measuring total memory usage after inserting N items 
 and then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8           88         
=&gt; passed       64           88         
=&gt; passed      256           88         
=&gt; passed     1024           88         
=&gt; passed     4096           88         
==&gt; 5/5 tests passed

Memory of Deque after adding N = 2^i items:
 * Student memory = 88.00  (R^2 = 1.000)



Test 5a-5e: Measuring iterator memory usage after inserting N items 
 (should not grow with N).

                 N        bytes
----------------------------------------------------------
=&gt; passed        8           32         
=&gt; passed       64           32         
=&gt; passed      256           32         
=&gt; passed     1024           32         
=&gt; passed     4096           32         
==&gt; 5/5 tests passed

Memory of Deque iterator after adding N = 2^i items:
 * Student memory = 32.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them:
==&gt; passed

Total: 26/26 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
Running 21 total tests.

Test 1a-1d: Measuring total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          720         
=&gt; passed      256         2256         
=&gt; passed     1024         8400         
=&gt; passed     4096        32976         
==&gt; 4/4 tests passed


 * Student memory = 8.00 N + 208.00  (R^2 = 1.000)



Test 2a-2d: Measuring total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         1232         
=&gt; passed      256         4304         
=&gt; passed     1024        16592         
=&gt; passed     4096        65744         
==&gt; 4/4 tests passed


 * Student memory = 16.00 N + 192.00  (R^2 = 1.000)



Test 3a-3d: Measuring total memory usage after inserting 2N+1 items
then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         3344         
=&gt; passed      256        12704         
=&gt; passed     1024        53272         
=&gt; passed     4096       205232         
==&gt; 4/4 tests passed


 * Student memory = -0.01 N^2 + 55.25 N + -396.82  (R^2 = 1.000)



Test 4a-4d: Measuring total memory usage after inserting N items and 
 then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          392         
=&gt; passed      256          392         
=&gt; passed     1024          392         
=&gt; passed     4096          392         
==&gt; 4/4 tests passed


 * Student memory = 396.36  (R^2 = 0.000)



Test 5a-5d: Measuring iterator memory usage after inserting N items

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          576         
=&gt; passed      256         2112         
=&gt; passed     1024         8256         
=&gt; passed     4096        32832         
==&gt; 4/4 tests passed


 * Student   memory = 8.00 N + 64.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them:
 * loitering detected on 96 of 100 deletions
==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 20/21 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: addFirst(), addLast(), removeFirst(), and removeLast()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.01
=&gt; passed       16384     0.01
=&gt; passed      128000     0.02
=&gt; passed      256000     0.14
=&gt; passed     1024000     0.51
==&gt; 6/6 tests passed


N random calls to next() and hasNext() in iterator()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.02
=&gt; passed     1024000     0.04
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: enqueue(), sample(), dequeue(), isEmpty(), and size()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.01
=&gt; passed       16384     0.02
=&gt; passed      128000     0.02
=&gt; passed      256000     0.08
=&gt; passed     1024000     0.36
==&gt; 6/6 tests passed


N random calls to: next() and hasNext() from iterator()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.01
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed     1024000     0.13
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-08-Mar 00:00:59</td></tr>
        <tr><td>Raw Score</td><td>93.69 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#0F9900">29/32 tests passed</font>
Memory:       <font color="#039800">46/47 tests passed</font>
Timing:       <font color="#009900">24/24 tests passed</font>

Raw score: <font color="#0A9900">93.69%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 20K
-rw-r--r-- 1 3.9K Mar  7 18:31 Deque.java
-rw-r--r-- 1 4.4K Mar  7 18:31 RandomizedQueue.java
-rw-r--r-- 1  911 Mar  7 18:31 Subset.java
-rw-r--r-- 1 2.8K Mar  7 18:31 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Deque.java
*-----------------------------------------------------------
================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
Note: RandomizedQueue.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
================================================================

% javac Subset.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Deque.java:11:31: '{' is not preceded with whitespace.
Deque.java:14:9: Instance variable definition in wrong order.
Deque.java:15:9: Instance variable definition in wrong order.
Deque.java:16:9: Instance variable definition in wrong order.
Deque.java:25:29: '{' is not preceded with whitespace.
Deque.java:26:11: 'if' is not followed by whitespace.
Deque.java:26:13: '==' is not preceded with whitespace.
Deque.java:26:15: '==' is not followed by whitespace.
Deque.java:31:22: '{' is not preceded with whitespace.
Deque.java:36:36: '{' is not preceded with whitespace.
Deque.java:37:11: 'if' is not followed by whitespace.
Deque.java:40:11: 'if' is not followed by whitespace.
Deque.java:40:22: '{' is not preceded with whitespace.
Deque.java:54:35: '{' is not preceded with whitespace.
Deque.java:55:11: 'if' is not followed by whitespace.
Deque.java:58:11: 'if' is not followed by whitespace.
Deque.java:58:22: '{' is not preceded with whitespace.
Deque.java:72:30: '{' is not preceded with whitespace.
Deque.java:73:11: 'if' is not followed by whitespace.
Deque.java:76:11: 'if' is not followed by whitespace.
Deque.java:76:13: '==' is not preceded with whitespace.
Deque.java:76:15: '==' is not followed by whitespace.
Deque.java:76:17: '{' is not preceded with whitespace.
Deque.java:77:25: Inner assignments should be avoided.
Deque.java:88:29: '{' is not preceded with whitespace.
Deque.java:89:11: 'if' is not followed by whitespace.
Deque.java:91:18: '=' is not preceded with whitespace.
Deque.java:92:11: 'if' is not followed by whitespace.
Deque.java:92:13: '==' is not preceded with whitespace.
Deque.java:92:15: '==' is not followed by whitespace.
Deque.java:93:25: Inner assignments should be avoided.
Deque.java:104:37: '{' is not preceded with whitespace.
Deque.java:123:43: '{' is not preceded with whitespace.
Deque.java:130:12: 'for' is not followed by whitespace.
Deque.java:130:25: '&lt;=' is not preceded with whitespace.
Deque.java:130:27: '&lt;=' is not followed by whitespace.
Deque.java:130:34: '{' is not preceded with whitespace.
Deque.java:140:14: 'while' is not followed by whitespace.
Deque.java:140:28: '{' is not preceded with whitespace.
RandomizedQueue.java:7:30: Name 'initialCapacity' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.
RandomizedQueue.java:8:23: Array brackets at illegal position.
RandomizedQueue.java:14:29: '{' is not preceded with whitespace.
RandomizedQueue.java:22:29: '{' is not preceded with whitespace.
RandomizedQueue.java:27:22: '{' is not preceded with whitespace.
RandomizedQueue.java:32:35: '{' is not preceded with whitespace.
RandomizedQueue.java:33:11: 'if' is not followed by whitespace.
RandomizedQueue.java:35:11: 'if' is not followed by whitespace.
RandomizedQueue.java:35:29: '!=' is not preceded with whitespace.
RandomizedQueue.java:35:31: '!=' is not followed by whitespace.
RandomizedQueue.java:35:33: '{' is not preceded with whitespace.
RandomizedQueue.java:42:11: 'if' is not followed by whitespace.
RandomizedQueue.java:50:26: '{' is not preceded with whitespace.
RandomizedQueue.java:51:11: 'if' is not followed by whitespace.
RandomizedQueue.java:54:11: 'if' is not followed by whitespace.
RandomizedQueue.java:54:50: '&gt;' is not preceded with whitespace.
RandomizedQueue.java:54:51: '&gt;' is not followed by whitespace.
RandomizedQueue.java:57:14: 'while' is not followed by whitespace.
RandomizedQueue.java:57:36: '{' is not preceded with whitespace.
RandomizedQueue.java:61:26: ',' is not followed by whitespace.
RandomizedQueue.java:69:25: '{' is not preceded with whitespace.
RandomizedQueue.java:70:11: 'if' is not followed by whitespace.
RandomizedQueue.java:73:11: 'if' is not followed by whitespace.
RandomizedQueue.java:73:50: '&gt;' is not preceded with whitespace.
RandomizedQueue.java:73:51: '&gt;' is not followed by whitespace.
RandomizedQueue.java:76:14: 'while' is not followed by whitespace.
RandomizedQueue.java:76:36: '{' is not preceded with whitespace.
RandomizedQueue.java:83:26: '{' is not preceded with whitespace.
RandomizedQueue.java:84:20: Array brackets at illegal position.
RandomizedQueue.java:85:12: 'for' is not followed by whitespace.
RandomizedQueue.java:85:18: '=' is not preceded with whitespace.
RandomizedQueue.java:85:19: '=' is not followed by whitespace.
RandomizedQueue.java:85:23: '&lt;' is not preceded with whitespace.
RandomizedQueue.java:85:24: '&lt;' is not followed by whitespace.
RandomizedQueue.java:85:42: '{' is not preceded with whitespace.
RandomizedQueue.java:91:27: '{' is not preceded with whitespace.
RandomizedQueue.java:92:21: Array brackets at illegal position.
RandomizedQueue.java:94:12: 'for' is not followed by whitespace.
RandomizedQueue.java:94:18: '=' is not preceded with whitespace.
RandomizedQueue.java:94:19: '=' is not followed by whitespace.
RandomizedQueue.java:94:23: '&lt;' is not preceded with whitespace.
RandomizedQueue.java:94:24: '&lt;' is not followed by whitespace.
RandomizedQueue.java:94:42: '{' is not preceded with whitespace.
RandomizedQueue.java:95:15: 'if' is not followed by whitespace.
RandomizedQueue.java:95:24: '!=' is not preceded with whitespace.
RandomizedQueue.java:95:26: '!=' is not followed by whitespace.
RandomizedQueue.java:95:31: '{' is not preceded with whitespace.
RandomizedQueue.java:108:37: '{' is not preceded with whitespace.
RandomizedQueue.java:113:31: Array brackets at illegal position.
RandomizedQueue.java:121:9: Constructor definition in wrong order.
RandomizedQueue.java:121:30: '{' is not preceded with whitespace.
RandomizedQueue.java:124:16: 'for' is not followed by whitespace.
RandomizedQueue.java:124:22: '=' is not preceded with whitespace.
RandomizedQueue.java:124:23: '=' is not followed by whitespace.
RandomizedQueue.java:124:27: '&lt;' is not preceded with whitespace.
RandomizedQueue.java:124:28: '&lt;' is not followed by whitespace.
RandomizedQueue.java:124:43: '{' is not preceded with whitespace.
RandomizedQueue.java:125:19: 'if' is not followed by whitespace.
RandomizedQueue.java:125:28: '!=' is not preceded with whitespace.
RandomizedQueue.java:125:30: '!=' is not followed by whitespace.
RandomizedQueue.java:125:35: '{' is not preceded with whitespace.
RandomizedQueue.java:130:25: '==' is not preceded with whitespace.
RandomizedQueue.java:130:27: '==' is not followed by whitespace.
RandomizedQueue.java:143:29: '{' is not preceded with whitespace.
RandomizedQueue.java:145:11: 'for' is not followed by whitespace.
RandomizedQueue.java:145:17: '=' is not preceded with whitespace.
RandomizedQueue.java:145:18: '=' is not followed by whitespace.
RandomizedQueue.java:145:22: '&lt;' is not preceded with whitespace.
RandomizedQueue.java:145:23: '&lt;' is not followed by whitespace.
RandomizedQueue.java:145:41: '{' is not preceded with whitespace.
RandomizedQueue.java:151:40: Array brackets at illegal position.
RandomizedQueue.java:151:43: '{' is not preceded with whitespace.
Subset.java:2:43: '{' is not preceded with whitespace.
Subset.java:4:19: Array brackets at illegal position.
Subset.java:7:14: 'while' is not followed by whitespace.
Subset.java:7:32: '{' is not preceded with whitespace.
Subset.java:9:15: 'if' is not followed by whitespace.
Subset.java:9:21: '&lt;=' is not preceded with whitespace.
Subset.java:9:23: '&lt;=' is not followed by whitespace.
Subset.java:9:25: '{' is not preceded with whitespace.
Subset.java:16:19: 'if' is not followed by whitespace.
Subset.java:16:26: '&lt;=' is not preceded with whitespace.
Subset.java:16:28: '&lt;=' is not followed by whitespace.
Subset.java:23:12: 'for' is not followed by whitespace.
Subset.java:23:18: '=' is not preceded with whitespace.
Subset.java:23:19: '=' is not followed by whitespace.
Subset.java:23:23: '&lt;' is not preceded with whitespace.
Subset.java:23:24: '&lt;' is not followed by whitespace.
Subset.java:23:31: '{' is not preceded with whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
CPU time limit exceeded (core dumped)
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 14 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(), and removeLast().
p1, p2, p3, and p4 are the relative frequencies of each operation, respectively.

Test 1: Calls to addFirst() and addLast() only
  *     5 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *    50 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *   500 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *  1000 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
==&gt; passed

Test 2: Calls to addFirst() and removeFirst()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 3: Calls to addFirst() and removeLast()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 4: Calls to addLast() and removeLast()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 5: Calls to addLast() and removeFirst()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 6: Calls to addFirst(), addLast(), removeFirst(), and removeLast()
  *     5 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *    50 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *   500 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *  1000 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
==&gt; passed

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==&gt; passed

Test 8: Create multiple deque objects at the same time
==&gt; passed

Test 9: Check iterator() after calls only to addFirst()
==&gt; passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(), removeFirst(), and removeLast()
==&gt; passed

Test 11: Create two independent iterators to same deque
==&gt; passed

Test 12: Create Deque objects of different parameterized types
==&gt; passed

Test 13: Check that addFirst() and addLast() throw NullPointerExceptions when inserting null items
==&gt; passed

Test 14: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed


Total: 14/14 tests passed!
================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 15 total tests.

Tests 1, 2, 3, and 4 make random calls to enqueue(), dequeue(), and sample().
p1, p2, and p3 are the relative frequencies of each operation, respectively.

Test 1: Calls to enqueue()
  *     5 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *    50 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *   500 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *  1000 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
==&gt; passed

Test 2: Calls to enqueue() and dequeue()
  *     5 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
==&gt; passed

Test 3: Calls to enqueue() and sample()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
==&gt; passed

Test 4: Calls to enqueue(), dequeue(), and sample()
  *     5 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *    50 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *   500 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *  1000 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
==&gt; passed

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==&gt; passed

Test 6: Create multiple randomized queue objects at the same time
==&gt; passed

Test 7: Check that iterator() returns correct items after sequence of enqueue() operations
==&gt; passed

Test 8: Check that iterator() returns correct items after sequence of enqueue() and dequeue() operations
==&gt; passed

Test 9: Create two independent iterators to same randomized queue
  *  N = 10
  *  N = 1000
==&gt; passed

Test 10: Create two iterators to different randomized queues
==&gt; passed

Test 11: Create RandomizedQueue objects of different parameterized types
==&gt; passed

Test 12: Check randomness of sample() by enqueueing strings, repeatedly calling
sample(), and counting the frequency of each value.
  *  enqueue strings A to C and sampling 1500 times
  *  enqueue strings A to E and sampling 2500 times
  *  enqueue strings A to H and sampling 4000 times
  *  enqueue strings A to J and sampling 5000 times
==&gt; passed

Test 13: Check randomness of dequeue() by enqueueing strings, repeatedly calling
dequeue() until a specific enqueued string appears.
  *  enqueue strings A to C and call dequeue() until C is dequeued; repeat 1500 times
  *  enqueue strings A to E and call dequeue() until B is dequeued; repeat 2500 times
  *  enqueue strings A to H and call dequeue() until H is dequeued; repeat 4000 times
  *  enqueue strings A to J and call dequeue() until F is dequeued; repeat 5000 times
==&gt; passed

Test 14: Check that NullPointerException is thrown when inserting null items
==&gt; passed

Test 15: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed


Total: 15/15 tests passed!
================================================================

Testing methods in Subset
*-----------------------------------------------------------
Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
D 0.75 0.6067707886546724 1.0
E 0.6 0.9683251820016439 2.0
F 0.5 0.33884953174175214 3.0
G 0.42857142857142855 0.13367875892724257 4.0
H 0.375 0.0233896497391215 5.0
I 0.3333333333333333 0.1466911037624814 6.0
G
I
H

Output contains invalid string: 'D 0.75 0.6067707886546724 1.0'
% echo "A B C D E F G H I" | java Subset 3
[student solution]
D 0.75 0.44297459748544077 1.0
E 0.6 0.21075098587439645 2.0
F 0.5 0.6309730332175865 3.0
G 0.42857142857142855 0.3525538132196224 4.0
H 0.375 0.25125485659763924 5.0
I 0.3333333333333333 0.24500548722039095 6.0
C
I
H

Output contains invalid string: 'D 0.75 0.44297459748544077 1.0'
% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
BB
CC
CC
BB
AA
BB
BB
BB

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
B 0.5 0.08548043377008763 1.0
C 0.3333333333333333 0.030137406167111358 2.0
D 0.25 0.37471645942227805 3.0
E 0.2 0.9742321090231925 4.0
F 0.16666666666666666 0.7196627232144825 5.0
G 0.14285714285714285 0.33925081452733585 6.0
H 0.125 0.8410634608202882 7.0
I 0.1111111111111111 0.6057097612898048 8.0
C

Output contains invalid string: 'B 0.5 0.08548043377008763 1.0'
% echo "A B C D E F G H I" | java Subset 5
[student solution]
F 0.8333333333333334 0.4046292653439497 1.0
G 0.7142857142857143 0.799748072738945 2.0
H 0.625 0.24687505241012198 3.0
I 0.5555555555555556 0.3151080855626346 4.0
H
I
F
A
E

Output contains invalid string: 'F 0.8333333333333334 0.4046292653439497 1.0'
% echo "A B C D E F G H I" | java Subset 5
[student solution]
F 0.8333333333333334 0.0011520500841866177 1.0
G 0.7142857142857143 0.8111110466887853 2.0
H 0.625 0.07517873304894218 3.0
I 0.5555555555555556 0.5245351951986986 4.0
I
D
H
F
C

Output contains invalid string: 'F 0.8333333333333334 0.0011520500841866177 1.0'
% echo "A B C D E F G H I" | java Subset 9
[student solution]
C
I
A
G
E
F
B
D
H

% echo "A B C D E F G H I" | java Subset 0
[student solution]
A 0.0 0.15358526249147786 1.0
B 0.0 0.11117899970077716 2.0
C 0.0 0.5633261972172982 3.0
D 0.0 0.6951428114974224 4.0
E 0.0 0.778114995014859 5.0
F 0.0 0.696827478116019 6.0
G 0.0 0.47684112352183894 7.0
H 0.0 0.5876408753902788 8.0
I 0.0 0.36029982510340763 9.0

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
of 0.9090909090909091 0.8597019725034688 1.0
times 0.8333333333333334 0.5746221112399306 2.0
it
the
times
was
of
was
of
best
it
times

Output contains invalid string: 'of 0.9090909090909091 0.8597019725034688 1.0'
% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
of 0.9090909090909091 0.332049517516112 1.0
times, 0.8333333333333334 0.8291404062980903 2.0
it 0.7692307692307693 0.6063078900875473 3.0
was 0.7142857142857143 0.6712504840157154 4.0
the 0.6666666666666666 0.3869918379446077 5.0
age 0.625 0.025989522964957046 6.0
of 0.5882352941176471 0.24346545585526858 7.0
wisdom, 0.5555555555555556 0.7653084522320914 8.0
it 0.5263157894736842 0.9976228669660223 9.0
was 0.5 0.38316523966184257 10.0
the 0.47619047619047616 0.8808800225341579 11.0
age 0.45454545454545453 0.12818218222919597 12.0
of 0.43478260869565216 0.25203772519002987 13.0
foolishness, 0.4166666666666667 0.020525737289937895 14.0
it 0.4 0.7475152443438529 15.0
was 0.38461538461538464 0.2698953413500269 16.0
the 0.37037037037037035 0.1846753768528009 17.0
epoch 0.35714285714285715 0.8176112185937591 18.0
of 0.3448275862068966 0.3737264367955906 19.0
belief, 0.3333333333333333 0.871949199517094 20.0
it 0.3225806451612903 0.3167556355116923 21.0
was 0.3125 0.947733405635151 22.0
the 0.30303030303030304 0.8335400722622496 23.0
epoch 0.29411764705882354 0.6935722002383593 24.0
of 0.2857142857142857 0.0785310781373969 25.0
incredulity, 0.2777777777777778 0.5365320345813887 26.0
it 0.2702702702702703 0.9395423637015115 27.0
was 0.2631578947368421 0.766594823988989 28.0
the 0.2564102564102564 0.5555024391245389 29.0
season 0.25 0.5767199474344068 30.0
of 0.24390243902439024 0.2244929009384391 31.0
Light, 0.23809523809523808 0.9829604537364688 32.0
it 0.23255813953488372 0.6132212181233199 33.0
was 0.22727272727272727 0.9309532766665138 34.0
the 0.2222222222222222 0.14910689033234437 35.0
season 0.21739130434782608 0.15050321518826915 36.0
of 0.2127659574468085 0.7027880744281166 37.0
Darkness, 0.20833333333333334 0.7749581845623877 38.0
it 0.20408163265306123 0.5296204646806362 39.0
was 0.2 0.4195871343652172 40.0
the 0.19607843137254902 0.8450970822206111 41.0
spring 0.19230769230769232 0.6995905657819074 42.0
of 0.18867924528301888 0.3445635330379919 43.0
hope, 0.18518518518518517 0.895599907752839 44.0
it 0.18181818181818182 0.014164429321118721 45.0
was 0.17857142857142858 0.3517288177014448 46.0
the 0.17543859649122806 0.6693705300659454 47.0
winter 0.1724137931034483 0.23375003618246482 48.0
of 0.1694915254237288 0.5833350020656901 49.0
despair, 0.16666666666666666 0.8828409531058755 50.0
we 0.16393442622950818 0.6113223895295923 51.0
had 0.16129032258064516 0.5494136299540328 52.0
everything 0.15873015873015872 0.5467398048714832 53.0
before 0.15625 0.5636198618504347 54.0
us, 0.15384615384615385 0.11424777219640525 55.0
we 0.15151515151515152 0.7020345339211747 56.0
had 0.14925373134328357 0.12263089231923374 57.0
nothing 0.14705882352941177 0.303947975425352 58.0
before 0.14492753623188406 0.32938874070715785 59.0
us, 0.14285714285714285 0.3454216899570456 60.0
we 0.14084507042253522 0.03813254527622589 61.0
were 0.1388888888888889 0.9433576676267507 62.0
all 0.136986301369863 0.9912226380482149 63.0
going 0.13513513513513514 0.983076318108793 64.0
direct 0.13333333333333333 0.41325318280333656 65.0
to 0.13157894736842105 0.3246457524724934 66.0
Heaven, 0.12987012987012986 0.24068198133032404 67.0
we 0.1282051282051282 0.03926210111194928 68.0
were 0.12658227848101267 0.8554089608404369 69.0
all 0.125 0.1975567973355099 70.0
going 0.12345679012345678 0.6001650557584953 71.0
direct 0.12195121951219512 0.7746535383594308 72.0
the 0.12048192771084337 0.9342077616099467 73.0
other 0.11904761904761904 0.7757670178141048 74.0
way--in 0.11764705882352941 0.2525825420875626 75.0
short, 0.11627906976744186 0.7434294439865807 76.0
the 0.11494252873563218 0.37364894799085535 77.0
period 0.11363636363636363 0.04539360042031326 78.0
was 0.11235955056179775 0.4420028353838861 79.0
so 0.1111111111111111 0.03786181466427052 80.0
far 0.10989010989010989 0.48127151447928573 81.0
like 0.10869565217391304 0.9245170514506135 82.0
the 0.10752688172043011 0.715111476603867 83.0
present 0.10638297872340426 0.5689429247143563 84.0
period, 0.10526315789473684 0.8253497720330928 85.0
that 0.10416666666666667 0.45638266428846286 86.0
some 0.10309278350515463 0.03797416742791937 87.0
of 0.10204081632653061 0.9906504531254049 88.0
its 0.10101010101010101 0.919928933278862 89.0
noisiest 0.1 0.9518085131677365 90.0
authorities 0.09900990099009901 0.6429800525090084 91.0
insisted 0.09803921568627451 0.5093769737300341 92.0
on 0.0970873786407767 0.8730164716986443 93.0
its 0.09615384615384616 0.458372015085461 94.0
being 0.09523809523809523 0.6525056960008928 95.0
received, 0.09433962264150944 0.403986148180982 96.0
for 0.09345794392523364 0.859068826486426 97.0
good 0.09259259259259259 0.670174641247735 98.0
or 0.09174311926605505 0.9379217707663611 99.0
for 0.09090909090909091 0.9647827692472923 100.0
evil, 0.09009009009009009 0.9092725748637244 101.0
in 0.08928571428571429 0.6458528462348584 102.0
the 0.08849557522123894 0.1137770552876618 103.0
superlative 0.08771929824561403 0.257484526485127 104.0
degree 0.08695652173913043 0.41102086775286484 105.0
of 0.08620689655172414 0.22487790302425592 106.0
comparison 0.08547008547008547 0.1939186097407246 107.0
only. 0.0847457627118644 0.31169366288502 108.0
There 0.08403361344537816 0.07218885100766825 109.0
were 0.08333333333333333 0.38152609389414693 110.0
a 0.08264462809917356 0.2734694528507652 111.0
king 0.08196721311475409 0.7917106141143746 112.0
with 0.08130081300813008 0.6302389810467675 113.0
a 0.08064516129032258 0.9777187406164402 114.0
large 0.08 0.3820651553233049 115.0
jaw 0.07936507936507936 0.9204234028500146 116.0
and 0.07874015748031496 0.1722534447584151 117.0
a 0.078125 0.3252674747399943 118.0
queen 0.07751937984496124 0.8563770704772549 119.0
with 0.07692307692307693 0.27285862961559304 120.0
a 0.07633587786259542 0.3510457046589919 121.0
plain 0.07575757575757576 0.6228656042535481 122.0
face, 0.07518796992481203 0.7501234438773313 123.0
on 0.07462686567164178 0.6394582052793648 124.0
the 0.07407407407407407 0.07313986006897155 125.0
throne 0.07352941176470588 0.26703881986813427 126.0
of 0.072992700729927 0.5937532727660203 127.0
England; 0.07246376811594203 0.9076319292807655 128.0
there 0.07194244604316546 0.667439381305453 129.0
were 0.07142857142857142 0.30925579580336404 130.0
a 0.07092198581560284 0.6082765542570822 131.0
king 0.07042253521126761 0.89238300770691 132.0
with 0.06993006993006994 0.8913554091245791 133.0
a 0.06944444444444445 0.20275868643844608 134.0
large 0.06896551724137931 0.1297830937678217 135.0
jaw 0.0684931506849315 0.12025514255968628 136.0
and 0.06802721088435375 0.9121732005926487 137.0
a 0.06756756756756757 0.9938765230177368 138.0
queen 0.06711409395973154 0.174215682499414 139.0
with 0.06666666666666667 0.19382926683142132 140.0
a 0.06622516556291391 0.8942323997474735 141.0
fair 0.06578947368421052 0.6795793990878836 142.0
face, 0.06535947712418301 0.7373452139965756 143.0
on 0.06493506493506493 0.7132476304745787 144.0
the 0.06451612903225806 0.8684062677242763 145.0
throne 0.0641025641025641 0.9187111251171315 146.0
of 0.06369426751592357 0.41739476107579887 147.0
France. 0.06329113924050633 0.25717688114396464 148.0
In 0.06289308176100629 0.18541875294778642 149.0
both 0.0625 0.8091789598365181 150.0
countries 0.062111801242236024 0.8132537897754815 151.0
it 0.06172839506172839 0.3109685227362414 152.0
was 0.06134969325153374 0.2516024870172715 153.0
clearer 0.06097560975609756 0.37077949291642265 154.0
than 0.06060606060606061 0.4426973958658831 155.0
crystal 0.060240963855421686 0.008747374978193778 156.0
to 0.059880239520958084 0.4750914176591243 157.0
the 0.05952380952380952 0.09822771587972168 158.0
lords 0.05917159763313609 0.19058377532208448 159.0
of 0.058823529411764705 0.37294533656648887 160.0
the 0.05847953216374269 0.11146268752703503 161.0
State 0.05813953488372093 0.1295387068775533 162.0
preserves 0.057803468208092484 0.8585746311336083 163.0
of 0.05747126436781609 0.6629355986934643 164.0
loaves 0.05714285714285714 0.028151342763114373 165.0
and 0.056818181818181816 0.6917212559648797 166.0
fishes, 0.05649717514124294 0.5417124989171355 167.0
that 0.056179775280898875 0.9877662385945126 168.0
things 0.055865921787709494 0.998279079788187 169.0
in 0.05555555555555555 0.873260347822983 170.0
general 0.055248618784530384 0.20143009651794785 171.0
were 0.054945054945054944 0.8771258100691871 172.0
settled 0.0546448087431694 0.6070311161476148 173.0
for 0.05434782608695652 0.9499925536187059 174.0
ever. 0.05405405405405406 0.3465359452307719 175.0
It 0.053763440860215055 0.004124342675775217 176.0
was 0.053475935828877004 0.600342906427769 177.0
the 0.05319148936170213 0.4141064998192916 178.0
year 0.05291005291005291 0.7424799059877965 179.0
of 0.05263157894736842 0.14740697005498582 180.0
Our 0.05235602094240838 0.09856902751621277 181.0
Lord 0.052083333333333336 0.46514643942139433 182.0
one 0.05181347150259067 0.4364466484073193 183.0
thousand 0.05154639175257732 0.46110338113103266 184.0
seven 0.05128205128205128 0.8109452215578266 185.0
hundred 0.05102040816326531 0.532416928709646 186.0
and 0.050761421319796954 0.6010296055504744 187.0
seventy-five. 0.050505050505050504 0.22104815121894505 188.0
Spiritual 0.05025125628140704 0.6742371708905063 189.0
revelations 0.05 0.7882849189278541 190.0
were 0.04975124378109453 0.33049549234342535 191.0
conceded 0.04950495049504951 0.7997626733226169 192.0
to 0.04926108374384237 0.9901554053721596 193.0
England 0.049019607843137254 0.5124398016221872 194.0
at 0.04878048780487805 0.30941797804644766 195.0
that 0.04854368932038835 0.23593573662788636 196.0
favoured 0.04830917874396135 0.6913883951586203 197.0
period, 0.04807692307692308 0.507560012226908 198.0
as 0.04784688995215311 0.5020110890237794 199.0
at 0.047619047619047616 0.7452998209274481 200.0
this. 0.04739336492890995 0.7645159770044254 201.0
Mrs. 0.04716981132075472 0.601189156586325 202.0
Southcott 0.046948356807511735 0.589239453132757 203.0
had 0.04672897196261682 0.057172908653722376 204.0
recently 0.046511627906976744 0.07141093201361792 205.0
attained 0.046296296296296294 0.1182512141189701 206.0
her 0.04608294930875576 0.1594736287778583 207.0
five-and-twentieth 0.045871559633027525 0.9479121144157144 208.0
blessed 0.045662100456621 0.9406189378286594 209.0
birthday, 0.045454545454545456 0.34633028745801564 210.0
of 0.04524886877828054 0.6164654852409057 211.0
whom 0.04504504504504504 0.43334573548646116 212.0
a 0.04484304932735426 0.9363404588199914 213.0
prophetic 0.044642857142857144 0.3097853462224396 214.0
private 0.044444444444444446 0.13267780224802694 215.0
in 0.04424778761061947 0.8293208020672578 216.0
the 0.04405286343612335 0.15502050657812994 217.0
Life 0.043859649122807015 0.6189658974990933 218.0
Guards 0.043668122270742356 0.746508809867567 219.0
had 0.043478260869565216 0.2928231530088743 220.0
heralded 0.04329004329004329 0.24818523904214396 221.0
the 0.04310344827586207 0.7672397327862289 222.0
sublime 0.04291845493562232 0.8787111376283963 223.0
appearance 0.042735042735042736 0.5156980903238539 224.0
by 0.0425531914893617 0.12504705664400462 225.0
announcing 0.0423728813559322 0.011239163488593773 226.0
that 0.04219409282700422 0.361490621549174 227.0
arrangements 0.04201680672268908 0.050241022550060466 228.0
were 0.04184100418410042 0.1330015940767203 229.0
made 0.041666666666666664 0.10921566458936505 230.0
for 0.04149377593360996 0.483766248622869 231.0
the 0.04132231404958678 0.48417145928402494 232.0
swallowing 0.0411522633744856 0.05867104982264082 233.0
up 0.040983606557377046 0.4623579996710888 234.0
of 0.04081632653061224 0.11748594776165022 235.0
London 0.04065040650406504 0.0017389110285132015 236.0
and 0.04048582995951417 0.9378488115320631 237.0
Westminster. 0.04032258064516129 0.09638498976203891 238.0
Even 0.040160642570281124 0.07209172248623108 239.0
the 0.04 0.4724536487584253 240.0
Cock-lane 0.0398406374501992 0.544059859847899 241.0
ghost 0.03968253968253968 0.7185590374451163 242.0
had 0.039525691699604744 0.6054045641375237 243.0
been 0.03937007874015748 0.7028486415946317 244.0
laid 0.0392156862745098 0.4017819711416487 245.0
only 0.0390625 0.9384638660506569 246.0
a 0.038910505836575876 0.9796290685607769 247.0
round 0.03875968992248062 0.37369010337570663 248.0
dozen 0.03861003861003861 0.9405846626981575 249.0
of 0.038461538461538464 0.37528924812629927 250.0
years, 0.038314176245210725 0.895502009915626 251.0
after 0.03816793893129771 0.3419205339195407 252.0
rapping 0.03802281368821293 0.5728074872070101 253.0
out 0.03787878787878788 0.36888885944643623 254.0
its 0.03773584905660377 0.6835074749746805 255.0
messages, 0.03759398496240601 0.09861377606567201 256.0
as 0.03745318352059925 0.2001261383676476 257.0
the 0.03731343283582089 0.9161943252494225 258.0
spirits 0.03717472118959108 0.2850930685770665 259.0
of 0.037037037037037035 0.6473890860497585 260.0
this 0.03690036900369004 0.624534765214635 261.0
very 0.03676470588235294 0.8764941038494187 262.0
year 0.03663003663003663 0.7581292405458664 263.0
last 0.0364963503649635 0.4913657604223769 264.0
past 0.03636363636363636 0.21985395859138945 265.0
(supernaturally 0.036231884057971016 0.47771186888149453 266.0
deficient 0.036101083032490974 0.9464132843190132 267.0
in 0.03597122302158273 0.7983908135718839 268.0
originality) 0.035842293906810034 0.7013194088834036 269.0
rapped 0.03571428571428571 0.20757743229276937 270.0
out 0.03558718861209965 0.8875887281398585 271.0
theirs. 0.03546099290780142 0.4441556704050258 272.0
Mere 0.0353356890459364 0.46850129343322655 273.0
messages 0.035211267605633804 0.6315906815631555 274.0
in 0.03508771929824561 0.12467237255000307 275.0
the 0.03496503496503497 0.1689494135258336 276.0
earthly 0.03484320557491289 0.790750331400217 277.0
order 0.034722222222222224 0.543937170357907 278.0
of 0.03460207612456748 0.33345053356541265 279.0
events 0.034482758620689655 0.5261804524953811 280.0
had 0.03436426116838488 0.05456096762883189 281.0
lately 0.03424657534246575 0.12802141176454762 282.0
come 0.034129692832764506 0.5813268247853122 283.0
to 0.034013605442176874 0.6494299318132896 284.0
the 0.03389830508474576 0.3986881167682542 285.0
English 0.033783783783783786 0.48004211226845195 286.0
Crown 0.03367003367003367 0.09277431034600614 287.0
and 0.03355704697986577 0.11968400934516099 288.0
People, 0.033444816053511704 0.3255488259495899 289.0
from 0.03333333333333333 0.9320411370640801 290.0
a 0.03322259136212625 0.6123646221526056 291.0
congress 0.033112582781456956 0.3755243990230378 292.0
of 0.033003300330033 0.2963857975070332 293.0
British 0.03289473684210526 0.10011597116505 294.0
subjects 0.03278688524590164 0.32841740263651464 295.0
in 0.032679738562091505 0.17643938183222818 296.0
America: 0.03257328990228013 0.8928648796427275 297.0
which, 0.032467532467532464 0.4789931506124734 298.0
strange 0.032362459546925564 0.8486335990700431 299.0
to 0.03225806451612903 0.6030507728616122 300.0
relate, 0.03215434083601286 0.8592235911977737 301.0
have 0.03205128205128205 0.7059178819104905 302.0
proved 0.03194888178913738 0.9036464571808706 303.0
more 0.03184713375796178 0.9579345100127629 304.0
important 0.031746031746031744 0.22678418063518657 305.0
to 0.03164556962025317 0.324823233070919 306.0
the 0.031545741324921134 0.2952443318320477 307.0
human 0.031446540880503145 0.7168458519112132 308.0
race 0.03134796238244514 0.7665884268371084 309.0
than 0.03125 0.9959996444301511 310.0
any 0.03115264797507788 0.10308962106545438 311.0
communications 0.031055900621118012 0.37254276109467577 312.0
yet 0.030959752321981424 0.2161081669199667 313.0
received 0.030864197530864196 0.6169934724200645 314.0
through 0.03076923076923077 0.3170790713131717 315.0
any 0.03067484662576687 0.6120337679353158 316.0
of 0.03058103975535168 0.0824299450536723 317.0
the 0.03048780487804878 0.7472214573005369 318.0
chickens 0.030395136778115502 0.8720599522716237 319.0
of 0.030303030303030304 0.7729596994048705 320.0
the 0.030211480362537766 0.3370078521177239 321.0
Cock-lane 0.030120481927710843 0.061795100093173794 322.0
brood. 0.03003003003003003 0.5274379149002343 323.0
France, 0.029940119760479042 0.9359512355439986 324.0
less 0.029850746268656716 0.986023900008166 325.0
favoured 0.02976190476190476 0.2993072840763681 326.0
on 0.02967359050445104 0.15628205956406782 327.0
the 0.029585798816568046 0.3271871598157422 328.0
whole 0.029498525073746312 0.32559037004215563 329.0
as 0.029411764705882353 0.31384144308307593 330.0
to 0.02932551319648094 0.7868533270812292 331.0
matters 0.029239766081871343 0.9290108758667639 332.0
spiritual 0.029154518950437316 0.6724743713599374 333.0
than 0.029069767441860465 0.39322065584524446 334.0
her 0.028985507246376812 0.1740524869596839 335.0
sister 0.028901734104046242 0.32634592824016817 336.0
of 0.02881844380403458 0.49871964376492983 337.0
the 0.028735632183908046 0.963522453025672 338.0
shield 0.02865329512893983 0.7691044347691786 339.0
and 0.02857142857142857 0.8527835173733997 340.0
trident, 0.02849002849002849 0.19248601959448575 341.0
rolled 0.028409090909090908 0.16414301362523764 342.0
with 0.028328611898016998 0.702865673049145 343.0
exceeding 0.02824858757062147 0.042598291826052126 344.0
smoothness 0.028169014084507043 0.11762295077900764 345.0
down 0.028089887640449437 0.5482016660404538 346.0
hill, 0.028011204481792718 0.8014623483504616 347.0
making 0.027932960893854747 0.24358127477839175 348.0
paper 0.027855153203342618 0.25093753232460925 349.0
money 0.027777777777777776 0.33983498431251025 350.0
and 0.027700831024930747 0.7125363505931471 351.0
spending 0.027624309392265192 4.6171030561414916E-4 352.0
it. 0.027548209366391185 0.8656945416768981 353.0
Under 0.027472527472527472 0.519646509531103 354.0
the 0.0273972602739726 0.36584343731138413 355.0
guidance 0.0273224043715847 0.590217668321544 356.0
of 0.027247956403269755 0.6974335900718315 357.0
her 0.02717391304347826 0.17571587751582007 358.0
Christian 0.02710027100271003 0.6385757889568036 359.0
pastors, 0.02702702702702703 0.13459352175690997 360.0
she 0.026954177897574125 0.8407916172818592 361.0
entertained 0.026881720430107527 0.6597849199232559 362.0
herself, 0.02680965147453083 0.7309271455028351 363.0
besides, 0.026737967914438502 0.15003149185843545 364.0
with 0.02666666666666667 0.09889714514564885 365.0
such 0.026595744680851064 0.6638450346256993 366.0
humane 0.026525198938992044 0.009556720834034582 367.0
achievements 0.026455026455026454 0.7135579652317273 368.0
as 0.026385224274406333 0.9685273604641859 369.0
sentencing 0.02631578947368421 0.3010085136954691 370.0
a 0.026246719160104987 0.9697457907053898 371.0
youth 0.02617801047120419 0.08793250693540056 372.0
to 0.02610966057441253 0.456269283625642 373.0
have 0.026041666666666668 0.4102457853062982 374.0
his 0.025974025974025976 0.9548836554444428 375.0
hands 0.025906735751295335 0.877943236901797 376.0
cut 0.025839793281653745 0.09342059131146829 377.0
off, 0.02577319587628866 0.032485212442443956 378.0
his 0.02570694087403599 0.2056458304858465 379.0
tongue 0.02564102564102564 0.7159794822138292 380.0
torn 0.02557544757033248 0.08996845406968357 381.0
out 0.025510204081632654 0.3416189082406932 382.0
with 0.02544529262086514 0.3329750611808301 383.0
pincers, 0.025380710659898477 0.891847005701191 384.0
and 0.02531645569620253 0.2470572537244271 385.0
his 0.025252525252525252 0.44349113738464685 386.0
body 0.02518891687657431 0.895125324257276 387.0
burned 0.02512562814070352 0.24656902788974344 388.0
alive, 0.02506265664160401 0.8738457213360987 389.0
because 0.025 0.23771147657736302 390.0
he 0.02493765586034913 0.06738619893029285 391.0
had 0.024875621890547265 0.4253455138217872 392.0
not 0.02481389578163772 0.8618089735043862 393.0
kneeled 0.024752475247524754 0.8702702806609038 394.0
down 0.024691358024691357 0.7996507686530495 395.0
in 0.024630541871921183 0.23347609312765427 396.0
the 0.02457002457002457 0.1566285491972651 397.0
rain 0.024509803921568627 0.7575774923443406 398.0
to 0.02444987775061125 0.8176924448325142 399.0
do 0.024390243902439025 0.4767465344008035 400.0
honour 0.024330900243309004 0.32582056342732635 401.0
to 0.024271844660194174 0.7533669640667908 402.0
a 0.024213075060532687 0.36014922834235286 403.0
dirty 0.024154589371980676 0.46172461897283645 404.0
procession 0.024096385542168676 0.7845108707630389 405.0
of 0.02403846153846154 0.27697758734655886 406.0
monks 0.023980815347721823 0.9855961518435573 407.0
which 0.023923444976076555 0.2816059468983759 408.0
passed 0.02386634844868735 0.5122734522059533 409.0
within 0.023809523809523808 0.12484399919050226 410.0
his 0.023752969121140142 0.1327202556500492 411.0
view, 0.023696682464454975 0.11969626704575342 412.0
at 0.02364066193853428 0.7707057574143029 413.0
a 0.02358490566037736 0.24659926953304623 414.0
distance 0.023529411764705882 0.3714943129076924 415.0
of 0.023474178403755867 0.06531131381107735 416.0
some 0.0234192037470726 0.4144232850739812 417.0
fifty 0.02336448598130841 0.983012554758969 418.0
or 0.023310023310023312 0.4443794359869482 419.0
sixty 0.023255813953488372 0.35582156551960986 420.0
yards. 0.02320185614849188 0.8774128534213582 421.0
It 0.023148148148148147 0.1350547400220573 422.0
is 0.023094688221709007 0.26396838858856686 423.0
likely 0.02304147465437788 0.5337634778115875 424.0
enough 0.022988505747126436 0.8121923039039233 425.0
that, 0.022935779816513763 0.7617058837040114 426.0
rooted 0.02288329519450801 0.007115039651026334 427.0
in 0.0228310502283105 0.4068526724127163 428.0
the 0.022779043280182234 0.5192485122187135 429.0
woods 0.022727272727272728 0.9332947332483226 430.0
of 0.022675736961451247 0.17926891515683485 431.0
France 0.02262443438914027 0.8982835135772609 432.0
and 0.022573363431151242 0.655871098505371 433.0
Norway, 0.02252252252252252 0.7489620518466648 434.0
there 0.02247191011235955 0.4055913000550022 435.0
were 0.02242152466367713 0.5109242168225507 436.0
growing 0.02237136465324385 0.6238984806868744 437.0
trees, 0.022321428571428572 0.4755212498834591 438.0
when 0.022271714922048998 0.7509665231124283 439.0
that 0.022222222222222223 0.6512245688483492 440.0
sufferer 0.022172949002217297 0.031342169304276024 441.0
was 0.022123893805309734 0.4408506036909243 442.0
put 0.02207505518763797 0.3393849407152534 443.0
to 0.022026431718061675 0.6945975515909368 444.0
death, 0.02197802197802198 0.38793733191904634 445.0
already 0.021929824561403508 0.6660154688159945 446.0
marked 0.02188183807439825 0.597233976997375 447.0
by 0.021834061135371178 0.5980155622743466 448.0
the 0.02178649237472767 0.862426261561874 449.0
Woodman, 0.021739130434782608 0.7132396646191104 450.0
Fate, 0.021691973969631236 0.2847634662027321 451.0
to 0.021645021645021644 0.442593254813999 452.0
come 0.02159827213822894 0.45253208130295663 453.0
down 0.021551724137931036 0.35316044059957796 454.0
and 0.021505376344086023 0.9180395791409638 455.0
be 0.02145922746781116 0.6283543529333377 456.0
sawn 0.021413276231263382 0.2265885370430839 457.0
into 0.021367521367521368 0.19592869597433582 458.0
boards, 0.021321961620469083 0.8384979994292806 459.0
to 0.02127659574468085 0.9209207634245323 460.0
make 0.021231422505307854 0.9373937913387325 461.0
a 0.0211864406779661 0.29888033748399456 462.0
certain 0.021141649048625793 0.8444334456547496 463.0
movable 0.02109704641350211 0.05865042618426808 464.0
framework 0.021052631578947368 0.23170712868359977 465.0
with 0.02100840336134454 0.16291838071172215 466.0
a 0.020964360587002098 0.7372393663840993 467.0
sack 0.02092050209205021 0.16878910756028087 468.0
and 0.020876826722338204 0.8829095629406933 469.0
a 0.020833333333333332 0.4604103410104958 470.0
knife 0.02079002079002079 0.3549379061333563 471.0
in 0.02074688796680498 0.8124916990256198 472.0
it, 0.020703933747412008 0.9597004441930421 473.0
terrible 0.02066115702479339 0.29931823887883435 474.0
in 0.020618556701030927 0.6665171844753969 475.0
history. 0.0205761316872428 0.08110600920378652 476.0
It 0.02053388090349076 0.6103042323082406 477.0
is 0.020491803278688523 0.821443810466648 478.0
likely 0.02044989775051125 0.2828192212064774 479.0
enough 0.02040816326530612 0.7999025389668659 480.0
that 0.020366598778004074 0.18951243262052997 481.0
in 0.02032520325203252 0.45708488588991536 482.0
the 0.02028397565922921 0.30319838688383993 483.0
rough 0.020242914979757085 0.5604716889827661 484.0
outhouses 0.020202020202020204 0.784988270457365 485.0
of 0.020161290322580645 0.21406308819684738 486.0
some 0.02012072434607646 0.7618970302832425 487.0
tillers 0.020080321285140562 0.9992997370450751 488.0
of 0.02004008016032064 0.8096120520665206 489.0
the 0.02 0.9659971945951695 490.0
heavy 0.01996007984031936 0.06406144066942043 491.0
lands 0.0199203187250996 0.46757347542552286 492.0
adjacent 0.019880715705765408 0.2182478795901016 493.0
to 0.01984126984126984 0.8228604505015551 494.0
Paris, 0.019801980198019802 0.7085475134217318 495.0
there 0.019762845849802372 0.9960524491874335 496.0
were 0.01972386587771203 0.08016306124076122 497.0
sheltered 0.01968503937007874 0.316274357650731 498.0
from 0.019646365422396856 0.2831426840114225 499.0
the 0.0196078431372549 0.2488875233074468 500.0
weather 0.019569471624266144 0.6924335524254559 501.0
that 0.01953125 0.3126550609325034 502.0
very 0.01949317738791423 0.18755667221422279 503.0
day, 0.019455252918287938 0.9815522430550276 504.0
rude 0.019417475728155338 0.15502048480890684 505.0
carts, 0.01937984496124031 0.27924334215856395 506.0
bespattered 0.019342359767891684 0.7905106156400162 507.0
with 0.019305019305019305 0.37059401105459355 508.0
rustic 0.019267822736030827 0.34480358785802867 509.0
mire, 0.019230769230769232 0.771212352760538 510.0
snuffed 0.019193857965451054 0.7594800786994016 511.0
about 0.019157088122605363 0.46669991276916833 512.0
by 0.019120458891013385 0.5237101658002931 513.0
pigs, 0.019083969465648856 0.7824619640499293 514.0
and 0.01904761904761905 0.11512500142341175 515.0
roosted 0.019011406844106463 0.9376118928723968 516.0
in 0.018975332068311195 0.39517850869289894 517.0
by 0.01893939393939394 0.9083723456238599 518.0
poultry, 0.01890359168241966 0.15716505760786903 519.0
which 0.018867924528301886 0.21371480377482777 520.0
the 0.018832391713747645 0.28354718132471135 521.0
Farmer, 0.018796992481203006 0.10570369420205394 522.0
Death, 0.01876172607879925 0.784436385299943 523.0
had 0.018726591760299626 0.1266595383125999 524.0
already 0.018691588785046728 0.2525627481631234 525.0
set 0.018656716417910446 0.20299263022933745 526.0
apart 0.0186219739292365 0.8890917478097207 527.0
to 0.01858736059479554 0.14017330279188644 528.0
be 0.01855287569573284 0.40204989994912566 529.0
his 0.018518518518518517 0.21421056532267058 530.0
tumbrils 0.018484288354898338 0.44338275776030656 531.0
of 0.01845018450184502 0.3122474467051729 532.0
the 0.01841620626151013 0.28589006506847014 533.0
Revolution. 0.01838235294117647 0.9391126378733589 534.0
But 0.01834862385321101 0.6171894776571082 535.0
that 0.018315018315018316 0.1991824958790862 536.0
Woodman 0.018281535648994516 0.379805583642048 537.0
and 0.01824817518248175 0.29562041825193075 538.0
that 0.018214936247723135 0.7654394086535786 539.0
Farmer, 0.01818181818181818 0.014509540531652432 540.0
though 0.018148820326678767 0.4904380339793182 541.0
they 0.018115942028985508 0.02379122982597459 542.0
work 0.018083182640144666 0.03743111326687576 543.0
unceasingly, 0.018050541516245487 0.36140666863238746 544.0
work 0.018018018018018018 0.9202970239069262 545.0
silently, 0.017985611510791366 0.050797855531844904 546.0
and 0.017953321364452424 0.39469415020613063 547.0
no 0.017921146953405017 0.023735567336400476 548.0
one 0.017889087656529516 0.2373288589820729 549.0
heard 0.017857142857142856 0.6122018575121942 550.0
them 0.017825311942959002 0.7626409843589915 551.0
as 0.017793594306049824 0.21665240663848717 552.0
they 0.017761989342806393 0.8645429412754314 553.0
went 0.01773049645390071 0.46048985835004963 554.0
about 0.017699115044247787 0.28022148458382523 555.0
with 0.0176678445229682 0.3606001261851335 556.0
muffled 0.01763668430335097 0.629445590270491 557.0
tread: 0.017605633802816902 0.9400614512652953 558.0
the 0.01757469244288225 0.3138788110256947 559.0
rather, 0.017543859649122806 0.9719127508840962 560.0
forasmuch 0.017513134851138354 0.6573923261249157 561.0
as 0.017482517482517484 0.7082909263408952 562.0
to 0.017452006980802792 0.5242591412899434 563.0
entertain 0.017421602787456445 0.3815791692091556 564.0
any 0.017391304347826087 0.31445196418873655 565.0
suspicion 0.017361111111111112 0.40582755629656697 566.0
that 0.01733102253032929 0.6542624692660568 567.0
they 0.01730103806228374 0.8281265911412313 568.0
were 0.017271157167530225 0.17942731502974174 569.0
awake, 0.017241379310344827 0.02946125973897451 570.0
was 0.01721170395869191 0.6533331620918604 571.0
to 0.01718213058419244 0.6296104286731693 572.0
be 0.017152658662092625 0.834247816406689 573.0
atheistical 0.017123287671232876 0.2657625798937193 574.0
and 0.017094017094017096 0.2655844577809533 575.0
traitorous. 0.017064846416382253 0.4727048085665456 576.0
In 0.017035775127768313 0.7277691888770917 577.0
England, 0.017006802721088437 0.4548391363269313 578.0
there 0.01697792869269949 0.8782959427848421 579.0
was 0.01694915254237288 0.5961459791461236 580.0
scarcely 0.01692047377326565 0.49008606767345986 581.0
an 0.016891891891891893 0.17093346147114763 582.0
amount 0.016863406408094434 0.25251885964978693 583.0
of 0.016835016835016835 0.7912888248977042 584.0
order 0.01680672268907563 0.8527835531767459 585.0
and 0.016778523489932886 0.6302197358058211 586.0
protection 0.01675041876046901 0.738969056916384 587.0
to 0.016722408026755852 0.6942938392423054 588.0
justify 0.01669449081803005 0.7651239328512333 589.0
much 0.016666666666666666 0.2660400558594608 590.0
national 0.016638935108153077 0.7200828028984315 591.0
boasting. 0.016611295681063124 0.8024707155878023 592.0
Daring 0.01658374792703151 0.3869853247707733 593.0
burglaries 0.016556291390728478 0.8479533157051873 594.0
by 0.01652892561983471 0.31305613963527834 595.0
armed 0.0165016501650165 0.01156168293432669 596.0
men, 0.016474464579901153 0.7187442103527962 597.0
and 0.01644736842105263 0.509781447334342 598.0
highway 0.016420361247947456 0.842965025324462 599.0
robberies, 0.01639344262295082 0.6890555675800822 600.0
took 0.016366612111292964 0.2862956751740525 601.0
place 0.016339869281045753 0.06925773633803423 602.0
in 0.01631321370309951 0.8178269549158804 603.0
the 0.016286644951140065 0.3349288308403504 604.0
capital 0.016260162601626018 0.18710945181614358 605.0
itself 0.016233766233766232 0.33952073905888747 606.0
every 0.01620745542949757 0.29982853631749273 607.0
night; 0.016181229773462782 0.8318819232111349 608.0
families 0.01615508885298869 0.3386300302152121 609.0
were 0.016129032258064516 0.3532358588474128 610.0
publicly 0.01610305958132045 0.34191616856177653 611.0
cautioned 0.01607717041800643 0.4686965428356036 612.0
not 0.016051364365971106 0.9169789504585573 613.0
to 0.016025641025641024 0.35149410505305045 614.0
go 0.016 0.019731471269567202 615.0
out 0.01597444089456869 0.6948140664968366 616.0
of 0.01594896331738437 0.41845211104933855 617.0
town 0.01592356687898089 0.8614600941676444 618.0
without 0.01589825119236884 0.05090941464540655 619.0
removing 0.015873015873015872 0.7370350162408111 620.0
their 0.01584786053882726 0.8511524988518573 621.0
furniture 0.015822784810126583 0.5852239756873593 622.0
to 0.01579778830963665 0.2729205670225904 623.0
upholsterers' 0.015772870662460567 0.23691047725661996 624.0
warehouses 0.015748031496062992 0.07046093133846798 625.0
for 0.015723270440251572 0.6167334886646223 626.0
security; 0.015698587127158554 0.4545861007265295 627.0
the 0.01567398119122257 0.12540854059194662 628.0
highwayman 0.01564945226917058 0.4527111393003489 629.0
in 0.015625 0.9734089576577214 630.0
the 0.015600624024960999 0.7376823061563174 631.0
dark 0.01557632398753894 0.6867907294414344 632.0
was 0.015552099533437015 0.8133497013633996 633.0
a 0.015527950310559006 0.6800207759604922 634.0
City 0.015503875968992248 0.8575913865178956 635.0
tradesman 0.015479876160990712 0.7802347262422886 636.0
in 0.015455950540958269 0.7190256128395457 637.0
the 0.015432098765432098 0.6746348757360933 638.0
light, 0.015408320493066256 0.1757435460899699 639.0
and, 0.015384615384615385 0.4855914139125831 640.0
being 0.015360983102918587 0.11746781107886572 641.0
recognised 0.015337423312883436 0.6199090245567312 642.0
and 0.015313935681470138 0.47163497250968645 643.0
challenged 0.01529051987767584 0.018765548116413955 644.0
by 0.015267175572519083 0.514673635313196 645.0
his 0.01524390243902439 0.2977487889528613 646.0
fellow- 0.015220700152207 0.38849513236415745 647.0
tradesman 0.015197568389057751 0.6225613315175262 648.0
whom 0.015174506828528073 0.7658448103288399 649.0
he 0.015151515151515152 0.641308754063415 650.0
stopped 0.015128593040847202 0.4042159073486573 651.0
in 0.015105740181268883 0.28043549899064635 652.0
his 0.015082956259426848 0.9146719877210235 653.0
character 0.015060240963855422 0.6155514287019126 654.0
of 0.015037593984962405 0.2079443016876108 655.0
"the 0.015015015015015015 0.5234519152497257 656.0
Captain," 0.014992503748125937 0.41498238272761756 657.0
gallantly 0.014970059880239521 0.09605210932712294 658.0
shot 0.014947683109118086 0.40277927357320065 659.0
him 0.014925373134328358 0.3048336250629652 660.0
through 0.014903129657228018 0.49942993329552443 661.0
the 0.01488095238095238 0.6154652385193624 662.0
head 0.014858841010401188 0.5263024440177492 663.0
and 0.01483679525222552 0.9018595890629517 664.0
rode 0.014814814814814815 0.4218205518561756 665.0
away; 0.014792899408284023 0.34804428314388025 666.0
the 0.014771048744460856 0.48321153890283397 667.0
mail 0.014749262536873156 0.07145504310893136 668.0
was 0.014727540500736377 0.7928299410496527 669.0
waylaid 0.014705882352941176 0.9848331724542748 670.0
by 0.014684287812041116 0.618114379436877 671.0
seven 0.01466275659824047 0.23367576135680446 672.0
robbers, 0.014641288433382138 0.2532846601718328 673.0
and 0.014619883040935672 0.21562444157346194 674.0
the 0.014598540145985401 0.8215803358257807 675.0
guard 0.014577259475218658 0.2863885704256032 676.0
shot 0.01455604075691412 0.28484222080315513 677.0
three 0.014534883720930232 0.378505677651505 678.0
dead, 0.01451378809869376 0.2588353242122594 679.0
and 0.014492753623188406 0.7648011383521299 680.0
then 0.01447178002894356 0.044818904795298375 681.0
got 0.014450867052023121 0.4637922754862278 682.0
shot 0.01443001443001443 0.5380252108139889 683.0
dead 0.01440922190201729 0.4510967597639951 684.0
himself 0.014388489208633094 0.7300790866822903 685.0
by 0.014367816091954023 0.06637110002138236 686.0
the 0.014347202295552367 0.39376196257219453 687.0
other 0.014326647564469915 0.21228039064921 688.0
four, 0.01430615164520744 0.12431315683764599 689.0
"in 0.014285714285714285 0.06895654411752705 690.0
consequence 0.014265335235378032 0.25170545608654527 691.0
of 0.014245014245014245 0.798444337152701 692.0
the 0.01422475106685633 0.6636956317489504 693.0
failure 0.014204545454545454 0.8084863500204987 694.0
of 0.014184397163120567 0.3612235825194925 695.0
his 0.014164305949008499 0.569013522911279 696.0
ammunition:" 0.014144271570014143 0.5678289899923333 697.0
after 0.014124293785310734 0.2288619503276762 698.0
which 0.014104372355430184 0.5357113491839901 699.0
the 0.014084507042253521 0.6311314614731053 700.0
mail 0.014064697609001406 0.3260427233033415 701.0
was 0.014044943820224719 0.05546395403741178 702.0
robbed 0.014025245441795231 0.9239400125894462 703.0
in 0.014005602240896359 0.672200121527278 704.0
peace; 0.013986013986013986 0.10353130977867464 705.0
that 0.013966480446927373 0.3403503482641006 706.0
magnificent 0.01394700139470014 0.6508450548355237 707.0
potentate, 0.013927576601671309 0.8476880197556406 708.0
the 0.013908205841446454 0.4374787940656595 709.0
Lord 0.013888888888888888 0.8217715908000466 710.0
Mayor 0.013869625520110958 0.612451997498739 711.0
of 0.013850415512465374 0.4456727333388508 712.0
London, 0.013831258644536652 0.9302317401298886 713.0
was 0.013812154696132596 0.4176127646846739 714.0
made 0.013793103448275862 0.18717726851244898 715.0
to 0.013774104683195593 0.6911852652988065 716.0
stand 0.013755158184319119 0.5147464611326573 717.0
and 0.013736263736263736 0.8296005884758958 718.0
deliver 0.013717421124828532 0.1345307868452741 719.0
on 0.0136986301369863 0.9762757067476868 720.0
Turnham 0.013679890560875513 0.2669502108661911 721.0
Green, 0.01366120218579235 0.6735883463975558 722.0
by 0.013642564802182811 0.492286161623646 723.0
one 0.013623978201634877 0.005820811414732563 724.0
highwayman, 0.013605442176870748 0.2755163128817004 725.0
who 0.01358695652173913 0.5191162355910673 726.0
despoiled 0.013568521031207599 0.31434370330640204 727.0
the 0.013550135501355014 0.73725199252219 728.0
illustrious 0.013531799729364006 0.9958621149832986 729.0
creature 0.013513513513513514 0.3273997309071519 730.0
in 0.01349527665317139 0.10063446367582263 731.0
sight 0.013477088948787063 0.9493551714142136 732.0
of 0.013458950201884253 0.10912075319362935 733.0
all 0.013440860215053764 0.9710040479330182 734.0
his 0.013422818791946308 0.8907014027111233 735.0
retinue; 0.013404825737265416 0.9636374211804204 736.0
prisoners 0.013386880856760375 0.7639018480308178 737.0
in 0.013368983957219251 0.9169828138372631 738.0
London 0.01335113484646195 0.8179445126176671 739.0
gaols 0.013333333333333334 0.8609849453431808 740.0
fought 0.013315579227696404 0.9409498051222234 741.0
battles 0.013297872340425532 0.17565803638063293 742.0
with 0.013280212483399735 0.7772869526943447 743.0
their 0.013262599469496022 0.05427967727868188 744.0
turnkeys, 0.013245033112582781 0.05937335889825135 745.0
and 0.013227513227513227 0.34025127842139646 746.0
the 0.013210039630118891 0.979393517372048 747.0
majesty 0.013192612137203167 0.7186804878374033 748.0
of 0.013175230566534914 0.6138401961840744 749.0
the 0.013157894736842105 0.1478434518713625 750.0
law 0.013140604467805518 0.8464775222252316 751.0
fired 0.013123359580052493 0.5539787441701123 752.0
blunderbusses 0.01310615989515072 0.7894221235964807 753.0
in 0.013089005235602094 0.47929688760994305 754.0
among 0.013071895424836602 0.7417912989559643 755.0
them, 0.013054830287206266 0.3147273321093723 756.0
loaded 0.01303780964797914 0.19315950918736946 757.0
with 0.013020833333333334 0.41596757481706426 758.0
rounds 0.013003901170351105 0.04540478902243228 759.0
of 0.012987012987012988 0.19716320341367688 760.0
shot 0.01297016861219196 0.9400463811024876 761.0
and 0.012953367875647668 0.8274815334476038 762.0
ball; 0.0129366106080207 0.5156330333139523 763.0
thieves 0.012919896640826873 0.48151340807223075 764.0
snipped 0.012903225806451613 0.33602034920188684 765.0
off 0.01288659793814433 0.9775441026000379 766.0
diamond 0.01287001287001287 0.7084827070324909 767.0
crosses 0.012853470437017995 0.7940948810069096 768.0
from 0.012836970474967908 0.31167463823355535 769.0
the 0.01282051282051282 0.8036967603066079 770.0
necks 0.012804097311139564 0.46674426936082225 771.0
of 0.01278772378516624 0.9756890911033217 772.0
noble 0.01277139208173691 0.5777916719615364 773.0
lords 0.012755102040816327 0.8521306122104134 774.0
at 0.012738853503184714 0.1358652106024556 775.0
Court 0.01272264631043257 0.820992061601891 776.0
drawing-rooms; 0.012706480304955527 0.19743131511852452 777.0
musketeers 0.012690355329949238 0.3301120865449183 778.0
went 0.012674271229404309 0.21549684472231112 779.0
into 0.012658227848101266 0.8885114531333018 780.0
St. 0.012642225031605562 0.8991889051342438 781.0
Giles's, 0.012626262626262626 0.3762704933694203 782.0
to 0.012610340479192938 0.6136155696691874 783.0
search 0.012594458438287154 0.17110236895709263 784.0
for 0.012578616352201259 0.9923715387147829 785.0
contraband 0.01256281407035176 0.4429433727849872 786.0
goods, 0.012547051442910916 0.5343768342135182 787.0
and 0.012531328320802004 0.6644035479551943 788.0
the 0.012515644555694618 0.18722376746237557 789.0
mob 0.0125 0.6349704680862942 790.0
fired 0.012484394506866416 0.30136826464698807 791.0
on 0.012468827930174564 0.773756608318099 792.0
the 0.012453300124533 0.97196639356818 793.0
musketeers, 0.012437810945273632 0.9557722801176567 794.0
and 0.012422360248447204 0.09468578902957614 795.0
the 0.01240694789081886 0.0597605498496806 796.0
musketeers 0.012391573729863693 0.4532953352521175 797.0
fired 0.012376237623762377 0.6742450398392874 798.0
on 0.012360939431396786 0.6632648792692166 799.0
the 0.012345679012345678 0.03843479563970764 800.0
mob, 0.012330456226880395 0.7281200023429911 801.0
and 0.012315270935960592 0.44494850601102365 802.0
nobody 0.012300123001230012 0.5631564985459734 803.0
thought 0.012285012285012284 0.6240335997727448 804.0
any 0.012269938650306749 0.9217034325783554 805.0
of 0.012254901960784314 0.38925911498840826 806.0
these 0.012239902080783354 0.3679451259346709 807.0
occurrences 0.012224938875305624 0.3308756916941613 808.0
much 0.01221001221001221 9.995590546085786E-4 809.0
out 0.012195121951219513 0.4806334167609304 810.0
of 0.012180267965895249 0.5251876642573289 811.0
the 0.012165450121654502 0.08920382487573464 812.0
common 0.012150668286755772 0.9725514983028166 813.0
way. 0.012135922330097087 0.6354924862589584 814.0
In 0.012121212121212121 0.6033307006696014 815.0
the 0.012106537530266344 0.773213414772742 816.0
midst 0.012091898428053204 0.45607328481706766 817.0
of 0.012077294685990338 0.9722206824126431 818.0
them, 0.012062726176115802 0.8749702404604892 819.0
the 0.012048192771084338 0.375739652030447 820.0
hangman, 0.012033694344163659 0.8650490364016559 821.0
ever 0.01201923076923077 0.9600304341657225 822.0
busy 0.012004801920768308 0.2729155157581792 823.0
and 0.011990407673860911 0.3730839150673373 824.0
ever 0.011976047904191617 0.9333863502809036 825.0
worse 0.011961722488038277 0.9663145977407701 826.0
than 0.011947431302270013 0.9959066756124122 827.0
useless, 0.011933174224343675 0.5471031596688519 828.0
was 0.011918951132300357 0.6596653952972635 829.0
in 0.011904761904761904 0.40424655234870766 830.0
constant 0.011890606420927468 0.050657823304601224 831.0
requisition; 0.011876484560570071 0.21730615086750027 832.0
now, 0.011862396204033215 0.031078654828659014 833.0
stringing 0.011848341232227487 0.7195461815664692 834.0
up 0.011834319526627219 0.17045732173401862 835.0
long 0.01182033096926714 0.9982879112988552 836.0
rows 0.011806375442739079 0.7736013488508824 837.0
of 0.01179245283018868 0.28235987258872053 838.0
miscellaneous 0.011778563015312132 0.8630416096691733 839.0
criminals; 0.011764705882352941 0.07081402729227948 840.0
now, 0.011750881316098707 0.97925337546087 841.0
hanging 0.011737089201877934 0.7277423621301399 842.0
a 0.011723329425556858 0.9820599979023925 843.0
housebreaker 0.0117096018735363 0.8230307419080699 844.0
on 0.011695906432748537 0.1185397445948162 845.0
Saturday 0.011682242990654205 0.7970168576930368 846.0
who 0.011668611435239206 0.13929965701288471 847.0
had 0.011655011655011656 0.11769079736879973 848.0
been 0.011641443538998836 0.38463343098540737 849.0
taken 0.011627906976744186 0.27232903515107687 850.0
on 0.011614401858304297 0.4789416863839049 851.0
Tuesday; 0.01160092807424594 0.3719486933462103 852.0
now, 0.011587485515643106 0.5355905763667648 853.0
burning 0.011574074074074073 0.16800015382547118 854.0
people 0.011560693641618497 0.8204704544086817 855.0
in 0.011547344110854504 0.09819387757099873 856.0
the 0.011534025374855825 0.4018653769374494 857.0
hand 0.01152073732718894 0.9448222393582106 858.0
at 0.011507479861910242 0.9434600228120789 859.0
Newgate 0.011494252873563218 0.5475533264932262 860.0
by 0.011481056257175661 0.008617493073324933 861.0
the 0.011467889908256881 0.6024564331071571 862.0
dozen, 0.011454753722794959 0.27807679209277425 863.0
and 0.011441647597254004 0.3660640243557475 864.0
now 0.011428571428571429 0.2955815572785456 865.0
burning 0.01141552511415525 0.5093225695510324 866.0
pamphlets 0.011402508551881414 0.3902362030379296 867.0
at 0.011389521640091117 0.40490975981357324 868.0
the 0.011376564277588168 0.5919987026446671 869.0
door 0.011363636363636364 0.789576365846952 870.0
of 0.011350737797956867 0.47044152356459057 871.0
Westminster 0.011337868480725623 0.08875557150369928 872.0
Hall; 0.011325028312570781 0.8109265098699908 873.0
to-day, 0.011312217194570135 0.5613200882300382 874.0

Total: 0/3 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
Running 26 total tests.

Test 1a-1e: 
 Measuring total memory usage after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          424         
=&gt; passed       64         3112         
=&gt; passed      256        12328         
=&gt; passed     1024        49192         
=&gt; passed     4096       196648         
==&gt; 5/5 tests passed

 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 2a-2e: Measuring total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          472         
=&gt; passed       64         3160         
=&gt; passed      256        12376         
=&gt; passed     1024        49240         
=&gt; passed     4096       196696         
==&gt; 5/5 tests passed

Memory of Deque after adding N = 2^i + 1 items:
 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 3a-3e: Measuring total memory usage after inserting 2N+1 items
then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          472         
=&gt; passed       64         3160         
=&gt; passed      256        12376         
=&gt; passed     1024        49240         
=&gt; passed     4096       196696         
==&gt; 5/5 tests passed

 * Student memory = 48.00 N + 40.00  (R^2 = 1.000)



Test 4a-4e: Measuring total memory usage after inserting N items 
 and then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8           88         
=&gt; passed       64           88         
=&gt; passed      256           88         
=&gt; passed     1024           88         
=&gt; passed     4096           88         
==&gt; 5/5 tests passed

Memory of Deque after adding N = 2^i items:
 * Student memory = 88.00  (R^2 = 1.000)



Test 5a-5e: Measuring iterator memory usage after inserting N items 
 (should not grow with N).

                 N        bytes
----------------------------------------------------------
=&gt; passed        8           32         
=&gt; passed       64           32         
=&gt; passed      256           32         
=&gt; passed     1024           32         
=&gt; passed     4096           32         
==&gt; 5/5 tests passed

Memory of Deque iterator after adding N = 2^i items:
 * Student memory = 32.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them:
==&gt; passed

Total: 26/26 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
Running 21 total tests.

Test 1a-1d: Measuring total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          720         
=&gt; passed      256         2256         
=&gt; passed     1024         8400         
=&gt; passed     4096        32976         
==&gt; 4/4 tests passed


 * Student memory = 8.00 N + 208.00  (R^2 = 1.000)



Test 2a-2d: Measuring total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         1232         
=&gt; passed      256         4304         
=&gt; passed     1024        16592         
=&gt; passed     4096        65744         
==&gt; 4/4 tests passed


 * Student memory = 16.00 N + 192.00  (R^2 = 1.000)



Test 3a-3d: Measuring total memory usage after inserting 2N+1 items
then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         3344         
=&gt; passed      256        12704         
=&gt; passed     1024        53272         
=&gt; passed     4096       205232         
==&gt; 4/4 tests passed


 * Student memory = -0.01 N^2 + 55.21 N + -381.96  (R^2 = 1.000)



Test 4a-4d: Measuring total memory usage after inserting N items and 
 then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          392         
=&gt; passed      256          392         
=&gt; passed     1024          392         
=&gt; passed     4096          392         
==&gt; 4/4 tests passed


 * Student memory = 396.36  (R^2 = 0.000)



Test 5a-5d: Measuring iterator memory usage after inserting N items

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          576         
=&gt; passed      256         2112         
=&gt; passed     1024         8256         
=&gt; passed     4096        32832         
==&gt; 4/4 tests passed


 * Student   memory = 8.00 N + 64.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them:
 * loitering detected on 96 of 100 deletions
==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 20/21 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: addFirst(), addLast(), removeFirst(), and removeLast()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.01
=&gt; passed       16384     0.01
=&gt; passed      128000     0.02
=&gt; passed      256000     0.16
=&gt; passed     1024000     0.53
==&gt; 6/6 tests passed


N random calls to next() and hasNext() in iterator()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.02
=&gt; passed     1024000     0.04
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: enqueue(), sample(), dequeue(), isEmpty(), and size()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.01
=&gt; passed       16384     0.01
=&gt; passed      128000     0.03
=&gt; passed      256000     0.07
=&gt; passed     1024000     0.30
==&gt; 6/6 tests passed


N random calls to: next() and hasNext() from iterator()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.01
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed     1024000     0.15
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-07-Mar 23:55:31</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
        <tr><td>Feedback</td><td><pre>Compilation:  <font color="#009900">PASSED</font>

API:          <font color="#990000">FAILED</font>
<pre>Deque:<p>

Wrong type paramters: 
  *  Expected: &lt;Item&gt;
  *  Received: &lt;T&gt;

The following interfaces are missing:
  *  Iterable&lt;Item&gt;

The following interfaces should not be implemented:
  *  Iterable&lt;T&gt;

The following methods are missing:
  *  public Item removeFirst()
  *  public Item removeLast()
  *  public java.util.Iterator&lt;Item&gt; iterator()
  *  public void addFirst(Item)
  *  public void addLast(Item)

The following methods should be removed or made private:
  *  public T removeFirst()
  *  public T removeLast()
  *  public java.util.Iterator&lt;T&gt; iterator()
  *  public void addFirst(T)
  *  public void addLast(T)


RandomizedQueue:</p><p>

The following nested classes should be made private:
  *  ListIterator


</p></pre></pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-07-Mar 23:45:02</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
        <tr><td>Feedback</td><td><pre>Compilation:  <font color="#009900">PASSED</font>

API:          <font color="#990000">FAILED</font>
<pre>Deque:<p>

Wrong type paramters: 
  *  Expected: &lt;Item&gt;
  *  Received: &lt;T&gt;

The following interfaces are missing:
  *  Iterable&lt;Item&gt;

The following interfaces should not be implemented:
  *  Iterable&lt;T&gt;

The following methods are missing:
  *  public Item removeFirst()
  *  public Item removeLast()
  *  public java.util.Iterator&lt;Item&gt; iterator()
  *  public void addFirst(Item)
  *  public void addLast(Item)

The following methods should be removed or made private:
  *  public T removeFirst()
  *  public T removeLast()
  *  public java.util.Iterator&lt;T&gt; iterator()
  *  public void addFirst(T)
  *  public void addLast(T)


RandomizedQueue:</p><p>

Wrong type paramters: 
  *  Expected: &lt;Item&gt;
  *  Received: &lt;T&gt;

The following interfaces are missing:
  *  Iterable&lt;Item&gt;

The following interfaces should not be implemented:
  *  Iterable&lt;T&gt;

The following methods are missing:
  *  public Item dequeue()
  *  public Item sample()
  *  public java.util.Iterator&lt;Item&gt; iterator()
  *  public void enqueue(Item)

The following methods should be removed or made private:
  *  public T dequeue()
  *  public T sample()
  *  public java.util.Iterator&lt;T&gt; iterator()
  *  public void enqueue(T)

The following nested classes should be made private:
  *  ListIterator


</p></pre></pre> </td></tr>
    </tbody>
</table>

            </div>
        </div>
    </div>
        
    
        <script type="text/javascript" async="" src="./Assignment Results   Algorithms, Part I_files/204.min.js"></script><script type="text/javascript" async="" src="./Assignment Results   Algorithms, Part I_files/ga.js"></script><script src="./Assignment Results   Algorithms, Part I_files/spark.js"></script>
    
    <script>
        $("[data-readme]").each(function() {
            window.ReadMe(this);
        });
    </script>

    <script src="./Assignment Results   Algorithms, Part I_files/modal_focus.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/get_query_parameters.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/signature_track.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/item_list.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/navbar.js" type="text/javascript"></script>

    
    <script type="text/javascript">
        // SET UP THE MULTITRACKER
                window.logger = window.Log({level:"error"});
                window.multitracker = window.MultiTracker({logger:window.logger});
        window.multitracker.register('204', window._204 = window._204 || []);
        window.multitracker.register('ga', window._gaq = window._gaq || [], 'google');

        // SET UP GA and 204
        window._gaq.push(['_setAccount', 'UA-28377374-1']);
        window._gaq.push(['_setDomainName', 'coursera.org']);
        window._gaq.push(['_setAllowLinker', true]);  
        window._gaq.push(['_trackPageview']);
        
        window._204.push({key:"pageview", val:{}});

        // override our multitracker queues with the ga queue when it is ready
        (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        
          ga.onload = ga.onreadystatechange = function() {
              ga.onreadystatechange = ga.onload = null;
              window.multitracker.get('ga').queue = window._gaq;
          };
        })();

        // override our multitracker queues with the 204 queue when it is ready
        (function() {
          var a = document.createElement('script'); a.type = 'text/javascript'; a.async = true;
          a.src = 'https://eventing.coursera.org/204.min.js?client=spark&user=1484404';
          var s = document.getElementsByTagName('script')[0];
          s.parentNode.insertBefore(a, s);
          a.onload = a.onreadystatechange = function() {
              a.onreadystatechange = a.onload = null;
              window.multitracker.get('204').queue = window._204;
          };
        })();
    </script>

    <script>
      // Set up shared AB testing object
      (function() {
          var userId = $('[data-user-id]:first').attr('data-user-id');

          // Adapted from app/www/static/js/models/user.js
          if (userId == 0) {
              userId = window.Cookie.get('ab-session-id');
              if (!userId) {
                  userId =
                      (Math.random() * 10000000000).toFixed() + '-' +
                      (new Date()).getTime();
                  window.Cookie.set("ab-session-id", userId, { expires: 36500 });
              }
          }

                        window.ab = window.AB(userId, {debug:false, tracker:window.multitracker, logger:window.logger});
          
      })();
      // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();
    </script>

    <script type="text/x-mathjax-config">
MathJax.Hub.Config({
  config: ["MMLorHTML.js"],
  
  styleSheets: [],
  styles: {},

  jax: ["input/TeX"],
  
  extensions: ["tex2jax.js"],

  preJax: null,
  postJax: null,

  preRemoveClass: "MathJax_Preview",

  showProcessingMessages: true,

  messageStyle: "none",
  
  displayAlign: "center",
  displayIndent: "0em",
  
  delayStartupUntil: "none",

  skipStartupTypeset: false,
  
  elements: [],
  
  tex2jax: {
	    inlineMath: [
	                 ['$$','$$'],      // uncomment this for standard TeX math delimiters
	                 ['\\(','\\)']
	                 ],

	                 displayMath: [
	                 ['\\[','\\]']
	                 ],

    skipTags: ["script","noscript","style","textarea","pre","code"],
    ignoreClass: "tex2jax_ignore",
    processClass: "tex2jax_process",
    processEscapes: false,
    processEnvironments: true,
    preview: "TeX"
    
  },
  
  mml2jax: {
    preview: "alttext"
    
  },
  
  jsMath2jax: {
    preview: "TeX"
    
  },

  TeX: {
    TagSide: "right",
    TagIndent: ".8em",
    MultLineWidth: "85%",
    Macros: {},

    extensions: ["AMSmath.js", "AMSsymbols.js"]
    
  },

  //============================================================================
  //
  //  These parameters control the MathML inupt jax.
  //
  MathML: {
    //
    //  This specifies whether to use TeX spacing or MathML spacing when the
    //  HTML-CSS output jax is used.
    //
    useMathMLspacing: false
  },
  
  //============================================================================
  //
  //  These parameters control the HTML-CSS output jax.
  //
  "HTML-CSS": {
    
    scale: 100,
    
    availableFonts: ["STIX","TeX"],
    
    preferredFont: "TeX",
    
    webFont: "TeX",
    
    imageFont: "TeX",
    
    undefinedFamily: "STIXGeneral,'Arial Unicode MS',serif",
      
    showMathMenu: true,

    styles: {},
    
    tooltip: {
      delayPost: 600,          // milliseconds delay before tooltip is posted after mouseover
      delayClear: 600,         // milliseconds delay before tooltip is cleared after mouseout
      offsetX: 10, offsetY: 5  // pixels to offset tooltip from mouse position
    }
  },
  
  //============================================================================
  //
  //  These parameters control the NativeMML output jax.
  //
  NativeMML: {

    scale: 100,

    showMathMenu: true,
    showMathMenuMSIE: true,

    styles: {}
  },
  
  MathMenu: {
    delay: 400,
    
    helpURL: "http://www.mathjax.org/help/user/",

    showRenderer: true,
    showFontMenu: false,
    showContext:  false,

    windowSettings: {
      status: "no", toolbar: "no", locationbar: "no", menubar: "no",
      directories: "no", personalbar: "no", resizable: "yes", scrollbars: "yes",
      width: 100, height: 50
    },
    
    styles: {}
    
  },

  MMLorHTML: {
    prefer: {
      MSIE:    "MML",
      Firefox: "MML",
      Opera:   "HTML",
      other:   "HTML"
    }
  }
});
</script>
<script type="text/javascript">
(function () {

  function loadMathJax() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://duqnjvq4jwr55.cloudfront.net/2.1/MathJax.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  window.loadOrRefreshMathJax = function(domId) {
    if (window.MathJax) {
      if (domId) {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, domId]);
      } else {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    } else {
      loadMathJax();
    }
  }
})();
</script>
    
    <script type="text/javascript">
        var site_base_url = "https:\/\/www.coursera.org\/";
        var site_static_asset_url = "https:\/\/dt5zaw6a98blc.cloudfront.net\/site-static\/";
        var spark_class_short_name = "algs4partI";
        var spark_class_id = 970302;
        var spark_class_url = "\/algs4partI-002";
        var spark_signature_url = "https:\/\/class.coursera.org\/algs4partI-002\/signature\/";
        
        var course_strings_name = "Algorithms, Part I";
        var student_full_name = "Vishal Juneja";
    </script>

    




</body></html>