<!DOCTYPE html>
<!-- saved from url=(0075)https://class.coursera.org/algs4partI-002/assignment/part_results?part_id=9 -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Assignment Results | Algorithms, Part I</title>
<link rel="stylesheet" href="https://dt5zaw6a98blc.cloudfront.net/site-static/8be561f5d56b20136c99ea175f81d0a2cc74b164/css/spark.main.css">
<link rel="stylesheet" href="https://www.coursera.org/maestro/api/course/970302/course.css">
<link rel="icon" href="https://spark-public.s3.amazonaws.com/algs4partI/static/images/favicon.ico">
</head>

<body>
    <a href="https://class.coursera.org/algs4partI-002/assignment/part_results?part_id=9#course-page-content" class="hidden">Skip Navigation</a>
    <div class="hidden">
        This page features MathJax technology to render mathematical formulae.
        If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.
    </div>

    <h1 class="hidden">Algorithms, Part I</h1>

    

<div class="course-topbar container-fluid" role="banner">

    <div class="row-fluid">
        
        <div class="span3">
          <a href="https://www.coursera.org/" class="course-topbar-logo" data-if-linkable="add-referrer"></a>
        </div>

        <div class="course-topbar-nav-container span9" style="float:right;">
            <h2 class="hidden">Top Navigation Bar</h2>

            <ul class="course-topbar-nav-list">
                <li class="course-topbar-nav-list-item">
                  <a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a>
                </li>

                                
                <li class="course-topbar-nav-list-item" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="" style="cursor:pointer;" data-popup-direction="se">
                                        <a data-user-id="1484404">  
                        Vishal Juneja 
                        <i class="icon-caret-down"></i>
                    </a>
                </li>
               
                            </ul>
        </div>
    </div>

    <div id="course-topbar-aboutus" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/jobs" target="_new" data-if-linkable="add-referrer">Jobs</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/team" target="_new" data-if-linkable="add-referrer">Team</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/contact" target="_new" data-if-linkable="add-referrer">Contact Us</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/" target="_new" data-if-linkable="add-referrer">About Us</a>
    </div>

    <div id="course-topbar-my" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/" target="_new">Courses</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/profile" target="_new">Profile</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/records" target="_new">Course Records</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/settings" target="_new">Settings</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/class/preferences">Course Preferences</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/auth/logout">Logout</a>
    </div>

</div>








<style type="text/css">
 


</style>
<div class="course-topbanner">
  <div class="course-topbanner-university-logo">
    <a href="https://www.coursera.org/princeton" class="coursera-university-color" target="_blank" data-if-linkable="add-referrer">
      <img src="./Assignment Results   Algorithms, Part I_files/university_logo" alt="University logo">
    </a>
  </div>

  
  <h1 class="course-topbanner-header">
      <a class="course-topbanner-name coursera-university-color" href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock">
        Algorithms, Part I      </a>
      <br>
      <span class="course-topbanner-instructor" style="">
        by Kevin  Wayne, Robert  Sedgewick      </span>
  </h1>
</div>
    
        <div class="container-fluid" style="position:relative;">
        <div class="row-fluid">
            <div id="course-page-sidebar" role="navigation">
                <div class="course-navbar-container">
	<a href="https://class.coursera.org/algs4partI-002/class/index">
	<img src="./Assignment Results   Algorithms, Part I_files/logo" style="width: 210px;height: 112px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.35);">
	</a>
<h2 class="hidden">Side Navigation Bar</h2>
<ul class="course-navbar-list">
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Home							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Syllabus							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=schedule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Schedule							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Lectures							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Exercises							</a>
						</li>
	
		
	<li class="course-navbar-item active">
								<a href="https://class.coursera.org/algs4partI-002/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Programming Assignments							<span class="course-navbar-selected-marker">(selected)</span></a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Job Interview Questions							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/forum/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Discussion Forums							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=errata" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Errata							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Surveys							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="http://algs4.cs.princeton.edu/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Booksite				<span class="icon-share"></span>			</a>
						</li>
	
	
		
		<li class="course-navbar-item">
		<a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">
			Join a Meetup
			<span class="icon-share"></span>
		</a>
	</li>
	
    </ul>

</div>
            </div>
            <div id="course-page-content" role="main">
                                <h2>Programming Assignment 4: 8 Puzzle | 8puzzle.zip</h2>
<hr>

<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-14-Mar 01:12:56</td></tr>
        <tr><td>Raw Score</td><td>91.25 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">24/24 tests passed</font>
Memory:       <font color="#991500">1/8 tests passed</font>
Timing:       <font color="#009900">18/18 tests passed</font>

Raw score: <font color="#0E9900">91.25%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 16K
-rw-r--r-- 1 5.9K Mar 13 19:43 Board.java
-rw-r--r-- 1 4.0K Mar 13 19:43 Solver.java
-rw-r--r-- 1 2.9K Mar 13 19:43 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
Note: Solver.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Board.java:5:25: Array brackets at illegal position.
Board.java:7:13: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Board.java:8:13: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Board.java:10:17: Name 'z_row' must match pattern '^[a-z][a-zA-Z0-9]*$|^[A-Z][A-Z_0-9]*$'.
Board.java:11:17: Name 'z_col' must match pattern '^[a-z][a-zA-Z0-9]*$|^[A-Z][A-Z_0-9]*$'.
Board.java:15:32: '{' is not preceded with whitespace.
Board.java:16:11: 'if' is not followed by whitespace.
Board.java:25:12: 'for' is not followed by whitespace.
Board.java:25:18: '=' is not preceded with whitespace.
Board.java:25:19: '=' is not followed by whitespace.
Board.java:25:23: '&lt;' is not preceded with whitespace.
Board.java:25:24: '&lt;' is not followed by whitespace.
Board.java:25:31: '{' is not preceded with whitespace.
Board.java:26:16: 'for' is not followed by whitespace.
Board.java:26:22: '=' is not preceded with whitespace.
Board.java:26:23: '=' is not followed by whitespace.
Board.java:26:27: '&lt;' is not preceded with whitespace.
Board.java:26:28: '&lt;' is not followed by whitespace.
Board.java:26:35: '{' is not preceded with whitespace.
Board.java:28:19: 'if' is not followed by whitespace.
Board.java:28:37: '{' is not preceded with whitespace.
Board.java:32:23: 'if' is not followed by whitespace.
Board.java:32:45: '{' is not preceded with whitespace.
Board.java:35:66: '%' is not preceded with whitespace.
Board.java:35:67: '%' is not followed by whitespace.
Board.java:44:27: '{' is not preceded with whitespace.
Board.java:49:25: '{' is not preceded with whitespace.
Board.java:54:27: '{' is not preceded with whitespace.
Board.java:63:11: 'if' is not followed by whitespace.
Board.java:63:13: '==' is not preceded with whitespace.
Board.java:63:15: '==' is not followed by whitespace.
Board.java:63:17: '{' is not preceded with whitespace.
Board.java:71:24: '{' is not preceded with whitespace.
Board.java:73:24: Array brackets at illegal position.
Board.java:74:12: 'for' is not followed by whitespace.
Board.java:74:18: '=' is not preceded with whitespace.
Board.java:74:19: '=' is not followed by whitespace.
Board.java:74:23: '&lt;' is not preceded with whitespace.
Board.java:74:24: '&lt;' is not followed by whitespace.
Board.java:74:31: '{' is not preceded with whitespace.
Board.java:75:16: 'for' is not followed by whitespace.
Board.java:75:22: '=' is not preceded with whitespace.
Board.java:75:23: '=' is not followed by whitespace.
Board.java:75:27: '&lt;' is not preceded with whitespace.
Board.java:75:28: '&lt;' is not followed by whitespace.
Board.java:75:35: '{' is not preceded with whitespace.
Board.java:83:11: 'if' is not followed by whitespace.
Board.java:83:23: ',' is not followed by whitespace.
Board.java:83:26: '{' is not preceded with whitespace.
Board.java:84:15: 'if' is not followed by whitespace.
Board.java:84:57: '{' is not preceded with whitespace.
Board.java:85:19: 'if' is not followed by whitespace.
Board.java:85:29: ',' is not followed by whitespace.
Board.java:92:15: 'if' is not followed by whitespace.
Board.java:92:57: '{' is not preceded with whitespace.
Board.java:93:19: 'if' is not followed by whitespace.
Board.java:93:29: ',' is not followed by whitespace.
Board.java:105:36: '{' is not preceded with whitespace.
Board.java:106:11: 'if' is not followed by whitespace.
Board.java:106:13: '==' is not preceded with whitespace.
Board.java:106:15: '==' is not followed by whitespace.
Board.java:107:11: 'if' is not followed by whitespace.
Board.java:107:13: '==' is not preceded with whitespace.
Board.java:107:15: '==' is not followed by whitespace.
Board.java:108:11: 'if' is not followed by whitespace.
Board.java:110:11: 'if' is not followed by whitespace.
Board.java:111:11: 'if' is not followed by whitespace.
Board.java:111:22: '!=' is not preceded with whitespace.
Board.java:111:24: '!=' is not followed by whitespace.
Board.java:111:48: '!=' is not preceded with whitespace.
Board.java:111:50: '!=' is not followed by whitespace.
Board.java:112:11: 'if' is not followed by whitespace.
Board.java:114:12: 'for' is not followed by whitespace.
Board.java:114:18: '=' is not preceded with whitespace.
Board.java:114:19: '=' is not followed by whitespace.
Board.java:114:23: '&lt;' is not preceded with whitespace.
Board.java:114:24: '&lt;' is not followed by whitespace.
Board.java:114:48: '{' is not preceded with whitespace.
Board.java:115:15: 'if' is not followed by whitespace.
Board.java:122:39: '{' is not preceded with whitespace.
Board.java:129:11: 'if' is not followed by whitespace.
Board.java:129:25: ',' is not followed by whitespace.
Board.java:135:11: 'if' is not followed by whitespace.
Board.java:135:24: ',' is not followed by whitespace.
Board.java:141:11: 'if' is not followed by whitespace.
Board.java:141:23: ',' is not followed by whitespace.
Board.java:147:11: 'if' is not followed by whitespace.
Board.java:147:26: ',' is not followed by whitespace.
Board.java:158:29: '{' is not preceded with whitespace.
Board.java:159:12: 'if' is not followed by whitespace.
Board.java:172:43: '{' is not preceded with whitespace.
Board.java:173:11: 'if' is not followed by whitespace.
Board.java:177:41: '{' is not preceded with whitespace.
Board.java:178:11: 'if' is not followed by whitespace.
Board.java:182:42: '{' is not preceded with whitespace.
Board.java:183:11: 'if' is not followed by whitespace.
Board.java:187:44: '{' is not preceded with whitespace.
Board.java:188:11: 'if' is not followed by whitespace.
Board.java:193:71: '{' is not preceded with whitespace.
Board.java:199:36: '{' is not preceded with whitespace.
Board.java:200:11: 'if' is not followed by whitespace.
Board.java:200:13: '&lt;' is not preceded with whitespace.
Board.java:200:14: '&lt;' is not followed by whitespace.
Board.java:200:32: '&gt;=' is not preceded with whitespace.
Board.java:200:34: '&gt;=' is not followed by whitespace.
Solver.java:5:83: '{' is not preceded with whitespace.
Solver.java:6:63: '{' is not preceded with whitespace.
Solver.java:10:16: 'if' is not followed by whitespace.
Solver.java:10:19: '&gt;' is not preceded with whitespace.
Solver.java:10:20: '&gt;' is not followed by whitespace.
Solver.java:11:21: 'if' is not followed by whitespace.
Solver.java:11:24: '&lt;' is not preceded with whitespace.
Solver.java:11:25: '&lt;' is not followed by whitespace.
Solver.java:21:33: '{' is not preceded with whitespace.
Solver.java:22:11: 'if' is not followed by whitespace.
Solver.java:22:19: '==' is not preceded with whitespace.
Solver.java:22:21: '==' is not followed by whitespace.
Solver.java:33:14: 'while' is not followed by whitespace.
Solver.java:33:30: '{' is not preceded with whitespace.
Solver.java:34:16: 'for' is not followed by whitespace.
Solver.java:34:44: '{' is not preceded with whitespace.
Solver.java:35:19: 'if' is not followed by whitespace.
Solver.java:47:14: 'while' is not followed by whitespace.
Solver.java:47:28: '!=' is not preceded with whitespace.
Solver.java:47:30: '!=' is not followed by whitespace.
Solver.java:54:11: 'if' is not followed by whitespace.
Solver.java:54:39: '{' is not preceded with whitespace.
Solver.java:65:32: '{' is not preceded with whitespace.
Solver.java:70:23: '{' is not preceded with whitespace.
Solver.java:75:38: '{' is not preceded with whitespace.
Solver.java:80:43: '{' is not preceded with whitespace.
Solver.java:105:22: Variable 'board' must be private and have accessor methods.
Solver.java:106:27: Variable 'previous' must be private and have accessor methods.
Solver.java:107:20: Variable 'moves' must be private and have accessor methods.
Solver.java:109:71: '{' is not preceded with whitespace.
Solver.java:115:31: '{' is not preceded with whitespace.
Solver.java:119:32: '{' is not preceded with whitespace.
Solver.java:123:43: '{' is not preceded with whitespace.
Solver.java:127:32: '{' is not preceded with whitespace.
Solver.java:128:15: 'if' is not followed by whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 15 total tests.

Test 1: Test hamming() with file inputs to ensure that it calculates the correct distance
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 4: Test manhattan() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 5: Test dimension() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random puzzle inputs
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 10: Test twin() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 11: Test isGoal() on file inputs
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 12: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 13: Check equals()
  *  reflexive
  *  symmetric
  *  checks that individual entries of array are equal
  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==&gt; passed

Test 14: Check that Board is immutable by changing argument 2d array after construction
 and making sure Board does not change
==&gt; passed

Test 15: Check that manhattan() and hamming() are independent of neighbors() calls by calling neighbors() 13 times before testing hamming() and manhattan()
  * (hamming) puzzle00.txt
  * (hamming) puzzle27.txt
  * (hamming) puzzle2x2-unsolvable1.txt
  * (manhattan) puzzle00.txt
  * (manhattan) puzzle27.txt
  * (manhattan) puzzle2x2-unsolvable1.txt
==&gt; passed


Total: 15/15 tests passed!

================================================================

******************************************************************************
*  **** executing with reference Board.java ****
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls each to moves(), isSolvable(), and iterator(). The results of these two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>     4           312                  248
=&gt; <font color="#990000"><b>FAILED</b></font>     8           632                  568
=&gt; <font color="#990000"><b>FAILED</b></font>    12          1080                 1016
=&gt; <font color="#990000"><b>FAILED</b></font>    16          1656                 1592
=&gt; <font color="#990000"><b>FAILED</b></font>    20          2360                 2296
=&gt; <font color="#990000"><b>FAILED</b></font>    36          6456                 6392
=&gt; <font color="#990000"><b>FAILED</b></font>    72         23160                23096
=&gt; passed   120         61560                61496
==&gt; 1/8 tests passed

Total: 1/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 120.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 18 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 10 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; passed  puzzle20.txt   3     0.08       2045                1217                 829         
=&gt; passed  puzzle21.txt   3     0.07       5339                3160                2180         
=&gt; passed  puzzle22.txt   3     0.03       3020                1773                1248         
=&gt; passed  puzzle23.txt   3     0.04       5009                2959                2051         
=&gt; passed  puzzle24.txt   3     0.04       6259                3788                2472         
=&gt; passed  puzzle25.txt   3     0.05      13611                8092                5520         
=&gt; passed  puzzle26.txt   3     0.04      11221                6710                4512         
=&gt; passed  puzzle27.txt   3     0.03      10536                6332                4205         
=&gt; passed  puzzle28.txt   3     0.08      23556               14069                9488         
=&gt; passed  puzzle29.txt   3     0.05      21762               13061                8702         
=&gt; passed  puzzle30.txt   3     0.11      42884               25766               17119         
=&gt; passed  puzzle31.txt   3     0.21      81618               48510               33109         
=&gt; passed  puzzle34.txt   4     0.50     126725               60471               66255         
=&gt; passed  puzzle35.txt   4     3.78     808813              398619              410195         
=&gt; passed  puzzle37.txt   4     0.41     133207               64118               69090         
=&gt; passed  puzzle39.txt   4     0.51     151539               74231               77309         
=&gt; passed  puzzle41.txt   5     0.79     166438               71745               94694         
=&gt; passed  puzzle44.txt   5     2.90     476129              208289              267841         
==&gt; 18/18 tests passed

Total: 18/18 tests passed!

================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Wed-13-Mar 23:32:34</td></tr>
        <tr><td>Raw Score</td><td>100.00 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">24/24 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#009900">18/18 tests passed</font>

Raw score: <font color="#009900">100.00%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 16K
-rw-r--r-- 1 6.6K Mar 13 18:03 Board.java
-rw-r--r-- 1 4.0K Mar 13 18:03 Solver.java
-rw-r--r-- 1 3.0K Mar 13 18:03 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
Note: Solver.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Board.java:5:25: Array brackets at illegal position.
Board.java:7:13: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Board.java:8:13: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Board.java:12:33: '{' is not preceded with whitespace.
Board.java:13:11: 'if' is not followed by whitespace.
Board.java:14:14: '=' is not preceded with whitespace.
Board.java:17:12: 'for' is not followed by whitespace.
Board.java:17:18: '=' is not preceded with whitespace.
Board.java:17:19: '=' is not followed by whitespace.
Board.java:17:23: '&lt;' is not preceded with whitespace.
Board.java:17:24: '&lt;' is not followed by whitespace.
Board.java:17:31: '{' is not preceded with whitespace.
Board.java:23:27: '{' is not preceded with whitespace.
Board.java:28:25: '{' is not preceded with whitespace.
Board.java:29:11: 'if' is not followed by whitespace.
Board.java:29:19: '!=' is not preceded with whitespace.
Board.java:29:21: '!=' is not followed by whitespace.
Board.java:33:12: 'for' is not followed by whitespace.
Board.java:33:30: '{' is not preceded with whitespace.
Board.java:34:16: 'for' is not followed by whitespace.
Board.java:34:29: '&lt;' is not preceded with whitespace.
Board.java:34:30: '&lt;' is not followed by whitespace.
Board.java:34:44: '{' is not preceded with whitespace.
Board.java:35:19: 'if' is not followed by whitespace.
Board.java:35:30: '{' is not preceded with whitespace.
Board.java:36:23: 'if' is not followed by whitespace.
Board.java:46:27: '{' is not preceded with whitespace.
Board.java:47:11: 'if' is not followed by whitespace.
Board.java:47:21: '!=' is not preceded with whitespace.
Board.java:47:23: '!=' is not followed by whitespace.
Board.java:51:12: 'for' is not followed by whitespace.
Board.java:51:25: '&lt;' is not preceded with whitespace.
Board.java:51:26: '&lt;' is not followed by whitespace.
Board.java:51:45: '{' is not preceded with whitespace.
Board.java:52:16: 'for' is not followed by whitespace.
Board.java:52:29: '&lt;' is not preceded with whitespace.
Board.java:52:30: '&lt;' is not followed by whitespace.
Board.java:52:49: '{' is not preceded with whitespace.
Board.java:53:19: 'if' is not followed by whitespace.
Board.java:53:32: '!=' is not preceded with whitespace.
Board.java:53:34: '!=' is not followed by whitespace.
Board.java:53:36: '{' is not preceded with whitespace.
Board.java:54:22: 'if' is not followed by whitespace.
Board.java:54:35: '!=' is not preceded with whitespace.
Board.java:54:37: '!=' is not followed by whitespace.
Board.java:54:43: '{' is not preceded with whitespace.
Board.java:56:67: '%' is not preceded with whitespace.
Board.java:56:68: '%' is not followed by whitespace.
Board.java:70:11: 'if' is not followed by whitespace.
Board.java:70:13: '==' is not preceded with whitespace.
Board.java:70:15: '==' is not followed by whitespace.
Board.java:70:17: '{' is not preceded with whitespace.
Board.java:71:21: '==' is not preceded with whitespace.
Board.java:71:23: '==' is not followed by whitespace.
Board.java:78:24: '{' is not preceded with whitespace.
Board.java:80:24: Array brackets at illegal position.
Board.java:81:12: 'for' is not followed by whitespace.
Board.java:81:18: '=' is not preceded with whitespace.
Board.java:81:19: '=' is not followed by whitespace.
Board.java:81:23: '&lt;' is not preceded with whitespace.
Board.java:81:24: '&lt;' is not followed by whitespace.
Board.java:81:31: '{' is not preceded with whitespace.
Board.java:88:11: 'if' is not followed by whitespace.
Board.java:88:23: ',' is not followed by whitespace.
Board.java:88:26: '{' is not preceded with whitespace.
Board.java:89:15: 'if' is not followed by whitespace.
Board.java:89:57: '{' is not preceded with whitespace.
Board.java:90:19: 'if' is not followed by whitespace.
Board.java:90:29: ',' is not followed by whitespace.
Board.java:97:15: 'if' is not followed by whitespace.
Board.java:97:57: '{' is not preceded with whitespace.
Board.java:98:19: 'if' is not followed by whitespace.
Board.java:98:29: ',' is not followed by whitespace.
Board.java:110:36: '{' is not preceded with whitespace.
Board.java:111:11: 'if' is not followed by whitespace.
Board.java:111:13: '==' is not preceded with whitespace.
Board.java:111:15: '==' is not followed by whitespace.
Board.java:112:11: 'if' is not followed by whitespace.
Board.java:112:13: '==' is not preceded with whitespace.
Board.java:112:15: '==' is not followed by whitespace.
Board.java:113:11: 'if' is not followed by whitespace.
Board.java:115:11: 'if' is not followed by whitespace.
Board.java:117:12: 'for' is not followed by whitespace.
Board.java:117:18: '=' is not preceded with whitespace.
Board.java:117:19: '=' is not followed by whitespace.
Board.java:117:23: '&lt;' is not preceded with whitespace.
Board.java:117:24: '&lt;' is not followed by whitespace.
Board.java:117:48: '{' is not preceded with whitespace.
Board.java:118:15: 'if' is not followed by whitespace.
Board.java:125:39: '{' is not preceded with whitespace.
Board.java:131:12: 'for' is not followed by whitespace.
Board.java:131:25: '&lt;' is not preceded with whitespace.
Board.java:131:26: '&lt;' is not followed by whitespace.
Board.java:131:45: '{' is not preceded with whitespace.
Board.java:132:15: 'if' is not followed by whitespace.
Board.java:133:16: 'for' is not followed by whitespace.
Board.java:133:29: '&lt;' is not preceded with whitespace.
Board.java:133:30: '&lt;' is not followed by whitespace.
Board.java:133:49: '{' is not preceded with whitespace.
Board.java:134:19: 'if' is not followed by whitespace.
Board.java:134:32: '==' is not preceded with whitespace.
Board.java:134:34: '==' is not followed by whitespace.
Board.java:134:36: '{' is not preceded with whitespace.
Board.java:143:11: 'if' is not followed by whitespace.
Board.java:147:24: Array brackets at illegal position.
Board.java:148:11: 'if' is not followed by whitespace.
Board.java:148:25: ',' is not followed by whitespace.
Board.java:154:11: 'if' is not followed by whitespace.
Board.java:154:24: ',' is not followed by whitespace.
Board.java:160:11: 'if' is not followed by whitespace.
Board.java:160:23: ',' is not followed by whitespace.
Board.java:166:11: 'if' is not followed by whitespace.
Board.java:166:26: ',' is not followed by whitespace.
Board.java:177:29: '{' is not preceded with whitespace.
Board.java:178:12: 'if' is not followed by whitespace.
Board.java:191:43: '{' is not preceded with whitespace.
Board.java:192:11: 'if' is not followed by whitespace.
Board.java:196:41: '{' is not preceded with whitespace.
Board.java:197:11: 'if' is not followed by whitespace.
Board.java:201:42: '{' is not preceded with whitespace.
Board.java:202:11: 'if' is not followed by whitespace.
Board.java:206:44: '{' is not preceded with whitespace.
Board.java:207:11: 'if' is not followed by whitespace.
Board.java:212:71: '{' is not preceded with whitespace.
Board.java:213:12: 'if' is not followed by whitespace.
Board.java:213:78: '{' is not preceded with whitespace.
Board.java:221:36: '{' is not preceded with whitespace.
Board.java:222:11: 'if' is not followed by whitespace.
Board.java:222:13: '&lt;' is not preceded with whitespace.
Board.java:222:14: '&lt;' is not followed by whitespace.
Board.java:222:32: '&gt;=' is not preceded with whitespace.
Board.java:222:34: '&gt;=' is not followed by whitespace.
Solver.java:5:83: '{' is not preceded with whitespace.
Solver.java:6:63: '{' is not preceded with whitespace.
Solver.java:10:16: 'if' is not followed by whitespace.
Solver.java:10:19: '&gt;' is not preceded with whitespace.
Solver.java:10:20: '&gt;' is not followed by whitespace.
Solver.java:11:21: 'if' is not followed by whitespace.
Solver.java:11:24: '&lt;' is not preceded with whitespace.
Solver.java:11:25: '&lt;' is not followed by whitespace.
Solver.java:21:33: '{' is not preceded with whitespace.
Solver.java:22:11: 'if' is not followed by whitespace.
Solver.java:22:19: '==' is not preceded with whitespace.
Solver.java:22:21: '==' is not followed by whitespace.
Solver.java:33:14: 'while' is not followed by whitespace.
Solver.java:33:30: '{' is not preceded with whitespace.
Solver.java:34:16: 'for' is not followed by whitespace.
Solver.java:34:44: '{' is not preceded with whitespace.
Solver.java:35:19: 'if' is not followed by whitespace.
Solver.java:47:14: 'while' is not followed by whitespace.
Solver.java:47:28: '!=' is not preceded with whitespace.
Solver.java:47:30: '!=' is not followed by whitespace.
Solver.java:54:11: 'if' is not followed by whitespace.
Solver.java:54:39: '{' is not preceded with whitespace.
Solver.java:65:32: '{' is not preceded with whitespace.
Solver.java:70:23: '{' is not preceded with whitespace.
Solver.java:75:38: '{' is not preceded with whitespace.
Solver.java:80:43: '{' is not preceded with whitespace.
Solver.java:105:22: Variable 'board' must be private and have accessor methods.
Solver.java:106:27: Variable 'previous' must be private and have accessor methods.
Solver.java:107:20: Variable 'moves' must be private and have accessor methods.
Solver.java:109:71: '{' is not preceded with whitespace.
Solver.java:115:31: '{' is not preceded with whitespace.
Solver.java:119:32: '{' is not preceded with whitespace.
Solver.java:123:43: '{' is not preceded with whitespace.
Solver.java:127:32: '{' is not preceded with whitespace.
Solver.java:128:15: 'if' is not followed by whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 15 total tests.

Test 1: Test hamming() with file inputs to ensure that it calculates the correct distance
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 4: Test manhattan() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 5: Test dimension() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random puzzle inputs
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 10: Test twin() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 11: Test isGoal() on file inputs
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 12: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 13: Check equals()
  *  reflexive
  *  symmetric
  *  checks that individual entries of array are equal
  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==&gt; passed

Test 14: Check that Board is immutable by changing argument 2d array after construction
 and making sure Board does not change
==&gt; passed

Test 15: Check that manhattan() and hamming() are independent of neighbors() calls by calling neighbors() 13 times before testing hamming() and manhattan()
  * (hamming) puzzle00.txt
  * (hamming) puzzle27.txt
  * (hamming) puzzle2x2-unsolvable1.txt
  * (manhattan) puzzle00.txt
  * (manhattan) puzzle27.txt
  * (manhattan) puzzle2x2-unsolvable1.txt
==&gt; passed


Total: 15/15 tests passed!

================================================================

******************************************************************************
*  **** executing with reference Board.java ****
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls each to moves(), isSolvable(), and iterator(). The results of these two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           256                  248
=&gt; passed     8           576                  568
=&gt; passed    12          1024                 1016
=&gt; passed    16          1600                 1592
=&gt; passed    20          2304                 2296
=&gt; passed    36          6400                 6392
=&gt; passed    72         23104                23096
=&gt; passed   120         61504                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 64.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 18 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 10 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; passed  puzzle20.txt   3     0.11       2148                1283                 866         
=&gt; passed  puzzle21.txt   3     0.08       4522                2695                1828         
=&gt; passed  puzzle22.txt   3     0.02       2529                1471                1059         
=&gt; passed  puzzle23.txt   3     0.03       5228                3098                2131         
=&gt; passed  puzzle24.txt   3     0.03       5660                3435                2226         
=&gt; passed  puzzle25.txt   3     0.04      13611                8092                5520         
=&gt; passed  puzzle26.txt   3     0.03      11163                6614                4550         
=&gt; passed  puzzle27.txt   3     0.03      10455                6228                4228         
=&gt; passed  puzzle28.txt   3     0.07      23556               14069                9488         
=&gt; passed  puzzle29.txt   3     0.04      20877               12485                8393         
=&gt; passed  puzzle30.txt   3     0.09      42884               25766               17119         
=&gt; passed  puzzle31.txt   3     0.10      47603               29181               18423         
=&gt; passed  puzzle34.txt   4     0.45     126725               60471               66255         
=&gt; passed  puzzle35.txt   4     1.08     269850              132058              137793         
=&gt; passed  puzzle37.txt   4     0.23      78351               37754               40598         
=&gt; passed  puzzle39.txt   4     2.08     590977              287164              303814         
=&gt; passed  puzzle41.txt   5     0.18      66623               28656               37968         
=&gt; passed  puzzle44.txt   5     3.18     500346              219372              280975         
==&gt; 18/18 tests passed

Total: 18/18 tests passed!

================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Wed-13-Mar 23:15:38</td></tr>
        <tr><td>Raw Score</td><td>72.29 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#069900">23/24 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#990000">0/18 tests passed</font>

Raw score: <font color="#3A9900">72.29%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 16K
-rw-r--r-- 1 6.5K Mar 13 17:45 Board.java
-rw-r--r-- 1 4.0K Mar 13 17:45 Solver.java
-rw-r--r-- 1 3.0K Mar 13 17:45 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
Note: Solver.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Board.java:5:25: Array brackets at illegal position.
Board.java:7:13: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Board.java:8:13: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Board.java:12:33: '{' is not preceded with whitespace.
Board.java:13:11: 'if' is not followed by whitespace.
Board.java:14:14: '=' is not preceded with whitespace.
Board.java:17:12: 'for' is not followed by whitespace.
Board.java:17:18: '=' is not preceded with whitespace.
Board.java:17:19: '=' is not followed by whitespace.
Board.java:17:23: '&lt;' is not preceded with whitespace.
Board.java:17:24: '&lt;' is not followed by whitespace.
Board.java:17:31: '{' is not preceded with whitespace.
Board.java:23:27: '{' is not preceded with whitespace.
Board.java:28:25: '{' is not preceded with whitespace.
Board.java:29:11: 'if' is not followed by whitespace.
Board.java:29:19: '!=' is not preceded with whitespace.
Board.java:29:21: '!=' is not followed by whitespace.
Board.java:33:12: 'for' is not followed by whitespace.
Board.java:33:30: '{' is not preceded with whitespace.
Board.java:34:16: 'for' is not followed by whitespace.
Board.java:34:29: '&lt;' is not preceded with whitespace.
Board.java:34:30: '&lt;' is not followed by whitespace.
Board.java:34:44: '{' is not preceded with whitespace.
Board.java:35:19: 'if' is not followed by whitespace.
Board.java:35:30: '{' is not preceded with whitespace.
Board.java:36:23: 'if' is not followed by whitespace.
Board.java:46:27: '{' is not preceded with whitespace.
Board.java:47:11: 'if' is not followed by whitespace.
Board.java:47:21: '!=' is not preceded with whitespace.
Board.java:47:23: '!=' is not followed by whitespace.
Board.java:51:12: 'for' is not followed by whitespace.
Board.java:51:25: '&lt;' is not preceded with whitespace.
Board.java:51:26: '&lt;' is not followed by whitespace.
Board.java:51:45: '{' is not preceded with whitespace.
Board.java:52:16: 'for' is not followed by whitespace.
Board.java:52:29: '&lt;' is not preceded with whitespace.
Board.java:52:30: '&lt;' is not followed by whitespace.
Board.java:52:49: '{' is not preceded with whitespace.
Board.java:53:19: 'if' is not followed by whitespace.
Board.java:53:32: '!=' is not preceded with whitespace.
Board.java:53:34: '!=' is not followed by whitespace.
Board.java:53:36: '{' is not preceded with whitespace.
Board.java:54:22: 'if' is not followed by whitespace.
Board.java:54:35: '!=' is not preceded with whitespace.
Board.java:54:37: '!=' is not followed by whitespace.
Board.java:54:43: '{' is not preceded with whitespace.
Board.java:56:67: '%' is not preceded with whitespace.
Board.java:56:68: '%' is not followed by whitespace.
Board.java:70:11: 'if' is not followed by whitespace.
Board.java:70:13: '==' is not preceded with whitespace.
Board.java:70:15: '==' is not followed by whitespace.
Board.java:70:17: '{' is not preceded with whitespace.
Board.java:71:21: '==' is not preceded with whitespace.
Board.java:71:23: '==' is not followed by whitespace.
Board.java:78:24: '{' is not preceded with whitespace.
Board.java:80:24: Array brackets at illegal position.
Board.java:81:12: 'for' is not followed by whitespace.
Board.java:81:18: '=' is not preceded with whitespace.
Board.java:81:19: '=' is not followed by whitespace.
Board.java:81:23: '&lt;' is not preceded with whitespace.
Board.java:81:24: '&lt;' is not followed by whitespace.
Board.java:81:31: '{' is not preceded with whitespace.
Board.java:88:11: 'if' is not followed by whitespace.
Board.java:88:23: ',' is not followed by whitespace.
Board.java:88:26: '{' is not preceded with whitespace.
Board.java:89:15: 'if' is not followed by whitespace.
Board.java:89:57: '{' is not preceded with whitespace.
Board.java:90:19: 'if' is not followed by whitespace.
Board.java:90:29: ',' is not followed by whitespace.
Board.java:97:15: 'if' is not followed by whitespace.
Board.java:97:57: '{' is not preceded with whitespace.
Board.java:98:19: 'if' is not followed by whitespace.
Board.java:98:29: ',' is not followed by whitespace.
Board.java:110:36: '{' is not preceded with whitespace.
Board.java:111:11: 'if' is not followed by whitespace.
Board.java:111:13: '==' is not preceded with whitespace.
Board.java:111:15: '==' is not followed by whitespace.
Board.java:112:11: 'if' is not followed by whitespace.
Board.java:112:13: '==' is not preceded with whitespace.
Board.java:112:15: '==' is not followed by whitespace.
Board.java:113:11: 'if' is not followed by whitespace.
Board.java:115:9: Conditional logic can be removed.
Board.java:115:11: 'if' is not followed by whitespace.
Board.java:122:39: '{' is not preceded with whitespace.
Board.java:128:12: 'for' is not followed by whitespace.
Board.java:128:25: '&lt;' is not preceded with whitespace.
Board.java:128:26: '&lt;' is not followed by whitespace.
Board.java:128:45: '{' is not preceded with whitespace.
Board.java:129:15: 'if' is not followed by whitespace.
Board.java:130:16: 'for' is not followed by whitespace.
Board.java:130:29: '&lt;' is not preceded with whitespace.
Board.java:130:30: '&lt;' is not followed by whitespace.
Board.java:130:49: '{' is not preceded with whitespace.
Board.java:131:19: 'if' is not followed by whitespace.
Board.java:131:32: '==' is not preceded with whitespace.
Board.java:131:34: '==' is not followed by whitespace.
Board.java:131:36: '{' is not preceded with whitespace.
Board.java:140:11: 'if' is not followed by whitespace.
Board.java:144:24: Array brackets at illegal position.
Board.java:145:11: 'if' is not followed by whitespace.
Board.java:145:25: ',' is not followed by whitespace.
Board.java:151:11: 'if' is not followed by whitespace.
Board.java:151:24: ',' is not followed by whitespace.
Board.java:157:11: 'if' is not followed by whitespace.
Board.java:157:23: ',' is not followed by whitespace.
Board.java:163:11: 'if' is not followed by whitespace.
Board.java:163:26: ',' is not followed by whitespace.
Board.java:174:29: '{' is not preceded with whitespace.
Board.java:175:12: 'if' is not followed by whitespace.
Board.java:188:43: '{' is not preceded with whitespace.
Board.java:189:11: 'if' is not followed by whitespace.
Board.java:193:41: '{' is not preceded with whitespace.
Board.java:194:11: 'if' is not followed by whitespace.
Board.java:198:42: '{' is not preceded with whitespace.
Board.java:199:11: 'if' is not followed by whitespace.
Board.java:203:44: '{' is not preceded with whitespace.
Board.java:204:11: 'if' is not followed by whitespace.
Board.java:209:71: '{' is not preceded with whitespace.
Board.java:210:12: 'if' is not followed by whitespace.
Board.java:210:78: '{' is not preceded with whitespace.
Board.java:218:36: '{' is not preceded with whitespace.
Board.java:219:11: 'if' is not followed by whitespace.
Board.java:219:13: '&lt;' is not preceded with whitespace.
Board.java:219:14: '&lt;' is not followed by whitespace.
Board.java:219:32: '&gt;=' is not preceded with whitespace.
Board.java:219:34: '&gt;=' is not followed by whitespace.
Solver.java:5:83: '{' is not preceded with whitespace.
Solver.java:6:63: '{' is not preceded with whitespace.
Solver.java:10:16: 'if' is not followed by whitespace.
Solver.java:10:19: '&gt;' is not preceded with whitespace.
Solver.java:10:20: '&gt;' is not followed by whitespace.
Solver.java:11:21: 'if' is not followed by whitespace.
Solver.java:11:24: '&lt;' is not preceded with whitespace.
Solver.java:11:25: '&lt;' is not followed by whitespace.
Solver.java:21:33: '{' is not preceded with whitespace.
Solver.java:22:11: 'if' is not followed by whitespace.
Solver.java:22:19: '==' is not preceded with whitespace.
Solver.java:22:21: '==' is not followed by whitespace.
Solver.java:33:14: 'while' is not followed by whitespace.
Solver.java:33:30: '{' is not preceded with whitespace.
Solver.java:34:16: 'for' is not followed by whitespace.
Solver.java:34:44: '{' is not preceded with whitespace.
Solver.java:35:19: 'if' is not followed by whitespace.
Solver.java:47:14: 'while' is not followed by whitespace.
Solver.java:47:28: '!=' is not preceded with whitespace.
Solver.java:47:30: '!=' is not followed by whitespace.
Solver.java:54:11: 'if' is not followed by whitespace.
Solver.java:54:39: '{' is not preceded with whitespace.
Solver.java:65:32: '{' is not preceded with whitespace.
Solver.java:70:23: '{' is not preceded with whitespace.
Solver.java:75:38: '{' is not preceded with whitespace.
Solver.java:80:43: '{' is not preceded with whitespace.
Solver.java:105:22: Variable 'board' must be private and have accessor methods.
Solver.java:106:27: Variable 'previous' must be private and have accessor methods.
Solver.java:107:20: Variable 'moves' must be private and have accessor methods.
Solver.java:109:71: '{' is not preceded with whitespace.
Solver.java:115:31: '{' is not preceded with whitespace.
Solver.java:119:32: '{' is not preceded with whitespace.
Solver.java:123:43: '{' is not preceded with whitespace.
Solver.java:127:32: '{' is not preceded with whitespace.
Solver.java:128:15: 'if' is not followed by whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 15 total tests.

Test 1: Test hamming() with file inputs to ensure that it calculates the correct distance
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 4: Test manhattan() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 5: Test dimension() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random puzzle inputs
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 10: Test twin() with random puzzle states
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 11: Test isGoal() on file inputs
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 12: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 13: Check equals()
  *  reflexive
  *  symmetric
  *  checks that individual entries of array are equal
     - probably compares arrays with reference equality
       failed on trial 1 of 100000
3
 8  6  0 
 3  7  2 
 5  4  1 


3
 8  6  0 
 3  7  2 
 5  4  1 

  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 14: Check that Board is immutable by changing argument 2d array after construction
 and making sure Board does not change
==&gt; passed

Test 15: Check that manhattan() and hamming() are independent of neighbors() calls by calling neighbors() 13 times before testing hamming() and manhattan()
  * (hamming) puzzle00.txt
  * (hamming) puzzle27.txt
  * (hamming) puzzle2x2-unsolvable1.txt
  * (manhattan) puzzle00.txt
  * (manhattan) puzzle27.txt
  * (manhattan) puzzle2x2-unsolvable1.txt
==&gt; passed


Total: 14/15 tests passed!

================================================================

******************************************************************************
*  **** executing with reference Board.java ****
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls each to moves(), isSolvable(), and iterator(). The results of these two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           256                  248
=&gt; passed     8           576                  568
=&gt; passed    12          1024                 1016
=&gt; passed    16          1600                 1592
=&gt; passed    20          2304                 2296
=&gt; passed    36          6400                 6392
=&gt; passed    72         23104                23096
=&gt; passed   120         61504                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 64.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 18 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 10 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle20.txt   3     0.37      59826  (11.4x)      21886   (7.0x)      37941  (17.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle21.txt   3     8.70    1860336  (78.6x)     680159  (48.7x)    1180178 (121.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle22.txt   3     0.47     256032  (18.9x)      93435  (11.7x)     162598  (29.2x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle23.txt   3     1.20     486477  (13.9x)     175499   (8.5x)     310979  (21.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle24.txt   3     0.63     244190   (7.4x)      93837   (4.7x)     150354  (11.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle25.txt   3     5.90    1926894  (32.3x)     708480  (20.0x)    1218415  (50.2x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle26.txt   3     1.96     905917  (17.8x)     334983  (11.1x)     570935  (27.4x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle27.txt   3     4.34     913433  (10.3x)     344867   (6.4x)     568567  (16.4x)
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2846)
	at Board.&lt;init&gt;(Board.java:18)
	at Board.neighbors(Board.java:147)
	at Solver$SearchNode.neighbors(Solver.java:124)
	at Solver.&lt;init&gt;(Solver.java:34)
	at TimeSolver.main(TimeSolver.java:214)

Total: 0/18 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================



</pre> </td></tr>
    </tbody>
</table>

            </div>
        </div>
    </div>
        
    
        <script type="text/javascript" async="" src="./Assignment Results   Algorithms, Part I_files/204.min.js"></script><script type="text/javascript" async="" src="./Assignment Results   Algorithms, Part I_files/ga.js"></script><script src="./Assignment Results   Algorithms, Part I_files/spark.js"></script>
    
    <script>
        $("[data-readme]").each(function() {
            window.ReadMe(this);
        });
    </script>

    <script src="./Assignment Results   Algorithms, Part I_files/modal_focus.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/get_query_parameters.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/signature_track.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/item_list.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/navbar.js" type="text/javascript"></script>

    
    <script type="text/javascript">
        // SET UP THE MULTITRACKER
                window.logger = window.Log({level:"error"});
                window.multitracker = window.MultiTracker({logger:window.logger});
        window.multitracker.register('204', window._204 = window._204 || []);
        window.multitracker.register('ga', window._gaq = window._gaq || [], 'google');

        // SET UP GA and 204
        window._gaq.push(['_setAccount', 'UA-28377374-1']);
        window._gaq.push(['_setDomainName', 'coursera.org']);
        window._gaq.push(['_setAllowLinker', true]);  
        window._gaq.push(['_trackPageview']);
        
        window._204.push({key:"pageview", val:{}});

        // override our multitracker queues with the ga queue when it is ready
        (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        
          ga.onload = ga.onreadystatechange = function() {
              ga.onreadystatechange = ga.onload = null;
              window.multitracker.get('ga').queue = window._gaq;
          };
        })();

        // override our multitracker queues with the 204 queue when it is ready
        (function() {
          var a = document.createElement('script'); a.type = 'text/javascript'; a.async = true;
          a.src = 'https://eventing.coursera.org/204.min.js?client=spark&user=1484404';
          var s = document.getElementsByTagName('script')[0];
          s.parentNode.insertBefore(a, s);
          a.onload = a.onreadystatechange = function() {
              a.onreadystatechange = a.onload = null;
              window.multitracker.get('204').queue = window._204;
          };
        })();
    </script>

    <script>
      // Set up shared AB testing object
      (function() {
          var userId = $('[data-user-id]:first').attr('data-user-id');

          // Adapted from app/www/static/js/models/user.js
          if (userId == 0) {
              userId = window.Cookie.get('ab-session-id');
              if (!userId) {
                  userId =
                      (Math.random() * 10000000000).toFixed() + '-' +
                      (new Date()).getTime();
                  window.Cookie.set("ab-session-id", userId, { expires: 36500 });
              }
          }

                        window.ab = window.AB(userId, {debug:false, tracker:window.multitracker, logger:window.logger});
          
      })();
      // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();
    </script>

    <script type="text/x-mathjax-config">
MathJax.Hub.Config({
  config: ["MMLorHTML.js"],
  
  styleSheets: [],
  styles: {},

  jax: ["input/TeX"],
  
  extensions: ["tex2jax.js"],

  preJax: null,
  postJax: null,

  preRemoveClass: "MathJax_Preview",

  showProcessingMessages: true,

  messageStyle: "none",
  
  displayAlign: "center",
  displayIndent: "0em",
  
  delayStartupUntil: "none",

  skipStartupTypeset: false,
  
  elements: [],
  
  tex2jax: {
	    inlineMath: [
	                 ['$$','$$'],      // uncomment this for standard TeX math delimiters
	                 ['\\(','\\)']
	                 ],

	                 displayMath: [
	                 ['\\[','\\]']
	                 ],

    skipTags: ["script","noscript","style","textarea","pre","code"],
    ignoreClass: "tex2jax_ignore",
    processClass: "tex2jax_process",
    processEscapes: false,
    processEnvironments: true,
    preview: "TeX"
    
  },
  
  mml2jax: {
    preview: "alttext"
    
  },
  
  jsMath2jax: {
    preview: "TeX"
    
  },

  TeX: {
    TagSide: "right",
    TagIndent: ".8em",
    MultLineWidth: "85%",
    Macros: {},

    extensions: ["AMSmath.js", "AMSsymbols.js"]
    
  },

  //============================================================================
  //
  //  These parameters control the MathML inupt jax.
  //
  MathML: {
    //
    //  This specifies whether to use TeX spacing or MathML spacing when the
    //  HTML-CSS output jax is used.
    //
    useMathMLspacing: false
  },
  
  //============================================================================
  //
  //  These parameters control the HTML-CSS output jax.
  //
  "HTML-CSS": {
    
    scale: 100,
    
    availableFonts: ["STIX","TeX"],
    
    preferredFont: "TeX",
    
    webFont: "TeX",
    
    imageFont: "TeX",
    
    undefinedFamily: "STIXGeneral,'Arial Unicode MS',serif",
      
    showMathMenu: true,

    styles: {},
    
    tooltip: {
      delayPost: 600,          // milliseconds delay before tooltip is posted after mouseover
      delayClear: 600,         // milliseconds delay before tooltip is cleared after mouseout
      offsetX: 10, offsetY: 5  // pixels to offset tooltip from mouse position
    }
  },
  
  //============================================================================
  //
  //  These parameters control the NativeMML output jax.
  //
  NativeMML: {

    scale: 100,

    showMathMenu: true,
    showMathMenuMSIE: true,

    styles: {}
  },
  
  MathMenu: {
    delay: 400,
    
    helpURL: "http://www.mathjax.org/help/user/",

    showRenderer: true,
    showFontMenu: false,
    showContext:  false,

    windowSettings: {
      status: "no", toolbar: "no", locationbar: "no", menubar: "no",
      directories: "no", personalbar: "no", resizable: "yes", scrollbars: "yes",
      width: 100, height: 50
    },
    
    styles: {}
    
  },

  MMLorHTML: {
    prefer: {
      MSIE:    "MML",
      Firefox: "MML",
      Opera:   "HTML",
      other:   "HTML"
    }
  }
});
</script>
<script type="text/javascript">
(function () {

  function loadMathJax() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://duqnjvq4jwr55.cloudfront.net/2.1/MathJax.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  window.loadOrRefreshMathJax = function(domId) {
    if (window.MathJax) {
      if (domId) {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, domId]);
      } else {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    } else {
      loadMathJax();
    }
  }
})();
</script>
    
    <script type="text/javascript">
        var site_base_url = "https:\/\/www.coursera.org\/";
        var site_static_asset_url = "https:\/\/dt5zaw6a98blc.cloudfront.net\/site-static\/";
        var spark_class_short_name = "algs4partI";
        var spark_class_id = 970302;
        var spark_class_url = "\/algs4partI-002";
        var spark_signature_url = "https:\/\/class.coursera.org\/algs4partI-002\/signature\/";
        
        var course_strings_name = "Algorithms, Part I";
        var student_full_name = "Vishal Juneja";
    </script>

    




</body></html>