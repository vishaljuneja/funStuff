<!DOCTYPE html>
<!-- saved from url=(0069)https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058 -->
<html lang="en-US" class="supports-svg"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script type="text/javascript" async="" src="./Timing_files/MathJax.js"></script>
<meta charset="utf-8">
<title>Timing</title>
<link rel="stylesheet" href="https://dt5zaw6a98blc.cloudfront.net/site-static/8be561f5d56b20136c99ea175f81d0a2cc74b164/css/spark.main.css">
<link rel="stylesheet" href="https://www.coursera.org/maestro/api/course/970302/course.css">
<link rel="stylesheet" href="https://dt5zaw6a98blc.cloudfront.net/site-static/8be561f5d56b20136c99ea175f81d0a2cc74b164/css/spark.forum.hg.css">
<link rel="icon" href="https://spark-public.s3.amazonaws.com/algs4partI/static/images/favicon.ico">
<script type="text/javascript" async="" src="./Timing_files/ga.js"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="pages/forum/widgets" src="./Timing_files/widgets.js"></script><meta property="og:title" content="Timing"><meta property="og:url" content="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058"><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Hover_Arrow {position: absolute; width: 15px; height: 11px; cursor: pointer}
</style><style type="text/css">.MathJax_Display {text-align: center; margin: 1em 0em; position: relative; display: block; width: 100%}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: 2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true'); padding: 3px 4px; position: absolute; left: 0; top: 0; width: auto; height: auto; display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; border: 0; padding: 0; margin: 0}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; max-width: none; max-height: none; vertical-align: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0 !important; padding: 0 !important; margin: 0 !important; vertical-align: 0 !important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; margin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap ! important}
.MathJax img {display: inline ! important; float: none ! important}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height: 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block; overflow: hidden; width: 1px; height: 60ex}
.MathJax .MathJax_EmBox {display: block; overflow: hidden; width: 1px; height: 60em}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filter: alpha(opacity=0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transparent}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Main; src: url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff') format('woff'), url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf') format('opentype')}
@font-face {font-family: MathJax_Main; src: url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff') format('woff'), url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf') format('opentype'); font-weight: bold}
@font-face {font-family: MathJax_Main; src: url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Italic.woff') format('woff'), url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf') format('opentype'); font-style: italic}
@font-face {font-family: MathJax_Math; src: url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff') format('woff'), url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf') format('opentype'); font-style: italic}
@font-face {font-family: MathJax_Caligraphic; src: url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/woff/MathJax_Caligraphic-Regular.woff') format('woff'), url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regular.otf') format('opentype')}
@font-face {font-family: MathJax_Size1; src: url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff') format('woff'), url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf') format('opentype')}
@font-face {font-family: MathJax_Size2; src: url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.woff') format('woff'), url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf') format('opentype')}
@font-face {font-family: MathJax_Size3; src: url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.woff') format('woff'), url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf') format('opentype')}
@font-face {font-family: MathJax_Size4; src: url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.woff') format('woff'), url('https://d2265nx4vomwra.cloudfront.net/2.1/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf') format('opentype')}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuTitle {background-color: #CCCCCC; margin: -1px -1px 1px -1px; text-align: center; font-style: italic; font-size: 80%; color: #444444; padding: 2px 0; overflow: hidden}
.MathJax_MenuArrow {position: absolute; right: .5em; color: #666666}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_Menu_Close {position: absolute; width: 31px; height: 31px; top: -15px; left: -15px}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style></head>

<body class="wysihtml5-supported"><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div id="MathJax_Message" style="display: none;"></div>
    <a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#course-page-content" class="hidden">Skip Navigation</a>
    <div class="hidden">
        This page features MathJax technology to render mathematical formulae.
        If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.
    </div>

    <h1 class="hidden">Algorithms, Part I</h1>

    

<div class="course-topbar container-fluid" role="banner">

    <div class="row-fluid">
        
        <div class="span3">
          <a href="https://www.coursera.org/" class="course-topbar-logo" data-if-linkable="add-referrer"></a>
        </div>

        <div class="course-topbar-nav-container span9" style="float:right;">
            <h2 class="hidden">Top Navigation Bar</h2>

            <ul class="course-topbar-nav-list">
                <li class="course-topbar-nav-list-item">
                  <a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a>
                </li>

                                
                <li class="course-topbar-nav-list-item" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="" style="cursor:pointer;" data-popup-direction="se">
                                        <a data-user-id="1484404">  
                        Vishal Juneja 
                        <i class="icon-caret-down"></i>
                    </a>
                </li>
               
                            </ul>
        </div>
    </div>

    <div id="course-topbar-aboutus" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/jobs" target="_new" data-if-linkable="add-referrer">Jobs</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/team" target="_new" data-if-linkable="add-referrer">Team</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/contact" target="_new" data-if-linkable="add-referrer">Contact Us</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/" target="_new" data-if-linkable="add-referrer">About Us</a>
    </div>

    <div id="course-topbar-my" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/" target="_new">Courses</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/profile" target="_new">Profile</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/records" target="_new">Course Records</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/settings" target="_new">Settings</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/class/preferences">Course Preferences</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/auth/logout">Logout</a>
    </div>

</div>








<style type="text/css">
 


</style>
<div class="course-topbanner">
  <div class="course-topbanner-university-logo">
    <a href="https://www.coursera.org/princeton" class="coursera-university-color" target="_blank" data-if-linkable="add-referrer">
      <img src="./Timing_files/university_logo" alt="University logo">
    </a>
  </div>

  
  <h1 class="course-topbanner-header">
      <a class="course-topbanner-name coursera-university-color" href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock">
        Algorithms, Part I      </a>
      <br>
      <span class="course-topbanner-instructor" style="">
        by Kevin  Wayne, Robert  Sedgewick      </span>
  </h1>
</div>
    
        <div class="container-fluid" style="position:relative;">
        <div class="row-fluid">
            <div id="course-page-sidebar" role="navigation">
                <div class="course-navbar-container">
	<a href="https://class.coursera.org/algs4partI-002/class/index">
	<img src="./Timing_files/logo" style="width: 210px;height: 112px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.35);">
	</a>
<h2 class="hidden">Side Navigation Bar</h2>
<ul class="course-navbar-list">
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Home							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Syllabus							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=schedule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Schedule							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Lectures							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Exercises							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Programming Assignments							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Job Interview Questions							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item active">
								<a href="https://class.coursera.org/algs4partI-002/forum/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Discussion Forums							<span class="course-navbar-selected-marker">(selected)</span></a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=errata" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Errata							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Surveys							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="http://algs4.cs.princeton.edu/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Booksite				<span class="icon-share"></span>			</a>
						</li>
	
	
		
		<li class="course-navbar-item">
		<a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">
			Join a Meetup
			<span class="icon-share"></span>
		</a>
	</li>
	
    </ul>

</div>
            </div>
            <div id="course-page-content" role="main">
                                <a data-coursera-admin-helpwidget-link="" rel="help" href="http://support.coursera.org/customer/portal/articles/1012101-forum-moderation-and-student-issues" title="Forum moderation and student issues" style="display:none;">Learn more</a><a data-coursera-admin-helpwidget-link="" rel="discuss" href="https://class.coursera.org/mooc/forum/tag?name=Forum&forum_id=7" style="display:none;">Discuss</a>

<div data-coursera-forum-thread-widget="" data-thread-mode="page" data-thread-id="1058" data-course-id="970302"><div><div class="course-forum-thread-crumbs"><ul class="course-forum-breadcrumb"><li><a href="https://class.coursera.org/algs4partI-002/forum/list">Forums</a><span class="divider"> / </span></li><li><a href="https://class.coursera.org/algs4partI-002/forum/list?forum_id=3">Programming Assignments</a><span class="divider"> / </span></li><li><a href="https://class.coursera.org/algs4partI-002/forum/list?forum_id=17">Programming Assignment 5 (Kd-Trees)</a></li></ul></div><div class="course-forum-thread-header-wrapper"><div><div class="course-forum-thread-title"><h2>Timing</h2></div><div class="course-forum-thread-header"><div class="course-forum-thread-controls"><span title="This thread was marked as resolved." class="course-forum-thread-indicator course-forum-indicator-good"><i class="icon-check"></i> Resolved</span><a title="Thread controls" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-thread-controls-popup1058" data-popup="#course-forum-thread-controls-popup1058" data-popup-direction="se" class="course-forum-thread-controls-toggle"><i class="icon-cog"><span class="hidden">Thread controls</span></i></a><div id="course-forum-thread-controls-popup1058" class="course-forum-thread-controls-popup hide"><a href="javascript:void(0)" data-property="unresolved" data-value="1" class="course-forum-thread-action-link">Un-resolve</a></div></div><div style="margin-right:10px; display:inline-block;"><i class="icon-envelope"></i> You are subscribed.  <a href="javascript:void(0);" class="course-forum-thread-unsubscribe-link">Unsubscribe</a></div></div></div></div><div class="course-forum-thread-sort"><ul class="nav nav-pills pull-right"><li><span style="padding: 8px; display: inline-block;">Sort replies by:</span></li><li data-sort-name="oldest" class="active"><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058&sort=oldest">Oldest first</a></li><li data-sort-name="newest"><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058&sort=newest">Newest first</a></li><li data-sort-name="popular"><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058&sort=popular">Most popular</a></li></ul></div><div class="course-forum-thread-tags"><div><link href="./Timing_files/select2.css" rel="stylesheet" type="text/css"><h5 style="display:inline-block;"> <span class="hidden">Tags </span><i class="icon-tags"></i>&nbsp;</h5><span>No tags yet.</span>&nbsp;<a href="javascript:void(0)" class="course-forum-thread-tags-link">+ Add Tag</a><form class="course-forum-thread-tags-form form-inline hide"><label>Please try to use existing tags.   &nbsp;</label><input type="text" name="tags" style="margin-left:10px" class="input-medium"><button type="button" style="margin-left:10px" disabled="disabled" class="btn">Save</button><a href="javascript:void(0)" role="button" style="margin-left:10px">Cancel</a></form></div></div><div class="course-forum-thread-area-container"><div class="course-forum-top-scroll-indicator" style="display: none;">⬆ scroll up for more ⬆</div><ul style="clear: right;" class="course-forum-thread-posts-container"><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-3893" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=69425">Changgeng Li</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-3893" name="post-3893" style="vertical-align:middle"> <time datetime="1362454751" title="Tuesday, March 5th 2013, 9:09 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Computing memory of KdTree</p>
<pre><code>*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          136                160
=&gt; passed        2          240                288
=&gt; passed        5          552                672
=&gt; passed       10         1072               1312
=&gt; passed       25         2632               3232
=&gt; passed      100        10432              12832
=&gt; passed      400        41632              51232
=&gt; passed      800        83232             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 104.00 N + 32.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     930233         
=&gt; passed   320000     744186         
=&gt; passed   640000     599813         
=&gt; passed  1280000     546775         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     852273         
=&gt; passed    20000     824176         
=&gt; passed    40000     717703         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2454         
=&gt; passed    20000       1175         
=&gt; passed    40000        344         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2844         
=&gt; passed    20000       1352         
=&gt; passed    40000        362         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     521173               0.0              33.2              31.7              21.6         
=&gt; passed   320000     728929               0.0              33.8              32.3              22.0         
=&gt; passed   640000     370800               0.0              36.1              34.6              23.5         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     765306              18.5              17.4              17.9         
=&gt; passed    20000     785340              18.5              17.6              18.1         
=&gt; passed    40000     590551              21.3              20.3              20.8         
=&gt; passed    80000     526316              22.1              21.1              21.6         
=&gt; passed   160000     388601              24.5              23.5              24.0         
=&gt; passed   320000     348028              25.5              24.5              25.0         
=&gt; passed   640000     376884              28.0              27.0              27.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     341686              50.8              31.5              52.1              16.7         
=&gt; passed    20000     361446              52.9              32.4              53.5              14.6         
=&gt; passed    40000     259965              55.2              33.5              53.9              13.5         
=&gt; passed    80000     214592              62.1              37.7              61.9              16.2         
=&gt; passed   160000     168729              63.6              38.3              62.0              14.6         
=&gt; passed   320000     135870              69.3              41.8              67.3              14.2         
=&gt; passed   640000     128425              72.8              43.6              70.3              15.0         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   203528                  51.8                   80.6                   280.3             185.3         
=&gt; passed    20000   179426                  60.5                   94.0                   328.1             215.2         
=&gt; passed    40000   133809                  69.7                  108.3                   377.9             254.0         
=&gt; passed    80000    89233                  85.6                  132.7                   463.1             320.5         
=&gt; passed   160000    53476                 135.2                  207.7                   729.0             461.3         
=&gt; passed   320000    43554                 114.9                  179.1                   624.6             421.2         
=&gt; passed   640000    40366                 126.7                  196.7                   687.1             482.1         
==&gt; 7/7 tests passed

Total: 24/24 tests passed!

================================================================</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-3893" data-popup="#course-forum-post-vote-hint-3893" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-3893" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-3893" data-popup="#course-forum-post-flag-hint-3893" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-3893" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-3894" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=2509576"><img src="./Timing_files/ava.jpg">Dmitry Sherstoboev</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-3894" name="post-3894" style="vertical-align:middle"> <time datetime="1362456150" title="Tuesday, March 5th 2013, 9:32 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><pre><code>Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     423280               2.0              22.6              21.6              21.6         
=&gt; passed   320000     350493               2.0              23.0              22.0              22.0         
=&gt; passed   640000     353591               2.0              24.5              23.5              23.5         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     750000              18.5              17.4              17.9         
=&gt; passed    20000     707547              18.5              17.6              18.1         
=&gt; passed    40000     561798              21.3              20.3              20.8         
=&gt; passed    80000     439883              22.1              21.1              21.6         
=&gt; passed   160000     431034              24.5              23.5              24.0         
=&gt; passed   320000     308008              25.5              24.5              25.0         
=&gt; passed   640000     358852              28.0              27.0              27.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     189633              31.5              31.5              94.6              61.4         
=&gt; passed    20000     233281              32.4              32.4              98.5              59.7         
=&gt; passed    40000     216138              33.5              33.5             101.2              59.6         
=&gt; passed    80000     171429              37.7              37.7             114.4              68.7         
=&gt; passed   160000     134048              38.3              38.3             116.1              67.6         
=&gt; passed   320000     139405              41.8              41.8             127.4              70.7         
=&gt; passed   640000     102389              43.6              43.6             132.7              74.6         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   301811                  70.0                   43.8                   139.7             137.9         
=&gt; passed    20000   233281                  77.1                   48.5                   154.4             151.5         
=&gt; passed    40000   167973                  79.1                   49.7                   158.5             155.8         
=&gt; passed    80000   152594                  85.6                   54.0                   171.3             168.7         
=&gt; passed   160000   145773                  96.8                   61.1                   193.1             190.6         
=&gt; passed   320000   115296                 100.0                   63.3                   200.2             198.1         
=&gt; passed   640000    87566                 102.0                   64.5                   204.6             201.5         
==&gt; 7/7 tests passed

Total: 24/24 tests passed!</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-3894" data-popup="#course-forum-post-vote-hint-3894" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-3894" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-3894" data-popup="#course-forum-post-flag-hint-3894" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-3894" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-3897" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=143341">Xinfei WU</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-3897" name="post-3897" style="vertical-align:middle"> <time datetime="1362459479" title="Tuesday, March 5th 2013, 10:27 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><pre><code>Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&amp;gt; passed        1          120                160
=&amp;gt; passed        2          208                288
=&amp;gt; passed        5          472                672
=&amp;gt; passed       10          912               1312
=&amp;gt; passed       25         2232               3232
=&amp;gt; passed      100         8832              12832
=&amp;gt; passed      400        35232              51232
=&amp;gt; passed      800        70432             102432
==&amp;gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 88.00 N + 32.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&amp;gt; passed   160000     888889         
=&amp;gt; passed   320000     588235         
=&amp;gt; passed   640000     570919         
=&amp;gt; passed  1280000     449280         
==&amp;gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&amp;gt; passed    10000     852273         
=&amp;gt; passed    20000     833333         
=&amp;gt; passed    40000     742574         
==&amp;gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&amp;gt; passed    10000       2427         
=&amp;gt; passed    20000        941         
=&amp;gt; passed    40000        224         
==&amp;gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&amp;gt; passed    10000       2708         
=&amp;gt; passed    20000       1310         
=&amp;gt; passed    40000        354         
==&amp;gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&amp;gt; passed   160000     637450               0.0              22.1              21.1              10.7         
=&amp;gt; passed   320000     727273               0.0              22.5              21.5              11.3         
=&amp;gt; passed   640000     480841               0.0              24.0              23.0              12.6         
==&amp;gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&amp;gt; passed    10000     691244              18.5              17.4               8.9         
=&amp;gt; passed    20000     724638              18.5              17.6               9.3         
=&amp;gt; passed    40000     641026              21.3              20.3              10.1         
=&amp;gt; passed    80000     524476              22.1              21.1              11.4         
=&amp;gt; passed   160000     402145              24.5              23.5              12.5         
=&amp;gt; passed   320000     468750              25.5              24.5              12.5         
=&amp;gt; passed   640000     340136              28.0              27.0              13.0         
==&amp;gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&amp;gt; passed    10000     203252              38.9               0.0              61.6              64.6         
=&amp;gt; passed    20000     224888              39.6               0.0              64.7              64.1         
=&amp;gt; passed    40000     261324              40.7               0.0              67.0              65.7         
=&amp;gt; passed    80000     135379              45.8               0.0              74.8              74.4         
=&amp;gt; passed   160000     142721              46.1               0.0              76.0              75.1         
=&amp;gt; passed   320000     213675              50.5               0.0              84.9              80.2         
=&amp;gt; passed   640000      95724              52.3               0.0              86.7              84.0         
==&amp;gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&amp;gt; passed    10000   279851                  26.1                   52.2                   168.0             166.2         
=&amp;gt; passed    20000   289017                  28.7                   57.4                   184.9             182.0         
=&amp;gt; passed    40000   202156                  29.3                   58.7                   188.8             186.1         
=&amp;gt; passed    80000   150754                  31.7                   63.3                   203.4             200.9         
=&amp;gt; passed   160000   192308                  35.7                   71.4                   228.9             226.6         
=&amp;gt; passed   320000   160772                  36.7                   73.4                   235.2             233.2         
=&amp;gt; passed   640000   147348                  37.5                   75.0                   241.0             238.1         
==&amp;gt; 7/7 tests passed

Total: 24/24 tests passed!

================================================================</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-3897" data-popup="#course-forum-post-vote-hint-3897" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-active"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count course-forum-votes-positive">3</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-3897" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-3897" data-popup="#course-forum-post-flag-hint-3897" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-3897" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-3919" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=1654559">Milos Balac</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-3919" name="post-3919" style="vertical-align:middle"> <time datetime="1362481025" title="Tuesday, March 5th 2013, 4:27 pm +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><pre><code>Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          128                160
=&gt; passed        2          216                288
=&gt; passed        5          480                672
=&gt; passed       10          920               1312
=&gt; passed       25         2240               3232
=&gt; passed      100         8840              12832
=&gt; passed      400        35240              51232
=&gt; passed      800        70440             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 88.00 N + 40.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     557491         
=&gt; passed   320000     480480         
=&gt; passed   640000     384384         
=&gt; passed  1280000     388940         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     847458         
=&gt; passed    20000     655022         
=&gt; passed    40000     510204         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2132         
=&gt; passed    20000        639         
=&gt; passed    40000        265         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2655         
=&gt; passed    20000       1039         
=&gt; passed    40000        491         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     606061               0.0              65.4              21.1               0.0         
=&gt; passed   320000     682303               0.0              66.6              21.5               0.0         
=&gt; passed   640000     498831               0.0              71.1              23.0               0.0         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     757576              18.5              17.4              17.9         
=&gt; passed    20000     761421              18.5              17.6              18.1         
=&gt; passed    40000     704225              21.3              20.3              20.8         
=&gt; passed    80000     581395              22.1              21.1              21.6         
=&gt; passed   160000     443787              24.5              23.5              24.0         
=&gt; passed   320000     421348              25.5              24.5              25.0         
=&gt; passed   640000     294695              28.0              27.0              27.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     262238               0.0              31.5              83.5              48.4         
=&gt; passed    20000     375940               0.0              32.4              86.1              46.9         
=&gt; passed    40000     317797               0.0              33.5              87.9              46.6         
=&gt; passed    80000     234009               0.0              37.7              99.9              53.7         
=&gt; passed   160000     189633               0.0              38.3             100.7              52.5         
=&gt; passed   320000     153374               0.0              41.8             109.9              55.1         
=&gt; passed   640000     143816               0.0              43.6             114.6              57.8         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   278810                  76.3                   26.1                   113.3             111.6         
=&gt; passed    20000   208914                  84.1                   28.7                   124.6             122.2         
=&gt; passed    40000   239617                  86.0                   29.3                   127.3             125.1         
=&gt; passed    80000   162162                  93.0                   31.7                   136.9             135.1         
=&gt; passed   160000   217707                 105.1                   35.7                   153.9             152.3         
=&gt; passed   320000   203804                 108.1                   36.7                   158.3             157.1         
=&gt; passed   640000   138249                 110.5                   37.5                   162.4             160.2         
==&gt; 7/7 tests passed</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-3919" data-popup="#course-forum-post-vote-hint-3919" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-3919" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-3919" data-popup="#course-forum-post-flag-hint-3919" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-3919" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-3929" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=538892">Wan Kong Yew</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-3929" name="post-3929" style="vertical-align:middle"> <time datetime="1362495825" title="Tuesday, March 5th 2013, 8:33 pm +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Mine. Currently not 100% because the autograder thinks I make too few calls to x() and y() but I'm pretty sure I'm not doing any cheating. Anyway it got 100% last year.</p>
<pre><code>    Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&amp;gt; passed        1          104                160
=&amp;gt; passed        2          176                288
=&amp;gt; passed        5          392                672
=&amp;gt; passed       10          752               1312
=&amp;gt; passed       25         1832               3232
=&amp;gt; passed      100         7232              12832
=&amp;gt; passed      400        28832              51232
=&amp;gt; passed      800        57632             102432
==&amp;gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 72.00 N + 32.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&amp;gt; passed   160000     808081         
=&amp;gt; passed   320000     649087         
=&amp;gt; passed   640000     630542         
=&amp;gt; passed  1280000     550064         
==&amp;gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&amp;gt; passed    10000     847458         
=&amp;gt; passed    20000     819672         
=&amp;gt; passed    40000     742574         
==&amp;gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&amp;gt; passed    10000       2444         
=&amp;gt; passed    20000       1152         
=&amp;gt; passed    40000        384         
==&amp;gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&amp;gt; passed    10000       2785         
=&amp;gt; passed    20000       1317         
=&amp;gt; passed    40000        458         
==&amp;gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&amp;gt; passed   160000     547945               0.0              22.1              21.1              21.6         
=&amp;gt; passed   320000     694143               0.0              22.5              21.5              22.0         
=&amp;gt; passed   640000     536013               0.0              24.0              23.0              23.5         
==&amp;gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&amp;gt; passed    10000     721154              18.5              17.4              17.9         
=&amp;gt; passed    20000     815217              18.5              17.6              18.1         
=&amp;gt; passed    40000     731707              21.3              20.3              20.8         
=&amp;gt; passed    80000     652174              22.1              21.1              21.6         
=&amp;gt; passed   160000     476190              24.5              23.5              24.0         
=&amp;gt; passed   320000     382653              25.5              24.5              25.0         
=&amp;gt; passed   640000     313808              28.0              27.0              27.5         
==&amp;gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&amp;gt; passed    10000     290698               0.0              31.5              77.1              41.6         
=&amp;gt; passed    20000     336323               0.0              32.4              79.8              40.2         
=&amp;gt; passed    40000     295858               0.0              33.5              81.5              40.1         
=&amp;gt; passed    80000     238095               0.0              37.7              92.8              46.4         
=&amp;gt; passed   160000     191327               0.0              38.3              93.8              45.5         
=&amp;gt; passed   320000     142450               0.0              41.8             102.1              47.6         
=&amp;gt; passed   640000     154162               0.0              43.6             106.9              50.2         
==&amp;gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&amp;gt; FAILED    10000   449102                  44.3                    0.0                    42.8   (0.9x)     40.8   (0.8x)
=&amp;gt; FAILED    20000   442478                  48.7                    0.0                    47.2   (0.9x)     45.7   (0.9x)
=&amp;gt; FAILED    40000   403226                  50.2                    0.0                    48.4              47.0   (0.9x)
=&amp;gt; passed    80000   301811                  54.1                    0.0                    52.8              51.2         
=&amp;gt; passed   160000   204638                  61.1                    0.0                    59.7              58.1         
=&amp;gt; passed   320000   176887                  63.3                    0.0                    62.0              60.4         
=&amp;gt; passed   640000   164294                  64.4                    0.0                    63.2              61.6         
==&amp;gt; 4/7 tests passed

Total: 21/24 tests passed!</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-3929" data-popup="#course-forum-post-vote-hint-3929" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-active"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count course-forum-votes-positive">1</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-3929" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-3929" data-popup="#course-forum-post-flag-hint-3929" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-3929" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""><li><small class="course-forum-delete-indicator"><span class="icon-trash"></span>A post was deleted</small></li><li><div data-permalink="comment-2223" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"><a title="Controls" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-controls-2223" data-popup="#course-forum-post-controls-2223" data-popup-direction="se" class="course-forum-post-controls-toggle"><i class="icon-cog"><span class="hidden">Controls</span></i></a><div id="course-forum-post-controls-2223" class="course-forum-post-controls-popup hide"><!-- If you have editing rights, you can edit or delete--><a href="javascript:void(0)" class="course-forum-post-edit-link">Edit</a><a href="javascript:void(0)" data-property="deleted" data-value="1" class="course-forum-post-action-link">Delete</a><!-- Only forum moderators --></div></div><h5 class="course-forum-post-byline"><span>Anonymous</span><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#comment-2223" name="comment-2223" style="vertical-align:middle"> <time datetime="1364746338" title="Sunday, March 31st 2013, 9:42 pm +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text">For nearest():<br><br><pre><code>640000   164294</code></pre><br>Best I have seen so far. Mind sharing your tricks? ;) and if its not too late to ask.<br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-2223" data-popup="#course-forum-post-vote-hint-2223" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive course-forum-post-vote-disabled"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive course-forum-post-vote-disabled"><i class="icon-arrow-down"></i></div></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-2223" data-popup="#course-forum-post-flag-hint-2223" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-2223" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this comment is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4022" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=2546054">Dusko Simidzija</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4022" name="post-4022" style="vertical-align:middle"> <time datetime="1362611950" title="Thursday, March 7th 2013, 4:49 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Finally!</p>
<p>I missed a "small" detail in the pruning rule for the nearest neighbour search, and now I finally managed <em>not</em> to miss it. It's amazing how much is algorithm performance improved by details (or, in my case, <em>details</em>).</p>
<pre><code>Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          160                160
=&gt; passed        2          288                288
=&gt; passed        5          672                672
=&gt; passed       10         1312               1312
=&gt; passed       25         3232               3232
=&gt; passed      100        12832              12832
=&gt; passed      400        51232              51232
=&gt; passed      800       102432             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     788177         
=&gt; passed   320000     634921         
=&gt; passed   640000     644512         
=&gt; passed  1280000     463432         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     815217         
=&gt; passed    20000     793651         
=&gt; passed    40000     669643         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2313         
=&gt; passed    20000       1103         
=&gt; passed    40000        384         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2772         
=&gt; passed    20000        883         
=&gt; passed    40000        227         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     490798               1.0              43.8              43.8               0.0         
=&gt; passed   320000     318408               1.0              44.6              44.6               0.0         
=&gt; passed   640000     192077               1.0              47.6              47.6               0.0         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     524476              35.9              35.9               0.0         
=&gt; passed    20000     470219              36.1              36.1               0.0         
=&gt; passed    40000     434783              41.5              41.5               0.0         
=&gt; passed    80000     309278              43.2              43.2               0.0         
=&gt; passed   160000     266904              47.9              47.9               0.0         
=&gt; passed   320000     216138              50.1              50.1               0.0         
=&gt; passed   640000     279851              55.0              55.0               0.0         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     315789              49.8              31.5              52.1              16.7         
=&gt; passed    20000     275735              51.9              32.4              53.5              14.6         
=&gt; passed    40000     120192              54.2              33.5              53.9              13.5         
=&gt; passed    80000     123052              61.1              37.7              61.9              16.2         
=&gt; passed   160000      93110              62.6              38.3              62.0              14.6         
=&gt; passed   320000      95238              68.3              41.8              67.3              14.2         
=&gt; passed   640000      77280              71.8              43.6              70.3              15.0         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   215517                  39.9                   42.8                    93.1              93.3         
=&gt; passed    20000   170455                  43.5                   47.5                   103.7             102.6         
=&gt; passed    40000   149701                  45.1                   48.7                   106.4             105.4         
=&gt; passed    80000    91019                  49.1                   53.0                   115.5             114.5         
=&gt; passed   160000   109091                  55.3                   60.1                   130.6             129.8         
=&gt; passed   320000   104969                  56.8                   62.3                   135.5             134.9         
=&gt; passed   640000    98296                  58.2                   63.5                   138.8             137.3         
==&gt; 7/7 tests passed

Total: 24/24 tests passed!</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4022" data-popup="#course-forum-post-vote-hint-4022" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4022" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4022" data-popup="#course-forum-post-flag-hint-4022" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4022" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4223" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=2548061"><img src="./Timing_files/IMG_2464.jpg">Dmytro Nochevnov</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4223" name="post-4223" style="vertical-align:middle"> <time datetime="1362868389" title="Sunday, March 10th 2013, 4:03 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><pre><code>Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          432                160
=&gt; passed        2          560                288
=&gt; passed        5          944                672
=&gt; passed       10         1584               1312
=&gt; passed       25         3888               3232
=&gt; passed      100        15024              12832
=&gt; passed      400        59568              51232
=&gt; passed      800       118960             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 144.78 N + 154.71  (R^2 = 0.999)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     320000         
=&gt; passed   320000     327869         
=&gt; passed   640000     276100         
=&gt; passed  1280000     299485         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     422535         
=&gt; passed    20000     508475         
=&gt; passed    40000     357995         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       1685         
=&gt; passed    20000        625         
=&gt; passed    40000        131         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2081         
=&gt; passed    20000        523         
=&gt; passed    40000        121         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     143756               0.0              25.1              24.1               0.1         
=&gt; passed   320000     180383               0.0              25.5              24.5               0.2         
=&gt; passed   640000     168156               0.0              27.0              26.0               0.4         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     828729               1.0               1.0               0.0         
=&gt; passed    20000     627615               1.0               1.0               0.0         
=&gt; passed    40000     366748               1.0               1.0               0.0         
=&gt; passed    80000     360577               1.0               1.0               0.1         
=&gt; passed   160000     551471               1.0               1.0               0.1         
=&gt; passed   320000     757576               1.0               1.0               0.2         
=&gt; passed   640000     785340               1.0               1.0               0.4         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000      97466              31.5              31.5              94.6              61.4         
=&gt; passed    20000     148221              32.4              32.4              98.5              59.7         
=&gt; passed    40000     132861              33.5              33.5             101.2              59.6         
=&gt; passed    80000     101351              37.7              37.7             114.4              68.7         
=&gt; passed   160000      91743              38.3              38.3             116.1              67.6         
=&gt; passed   320000      79365              41.8              41.8             127.4              70.7         
=&gt; passed   640000      88080              43.6              43.6             132.7              74.6         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   137741                  53.9                    0.0                    53.4              52.4         
=&gt; passed    20000   178571                  59.1                    0.0                    58.5              57.7         
=&gt; passed    40000    90525                  60.4                    0.0                    59.8              59.0         
=&gt; passed    80000   121852                  65.0                    0.0                    64.3              63.7         
=&gt; passed   160000    97784                  73.1                    0.0                    72.4              71.8         
=&gt; passed   320000    71361                  75.1                    0.0                    74.4              73.8         
=&gt; passed   640000    75113                  76.7                    0.0                    76.0              75.4         
==&gt; 7/7 tests passed

Total: 24/24 tests passed!</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4223" data-popup="#course-forum-post-vote-hint-4223" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4223" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4223" data-popup="#course-forum-post-flag-hint-4223" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4223" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4279" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=2282139">Sudeep Mandal</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4279" name="post-4279" style="vertical-align:middle"> <time datetime="1362948885" title="Monday, March 11th 2013, 2:24 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Here is my result. I'm finding it hard to compare against other people's timing tests. It appears that the ops per second is not reliable at all to compare one solution from the other. I ended up getting an almost 2X increase in my number of ops per second for my <code>range()</code> method even though I did not change anything in the method between the two submissions.</p>
<p>So at the moment, I guess I am just going by the number of calls to the various methods as detailed by the auto-grader. In that respect, my submission seems to do quite well in having a relatively low number of calls to various methods during the recursion. </p>
<p>Also, as a side note, I found this programming exercise to be really useful in hammering down some key concepts when it comes to recursions. I really enjoyed the exercise, and one of the big surprises for me was that my KdTree class ended up having zero bugs when I finished writing it...without the aid of any unit testing during the course of coding it up! If only I could pull that off every single time... :-)</p>
<pre><code>*-----------------------------------------------------------
Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          168                160
=&gt; passed        2          296                288
=&gt; passed        5          680                672
=&gt; passed       10         1320               1312
=&gt; passed       25         3240               3232
=&gt; passed      100        12840              12832
=&gt; passed      400        51240              51232
=&gt; passed      800       102440             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 128.00 N + 40.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================

*-----------------------------------------------------------
Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     403023               1.0              22.6              21.6               0.0         
=&gt; passed   320000     450704               1.0              23.0              22.0               0.0         
=&gt; passed   640000     259214               1.0              24.5              23.5               0.0         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     655022              18.5              17.4               0.0         
=&gt; passed    20000     657895              18.5              17.6               0.0         
=&gt; passed    40000     635593              21.3              20.3               0.0         
=&gt; passed    80000     530035              22.1              21.1               0.0         
=&gt; passed   160000     454545              24.5              23.5               0.0         
=&gt; passed   320000     383632              25.5              24.5               0.0         
=&gt; passed   640000     337079              28.0              27.0               0.0         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     266904              31.5              31.5              83.5              48.4         
=&gt; passed    20000     397878              32.4              32.4              86.1              46.9         
=&gt; passed    40000     273723              33.5              33.5              87.9              46.6         
=&gt; passed    80000     164835              37.7              37.7              99.9              53.7         
=&gt; passed   160000     124896              38.3              38.3             100.7              52.5         
=&gt; passed   320000     115830              41.8              41.8             109.9              55.1         
=&gt; passed   640000     133452              43.6              43.6             114.6              57.8         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   269300                  26.1                   43.8                   121.7             120.9         
=&gt; passed    20000   269300                  28.7                   48.5                   134.8             132.9         
=&gt; passed    40000   230769                  29.3                   49.7                   138.1             136.3         
=&gt; passed    80000   137237                  31.7                   54.0                   149.5             147.8         
=&gt; passed   160000   150905                  35.7                   61.1                   168.6             167.2         
=&gt; passed   320000    99933                  36.7                   63.3                   174.4             173.3         
=&gt; passed   640000    82192                  37.5                   64.5                   178.6             176.5         
==&gt; 7/7 tests passed

Total: 24/24 tests passed!

================================================================</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4279" data-popup="#course-forum-post-vote-hint-4279" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4279" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4279" data-popup="#course-forum-post-flag-hint-4279" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4279" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""><li><div data-permalink="comment-1923" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=942250"><img src="./Timing_files/IMG_0676.jpg">Leslie Klein</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#comment-1923" name="comment-1923" style="vertical-align:middle"> <time datetime="1362949453" title="Monday, March 11th 2013, 2:34 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>How do I post my results? I tried copy-and-paste but the table formatting is lost. Thx.</p>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-1923" data-popup="#course-forum-post-vote-hint-1923" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-1923" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-1923" data-popup="#course-forum-post-flag-hint-1923" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-1923" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this comment is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li><li><div data-permalink="comment-1924" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=2548061"><img src="./Timing_files/IMG_2464.jpg">Dmytro Nochevnov</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#comment-1924" name="comment-1924" style="vertical-align:middle"> <time datetime="1362952331" title="Monday, March 11th 2013, 3:22 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Select report content and click "Code Sample" button in editor's toolbar.</p>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-1924" data-popup="#course-forum-post-vote-hint-1924" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-1924" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-1924" data-popup="#course-forum-post-flag-hint-1924" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-1924" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this comment is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4283" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=1929257">Antonio García-Domínguez</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4283" name="post-4283" style="vertical-align:middle"> <time datetime="1362950397" title="Monday, March 11th 2013, 2:49 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Here are my results. I implemented the optimization on range() that only checked the intersection between the query rectangle and the splittling segment, and I've also avoided saving a RectHV inside each node.</p>
<pre><code>Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          104                160
=&gt; passed        2          176                288
=&gt; passed        5          392                672
=&gt; passed       10          752               1312
=&gt; passed       25         1832               3232
=&gt; passed      100         7232              12832
=&gt; passed      400        28832              51232
=&gt; passed      800        57632             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 72.00 N + 32.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     909091         
=&gt; passed   320000     782396         
=&gt; passed   640000     560911         
=&gt; passed  1280000     547009         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     819672         
=&gt; passed    20000     828729         
=&gt; passed    40000     746269         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000    1000000         
=&gt; passed    20000    1145038         
=&gt; passed    40000    1119403         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2661         
=&gt; passed    20000       1033         
=&gt; passed    40000        203         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     313725               0.0              22.1              21.1              21.6         
=&gt; passed   320000     359147               0.0              22.5              21.5              22.0         
=&gt; passed   640000     261866               0.0              24.0              23.0              23.5         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     505051              18.5              17.4              17.9         
=&gt; passed    20000     501672              18.5              17.6              18.1         
=&gt; passed    40000     348028              21.3              20.3              20.8         
=&gt; passed    80000     290698              22.1              21.1              21.6         
=&gt; passed   160000     315126              24.5              23.5              24.0         
=&gt; passed   320000     210084              25.5              24.5              25.0         
=&gt; passed   640000     209205              28.0              27.0              27.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     179211               0.0              31.5              78.3              41.6         
=&gt; passed    20000     185185               0.0              32.4              79.8              40.8         
=&gt; passed    40000     105708               0.0              33.5              81.3              40.0         
=&gt; passed    80000     115473               0.0              37.7              92.5              46.4         
=&gt; passed   160000      69188               0.0              38.3              93.0              44.6         
=&gt; passed   320000     123967               0.0              41.8             100.7              47.6         
=&gt; passed   640000     101215               0.0              43.6             106.0              49.4         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   100806                  26.1                   42.8                   141.7             139.8         
=&gt; passed    20000   105189                  28.7                   47.5                   156.9             154.3         
=&gt; passed    40000   163399                  29.3                   48.7                   160.7             158.4         
=&gt; passed    80000   140449                  31.7                   53.0                   174.3             171.9         
=&gt; passed   160000   132392                  35.7                   60.1                   197.0             194.8         
=&gt; passed   320000    94044                  36.7                   62.3                   203.9             202.1         
=&gt; passed   640000   113037                  37.5                   63.5                   208.7             205.9         
==&gt; 7/7 tests passed

Total: 24/24 tests passed!

================================================================</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4283" data-popup="#course-forum-post-vote-hint-4283" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4283" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4283" data-popup="#course-forum-post-flag-hint-4283" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4283" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4289" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=623060">Patrick Grandjean</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4289" name="post-4289" style="vertical-align:middle"> <time datetime="1362954073" title="Monday, March 11th 2013, 3:51 am +05:30">3 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>My 2 cents:</p>
<pre><code>Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

             N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          120                160
=&gt; passed        2          208                288
=&gt; passed        5          472                672
=&gt; passed       10          912               1312
=&gt; passed       25         2232               3232
=&gt; passed      100         8832              12832
=&gt; passed      400        35232              51232
=&gt; passed      800        70432             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 88.00 N + 32.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

           N      ops per second
----------------------------------------
=&gt; passed   160000     909091         
=&gt; passed   320000     774818         
=&gt; passed   640000     637450         
=&gt; passed  1280000     558708         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

           N      ops per second
----------------------------------------
=&gt; passed    10000     867052         
=&gt; passed    20000     903614         
=&gt; passed    40000     842697         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       3567         
=&gt; passed    20000       1565         
=&gt; passed    40000        665         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       3130         
=&gt; passed    20000       1444         
=&gt; passed    40000        569         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                            Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     555556               0.0              22.1              21.1              21.6         
=&gt; passed   320000     763723               0.0              22.5              21.5              22.0         
=&gt; passed   640000     519481               0.0              24.0              23.0              23.5         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     617284              18.5              17.4              17.9         
=&gt; passed    20000     724638              18.5              17.6              18.1         
=&gt; passed    40000     773196              21.3              20.3              20.8         
=&gt; passed    80000     465839              22.1              21.1              21.6         
=&gt; passed   160000     505051              24.5              23.5              24.0         
=&gt; passed   320000     436047              25.5              24.5              25.0         
=&gt; passed   640000     275735              28.0              27.0              27.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000      64683              63.1              31.5              83.5              48.4         
=&gt; passed    20000     243902              64.9              32.4              86.1              46.9         
=&gt; passed    40000     252101              67.0              33.5              87.9              46.6         
=&gt; passed    80000     250417              75.4              37.7              99.9              53.7         
=&gt; passed   160000     132392              76.5              38.3             100.7              52.5         
=&gt; passed   320000     118859              83.6              41.8             109.9              55.1         
=&gt; passed   640000      94997              87.1              43.6             114.6              57.8         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   257732                  27.1                   26.1                    86.7              85.9         
=&gt; passed    20000   167224                  29.7                   28.7                    95.5              93.9         
=&gt; passed    40000   169683                  30.3                   29.3                    97.6              96.1         
=&gt; passed    80000   210970                  32.7                   31.7                   104.9             103.7             
=&gt; passed   160000   145068                  36.7                   35.7                   117.9             116.9         
=&gt; passed   320000   137363                  37.7                   36.7                   121.3             120.7         
=&gt; passed   640000   120579                  38.5                   37.5                   124.6             123.0             
==&gt; 7/7 tests passed

Total: 24/24 tests passed!

================================================================</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4289" data-popup="#course-forum-post-vote-hint-4289" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4289" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4289" data-popup="#course-forum-post-flag-hint-4289" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4289" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4481" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=1512621">Pavel Dergel</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4481" name="post-4481" style="vertical-align:middle"> <time datetime="1363295303" title="Friday, March 15th 2013, 2:38 am +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Hi, grader is kidding me little bit, the Timing test - 17/24 passed Ok. but grader says that 0/24 test passed, any hints ?
(sorry for the formatting)</p>
<p>Timing KdTree</p>
<hr>
<p>Running 24 total tests.</p>
<p>Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().</p>
<pre><code>                                                                                            Point2D
           N      ops per second       RectHV()           x()               y()             equals()</code></pre>
<hr>
<p>=&gt; passed   160000     975610               0.0              22.1              21.1              11.2<br>=&gt; passed   320000     670860               0.0              22.5              21.5              11.8<br>=&gt; passed   640000     580762               0.0              24.0              23.0              13.1<br>==&gt; 3/3 tests passed</p>
<p>Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().</p>
<pre><code>                                                                           Point2D
           N      ops per second       x()               y()               equals()</code></pre>
<hr>
<p>=&gt; passed    10000     742574              18.5              17.4              17.9<br>=&gt; passed    20000     777202              18.5              17.6              18.1<br>=&gt; passed    40000     681818              21.3              20.3              20.8<br>=&gt; passed    80000     561798              22.1              21.1              21.6<br>=&gt; passed   160000     498339              24.5              23.5              24.0<br>=&gt; passed   320000     420168              25.5              24.5              25.0<br>=&gt; passed   640000     290698              28.0              27.0              27.5<br>==&gt; 7/7 tests passed</p>
<p>Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().</p>
<pre><code>           N      ops per second       intersects()      contains()        x()               y()</code></pre>
<hr>
<p>=&gt; passed    10000     131234               0.0              34.4              64.6              18.1<br>=&gt; passed    20000     338600               0.0              38.7              74.6              18.9<br>=&gt; passed    40000     200000               0.0              42.3              78.4              19.9<br>=&gt; passed    80000     302419               0.0              46.0              87.5              21.0<br>=&gt; passed   160000     171821               0.0              50.2              94.4              22.4<br>=&gt; passed   320000     239617               0.0              53.0              99.7              22.5<br>=&gt; passed   640000     188442               0.0              57.9             109.3              24.5<br>==&gt; 7/7 tests passed</p>
<p>Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().</p>
<pre><code>                                     Point2D                 RectHV</code></pre>
<h2>N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()</h2>
<p>=&gt; FAILED    10000     2837   (0.1x)      10051.5  (16.8x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED    20000     1374   (0.0x)      20058.9  (33.4x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED    40000      405   (0.0x)      40094.2  (66.8x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED    80000      111   (0.0x)      80142.3 (133.6x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED   160000       46   (0.0x)     160182.8 (267.0x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=&gt; FAILED   320000       23   (0.0x)     320274.8 (533.8x)           0.0                     0.0   (0.0x)      0.0   (0.0x)</p>
<h1>Total: 0/24 tests passed:Test aborted. Ran out of time or crashed before completion.</h1>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4481" data-popup="#course-forum-post-vote-hint-4481" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4481" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4481" data-popup="#course-forum-post-flag-hint-4481" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4481" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""><li><div data-permalink="comment-2055" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=12907">Pavel Janečka</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#comment-2055" name="comment-2055" style="vertical-align:middle"> <time datetime="1363437586" title="Saturday, March 16th 2013, 6:09 pm +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Seems that if you fail one of test case you fail whole test suite.. I have same problem with nearest, took me few hours to find problem.. I went out that i did search nodes i didn't have to, because solution could not be there.. Check the video again, slowly and think about every step. Mr. Sedgewick do this part sort of quicly, so pause it, don't hurry and think ;).. Good luck!</p>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-2055" data-popup="#course-forum-post-vote-hint-2055" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-2055" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-2055" data-popup="#course-forum-post-flag-hint-2055" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-2055" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this comment is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li><li><div data-permalink="comment-2057" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=1512621">Pavel Dergel</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#comment-2057" name="comment-2057" style="vertical-align:middle"> <time datetime="1363439453" title="Saturday, March 16th 2013, 6:40 pm +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Thanks for response, I finally sorted it out, but still I think that the grader is little bit too strict, when 1 single test can make all test suite fail with 0 points. Even if 23/24 pass you still get 0. </p>
<p>Little bit frustrating ;-)</p>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-2057" data-popup="#course-forum-post-vote-hint-2057" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-2057" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-2057" data-popup="#course-forum-post-flag-hint-2057" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-2057" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this comment is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li><li><div data-permalink="comment-2064" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=12907">Pavel Janečka</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#comment-2064" name="comment-2064" style="vertical-align:middle"> <time datetime="1363450329" title="Saturday, March 16th 2013, 9:42 pm +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>So post it as an question with the results from auto grader, maybe we can find what's wrong..</p>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-2064" data-popup="#course-forum-post-vote-hint-2064" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-2064" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-2064" data-popup="#course-forum-post-flag-hint-2064" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-2064" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this comment is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4557" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=12907">Pavel Janečka</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4557" name="post-4557" style="vertical-align:middle"> <time datetime="1363437337" title="Saturday, March 16th 2013, 6:05 pm +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>Whew, tough one.. But after few hours of tuning :)..</p>
<pre><code>files submitted
----------------------------------
total 16K
-rw-r--r-- 1 6.9K Mar 16 12:29 KdTree.java
-rw-r--r-- 1 2.2K Mar 16 12:29 PointSET.java
-rw-r--r-- 1 2.7K Mar 16 12:29 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac PointSET.java
*-----------------------------------------------------------
================================================================

% javac KdTree.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
KdTree.java:3: Line is longer than 85 characters.
KdTree.java:15: Line is longer than 85 characters.
KdTree.java:64: Line is longer than 85 characters.
KdTree.java:79: Line is longer than 85 characters.
KdTree.java:80: Line is longer than 85 characters.
KdTree.java:82: Line is longer than 85 characters.
KdTree.java:83: Line is longer than 85 characters.
KdTree.java:160: Line is longer than 85 characters.
KdTree.java:161: Line is longer than 85 characters.
KdTree.java:196: Line is longer than 85 characters.
KdTree.java:202: Line is longer than 85 characters.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 6 total tests.

Test 1: Test size() by inserting N random points
(size may be less than N because of duplicates)
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3: Insert N random points and check contains() for random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 4: Insert N random points and check nearest() for random query points
  *  3000 random points in 100000-by-100000 grid
  *  3000 random points in 10000-by-10000 grid
  *  3000 random points in 1000-by-1000 grid
  *  3000 random points in 100-by-100 grid
  *  3000 random points in 10-by-10 grid
==&gt; passed

Test 5: Insert N random points and check range() for random query rectangles
  *  1000 random rectangles and points in 100000-by-100000 grid
  *  1000 random rectangles and points in 10000-by-10000 grid
  *  1000 random rectangles and points in 1000-by-1000 grid
  *  1000 random rectangles and points in 100-by-100 grid
  *  1000 random rectangles and points in 10-by-10 grid
==&gt; passed

Test 6: Test whether two PointSET objects can be created at the same time
==&gt; passed


Total: 6/6 tests passed!

================================================================

Testing methods in KdTree
*-----------------------------------------------------------
Running 14 total tests.

Test 0: Run sample client
% java TestKdTree circle10.txt
  *  testing size()
  *  testing isEmpty()
  *  testing contains() with (0.81, 0.3)
  *  testing contains() with (0.206107, 0.095492)
  *  testing range() with [0.0, 0.81] x [0.0, 0.3]
  *  testing nearest() with (0.81, 0.3)
  *  testing nearest() with (0.206107, 0.095492)
==&gt; passed

Test 1a: Insert N distinct points and check size() after each insertion
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 1b: Insert N points and check size() after each insertion
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
  *  10 random points in 1-by-1 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3a: Insert N distinct points and call contains() with random query points
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 3b: Insert N points and call contains() with random query points
  *  10000 random points in 1000-by-1000 grid
  *  10000 random points in 100-by-100 grid
  *  10000 random points in 10-by-10 grid
  *  10000 random points in 1-by-1 grid
==&gt; passed

Test 4: Test whether two KdTree objects can be created at the same time
==&gt; passed

Test 5a: Insert N distinct points and call range() for random query rectangles
  *  4000 random rectangles and 4000 distinct points in 100000-by-100000 grid
  *  4000 random rectangles and 4000 distinct points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 distinct points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 distinct points in 100-by-100 grid
  *  4000 random rectangles and 4000 distinct points in 10-by-10 grid
  *  4000 random rectangles and 4000 distinct points in 1-by-1 grid
==&gt; passed

Test 5b: Insert N points and call range() for random query rectangles
  *  4000 random rectangles and 4000 random points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 random points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 random points in 100-by-100 grid
  *  4000 random rectangles and 4000 random points in 10-by-10 grid
  *  4000 random rectangles and 4000 random points in 1-by-1 grid
==&gt; passed

Test 5c: Insert N points and call range() for tiny
rectangles enclosing each point.
  *  4000 tiny rectangles and 4000 points in 100000-by-100000 grid
  *  4000 tiny rectangles and 4000 points in 10000-by-10000 grid
  *  4000 tiny rectangles and 4000 points in 1000-by-1000 grid
  *  4000 tiny rectangles and 4000 points in 100-by-100 grid
  *  4000 tiny rectangles and 4000 points in 10-by-10 grid
==&gt; passed

Test 6a: Insert N distinct points and call nearest() with random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 6b: Insert N points and call nearest() with random query points
  *  10000 random points in 1000-by-1000 grid
  *  10000 random points in 100-by-100 grid
  *  10000 random points in 10-by-10 grid
==&gt; passed

Test 7: test intermixed sequence of calls to isEmpty(), size(), insert(), contains(),
range(), and nearest() with probabilities p1, p2, p3, p4, p5, and p6, respecively
  *  20000 calls in 100000-by-100000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10000-by-10000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1000-by-1000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 100-by-100 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10-by-10 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1-by-1 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
==&gt; passed

Test 8: test intermixed sequence of calls to isEmpty(), size(), insert(), contains(),
range(), and nearest() with probabilities p1, p2, p3 = 0, p4, p5, and p6, respecively
  *  2000 calls in 100000-by-100000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
  *  2000 calls in 10000-by-10000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
  *  2000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed


Total: 14/14 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          176                160
=&gt; passed        2          304                288
=&gt; passed        5          688                672
=&gt; passed       10         1328               1312
=&gt; passed       25         3248               3232
=&gt; passed      100        12848              12832
=&gt; passed      400        51248              51232
=&gt; passed      800       102448             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 128.00 N + 48.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     669456         
=&gt; passed   320000     585009         
=&gt; passed   640000     522876         
=&gt; passed  1280000     439108         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     857143         
=&gt; passed    20000     833333         
=&gt; passed    40000     721154         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2440         
=&gt; passed    20000       1166         
=&gt; passed    40000        406         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2771         
=&gt; passed    20000       1294         
=&gt; passed    40000        448         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     434783               1.0              44.8              42.8               0.0         
=&gt; passed   320000     423841               1.0              45.6              43.6               0.0         
=&gt; passed   640000     257960               1.0              48.6              46.6               0.0         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     773196              18.5              17.4               0.0         
=&gt; passed    20000     607287              18.5              17.6               0.0         
=&gt; passed    40000     625000              21.3              20.3               0.0         
=&gt; passed    80000     451807              22.1              21.1               0.0         
=&gt; passed   160000     422535              24.5              23.5               0.0         
=&gt; passed   320000     289575              25.5              24.5               0.0         
=&gt; passed   640000     277264              28.0              27.0               0.0         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     301811              49.8              31.5              52.1              16.7         
=&gt; passed    20000     359712              51.9              32.4              53.5              14.6         
=&gt; passed    40000     233645              54.2              33.5              53.9              13.5         
=&gt; passed    80000     160600              61.1              37.7              61.9              16.2         
=&gt; passed   160000     159405              62.6              38.3              62.0              14.6         
=&gt; passed   320000     132275              68.3              41.8              67.3              14.2         
=&gt; passed   640000     132042              71.8              43.6              70.3              15.0         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   284091                  26.1                   20.6                    73.6              72.8         
=&gt; passed    20000   287356                  28.7                   22.9                    81.8              80.2         
=&gt; passed    40000   229709                  29.3                   23.4                    83.6              82.2         
=&gt; passed    80000   175234                  31.7                   25.6                    90.6              89.5         
=&gt; passed   160000   170068                  35.7                   29.1                   102.2             101.3         
=&gt; passed   320000   120870                  36.7                   30.2                   106.0             105.4         
=&gt; passed   640000   112782                  37.5                   30.8                   108.7             107.2         
==&gt; 7/7 tests passed

Total: 24/24 tests passed!

================================================================</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4557" data-popup="#course-forum-post-vote-hint-4557" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4557" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4557" data-popup="#course-forum-post-flag-hint-4557" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4557" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4674" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=1393998">Wu Kai Chiu</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4674" name="post-4674" style="vertical-align:middle"> <time datetime="1363612844" title="Monday, March 18th 2013, 6:50 pm +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><pre><code>Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     375587               1.0              43.8              43.8               0.0         
=&gt; passed   320000     306807               1.0              44.6              44.6               0.0         
=&gt; passed   640000     230964               1.0              47.6              47.6               0.0         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     551471              35.9              35.9               0.0         
=&gt; passed    20000     416667              36.1              36.1               0.0         
=&gt; passed    40000     346420              41.5              41.5               0.0         
=&gt; passed    80000     310559              43.2              43.2               0.0         
=&gt; passed   160000     306748              47.9              47.9               0.0         
=&gt; passed   320000     249169              50.1              50.1               0.0         
=&gt; passed   640000     262697              55.0              55.0               0.0         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     319829              49.8              31.5              52.1              16.7         
=&gt; passed    20000     164114              51.9              32.4              53.5              14.6         
=&gt; passed    40000     224551              54.2              33.5              53.9              13.5         
=&gt; passed    80000     143816              61.1              37.7              61.9              16.2         
=&gt; passed   160000     166852              62.6              38.3              62.0              14.6         
=&gt; passed   320000     112782              68.3              41.8              67.3              14.2         
=&gt; passed   640000      88863              71.8              43.6              70.3              15.0         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   156904                   0.0                   20.6                    99.2              99.4         
=&gt; passed    20000   181159                   0.0                   22.9                   110.1             109.3         
=&gt; passed    40000   139925                   0.0                   23.4                   112.5             111.9         
=&gt; passed    80000   118859                   0.0                   25.6                   122.0             121.4         
=&gt; passed   160000    97276                   0.0                   29.1                   137.6             137.3         
=&gt; passed   320000    84698                   0.0                   30.2                   142.4             142.4         
=&gt; passed   640000    89713                   0.0                   30.8                   145.9             144.9         
==&gt; 7/7 tests passed

Total: 24/24 tests passed!

================================================================</code></pre>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4674" data-popup="#course-forum-post-vote-hint-4674" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4674" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4674" data-popup="#course-forum-post-flag-hint-4674" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4674" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4689" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><span>Anonymous</span><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4689" name="post-4689" style="vertical-align:middle"> <time datetime="1363644898" title="Tuesday, March 19th 2013, 3:44 am +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>I don't get it. I just can't manage to reduce the number of calls per nearest(). The only thing that increased my speed is the rectangle and left/right first optimizations mentioned in the assignment, but I just can't make a good decision on when to abandon a subtree (I end up with incorrect results when I do).</p>
<p>Any hint you're willing to share? :-)</p>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4689" data-popup="#course-forum-post-vote-hint-4689" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4689" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4689" data-popup="#course-forum-post-flag-hint-4689" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4689" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""><li><div data-permalink="comment-2126" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=12907">Pavel Janečka</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#comment-2126" name="comment-2126" style="vertical-align:middle"> <time datetime="1363679575" title="Tuesday, March 19th 2013, 1:22 pm +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>I had also problems with <code>nearest()</code>, took me few hours to find it.. It went out that I did search nodes I didn't have to, because solution could not be there.. 
<strong>See the video again</strong>, slowly and think about every step. Mr. Sedgewick do this part sort of quickly, so pause it, don't hurry, draw it and think ;).. There is all you need to solve it.. Good luck!</p>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-2126" data-popup="#course-forum-post-vote-hint-2126" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count course-forum-votes-positive">2</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-2126" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-2126" data-popup="#course-forum-post-flag-hint-2126" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-2126" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this comment is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4709" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=1492937"><img src="./Timing_files/k-nrm-256.png">Tim Howard</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4709" name="post-4709" style="vertical-align:middle"> <time datetime="1363709562" title="Tuesday, March 19th 2013, 9:42 pm +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><p>This doesn't seem like a bad thing.</p>
<pre><code>Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     443213               0.0              22.1              21.1               0.0         
=&gt; passed   320000     489297               0.0              22.5              21.5               0.0         
=&gt; passed   640000     418848               0.0              24.0              23.0               0.0         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; FAILED    10000     184957   (0.9x)     18.5              17.4               0.0         
=&gt; passed    20000     531915              18.5              17.6               0.0         
=&gt; passed    40000     506757              21.3              20.3               0.0         
=&gt; passed    80000     451807              22.1              21.1               0.0         
=&gt; passed   160000     340909              24.5              23.5               0.0         
=&gt; passed   320000     266430              25.5              24.5               0.0         
=&gt; passed   640000     247525              28.0              27.0               0.0         
==&gt; 6/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     136364               0.0              31.5              75.4              40.0         
=&gt; passed    20000     170648               0.0              32.4              77.9              37.8         
=&gt; passed    40000     141777               0.0              33.5              78.9              37.9         
=&gt; passed    80000     100334               0.0              37.7              90.4              43.6         
=&gt; passed   160000      84938               0.0              38.3              90.8              43.1         
=&gt; passed   320000      88391               0.0              41.8              99.4              44.8         
=&gt; passed   640000      78452               0.0              43.6             102.9              47.2         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; FAILED    10000   344037                  45.1                    0.0                    26.9   (0.5x)     26.0   (0.5x)
=&gt; FAILED    20000   344828                  49.5                    0.0                    29.4   (0.6x)     28.7   (0.6x)
=&gt; FAILED    40000   255537                  51.0                    0.0                    30.1   (0.6x)     29.3   (0.6x)
=&gt; FAILED    80000   218978                  54.9                    0.0                    32.3   (0.6x)     31.7   (0.6x)
=&gt; FAILED   160000   162338                  61.8                    0.0                    36.3   (0.7x)     35.8   (0.7x)
=&gt; FAILED   320000   164654                  64.1                    0.0                    37.3   (0.7x)     36.8   (0.7x)
=&gt; FAILED   640000   147059                  65.2                    0.0                    38.1   (0.8x)     37.6   (0.8x)
==&gt; 0/7 tests passed

Total: 16/24 tests passed!

================================================================</code></pre>
<p>Yeah, I think this is good.</p>
<p>Weird autograding for this assignment; I'm not making any <code>RectHV</code> instances in <code>insert()</code> (or anywhere, for that matter).</p>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4709" data-popup="#course-forum-post-vote-hint-4709" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4709" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4709" data-popup="#course-forum-post-flag-hint-4709" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4709" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-4804" class="course-forum-post-view-container "><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/profile?user_id=2641796">Evgeny Antonov</a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-4804" name="post-4804" style="vertical-align:middle"> <time datetime="1363913743" title="Friday, March 22nd 2013, 6:25 am +05:30">2 months ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"><pre><code>Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

            N      ops per second
----------------------------------------
=&gt; passed   160000    1118881         
=&gt; passed   320000     867209         
=&gt; passed   640000     699454         
=&gt; passed  1280000     586887         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

            N      ops per second
----------------------------------------
=&gt; passed    10000     882353         
=&gt; passed    20000     909091         
=&gt; passed    40000     833333         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

            N      ops per second
----------------------------------------
=&gt; passed    10000       3538         
=&gt; passed    20000       1627         
=&gt; passed    40000        414         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

            N      ops per second
----------------------------------------
=&gt; passed    10000       4008         
=&gt; passed    20000       1825         
=&gt; passed    40000        568         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
            N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     487805               1.0              45.8              43.8              21.6         
=&gt; passed   320000     522023               1.0              46.6              44.6              22.0         
=&gt; passed   640000     300893               1.0              49.6              47.6              23.5         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                            Point2D
            N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     847458              18.5              17.4              17.9         
=&gt; passed    20000     872093              18.5              17.6              18.1         
=&gt; passed    40000     694444              21.3              20.3              20.8         
=&gt; passed    80000     566038              22.1              21.1              21.6         
=&gt; passed   160000     468750              24.5              23.5              24.0         
=&gt; passed   320000     500000              25.5              24.5              25.0         
=&gt; passed   640000     330396              28.0              27.0              27.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

            N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     357143              50.8              31.5              52.1              16.7         
=&gt; passed    20000     382653              52.9              32.4              53.5              14.6         
=&gt; passed    40000     307377              55.2              33.5              53.9              13.5         
=&gt; passed    80000     200803              62.1              37.7              61.9              16.2         
=&gt; passed   160000     154321              63.6              38.3              62.0              14.6         
=&gt; passed   320000     159405              69.3              41.8              67.3              14.2         
=&gt; passed   640000     109810              72.8              43.6              70.3              15.0         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                        Point2D                 RectHV
            N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   371287                  46.4                   44.3                   124.7             124.2         
=&gt; passed    20000   351288                  51.5                   49.5                   139.2             137.7         
=&gt; passed    40000   298211                  52.6                   50.5                   141.9             140.5         
=&gt; passed    80000   189873                  56.9                   54.9                   153.4             152.2         
=&gt; passed   160000   204360                  64.6                   62.6                   174.4             173.3         
=&gt; passed   320000   116641                  66.5                   64.5                   179.3             178.5         
=&gt; passed   640000   101557                  67.8                   65.7                   183.5             181.8         
==&gt; 7/7 tests passed</code></pre>
<p>Few days couldn't find two-symbols bug in nearest() -.- But these days have lead me to some improvements. In particular, i've used pi / (size() * 2) as starting shortest distance. This number is first that i've tried. It gives me about 25% more ops per second. But i'm sure this number can be bigger (may be not so much) if i use another starting distance. Does anyone knows mathematical justification for most effective distance? </p>
</div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-4804" data-popup="#course-forum-post-vote-hint-4804" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count ">0</span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive"><i class="icon-arrow-down"></i></div></div><div id="course-forum-post-vote-hint-4804" class="course-forum-post-vote-hint help-block hide"> Please use votes to bring attention to thoughtful, helpful posts. <br>
 (Even if you personally disagree with the post - we like a diversity of opinions here.) Thanks! <br></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-4804" data-popup="#course-forum-post-flag-hint-4804" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-4804" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div></li></div><ul class="course-forum-comments-container" style=""></ul><div class="course-forum-new-comment-container"></div><div class="course-forum-new-comment-link-container" style=""><a href="javascript:void(0);" class="course-forum-new-comment-link">+ Comment</a></div></div></div></ul><div class="course-forum-bottom-scroll-indicator" style="display: none;">⬇ scroll down for more ⬇</div><div class="course-forum-thread-new-post" style=""><div><div class="course-forum-post-container"><div class="course-forum-post-top-container"><li><div data-permalink="post-undefined" class="course-forum-post-view-container " style="display: none;"><div class="course-forum-post-header"><div class="course-forum-post-controls"></div><h5 class="course-forum-post-byline"><a href="https://class.coursera.org/algs4partI-002/forum/undefined"></a><span style="vertical-align: middle; margin-left: 5px;" class="course-forum-profile-badgeville"></span><span style="vertical-align:middle">· </span><a href="https://class.coursera.org/algs4partI-002/forum/thread?thread_id=1058#post-undefined" name="post-undefined" style="vertical-align:middle"> <time datetime="undefined" title="undefined, undefined NaNth NaN, 12:NaN am +00:00">a few seconds ago</time>&nbsp;<span class="icon-link"></span></a></h5></div><div class="course-forum-post-text"></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-vote-hint-undefined" data-popup="#course-forum-post-vote-hint-undefined" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-vote-controls"><div tabindex="0" aria-label="Vote this post up" data-direction-value="1" role="button" class="course-forum-post-vote-button course-forum-post-vote-up course-forum-vote-inactive course-forum-post-vote-disabled"><i class="icon-arrow-up"></i></div><span class="course-forum-post-vote-count "></span><div tabindex="0" aria-label="Vote this post down" data-direction-value="-1" role="button" class="course-forum-post-vote-button course-forum-post-vote-down course-forum-vote-inactive course-forum-post-vote-disabled"><i class="icon-arrow-down"></i></div></div><div tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-forum-post-flag-hint-undefined" data-popup="#course-forum-post-flag-hint-undefined" data-popup-direction="sw" data-popup-bind-open="mouseenter" class="course-forum-post-controls-report">·
flag</div><div id="course-forum-post-flag-hint-undefined" class="course-forum-post-vote-hint help-block hide"> Please flag this if you think this post is inappropriate or a violation of the honor code.</div><div style="clear: both; height: 3px;"></div></div><div class="course-forum-post-edit-container" style=""><div class="course-forum-post-header">New post</div><form class="course-forum-post-edit-form"><p class="help-block">Please be considerate and constructive when talking to your fellow students.<br>
<span class="icon-thumbs-down"> Bad</span>: “You’re wrong and you’re an idiot.” <br>
<span class="icon-thumbs-up"> Good</span>: “Hmm. I think this is not necessarily true because...”<br></p><input type="hidden" name="text_type" value="html"><div class="control-group"><label class="hidden">Message</label><div style="position: relative;" role="toolbar" tabindex="0" title="HTML editing toolbar" class="coursera-wysihtml5-toolbar"><div style="overflow:auto;"><div style="float:left;" class="left coursera-wysihtml5-commands"><span data-wysihtml5-order="0" class="hide"></span><button data-wysihtml5-order="1" data-wysihtml5-command="bold" style="font-weight:bold; width: 30px;" type="button" title="Make text bold" class="coursera-wysihtml5-toolbar-item" href="javascript:;" unselectable="on">B</button><button data-wysihtml5-order="2" data-wysihtml5-command="italic" style="font-style:italic; font-family: serif; width: 30px;" type="button" title="Make text italic" class="coursera-wysihtml5-toolbar-item" href="javascript:;" unselectable="on">I</button><button data-wysihtml5-order="3" data-wysihtml5-command="insertUnOrderedList" type="button" title="Insert bullets" style="width:30px;" class="coursera-wysihtml5-toolbar-item" href="javascript:;" unselectable="on"> <span class="icon-list-ul"></span></button><button data-wysihtml5-order="4" data-wysihtml5-command="insertOrderedList" type="button" title="Insert numbered bullets" style="width:30px;" class="coursera-wysihtml5-toolbar-item" href="javascript:;" unselectable="on"> <span class="icon-list-ol"></span></button><button data-wysihtml5-custom-command="link" type="button" unselectable="on" title="Insert link" class="coursera-wysihtml5-toolbar-item" data-wysihtml5-order="5"><span class="icon-link"></span> Link</button><button data-wysihtml5-command="code" data-wysihtml5-order="6" type="button" class="coursera-wysihtml5-toolbar-item" href="javascript:;" unselectable="on">&lt;code&gt;</button><button data-wysihtml5-custom-command="image" data-wysihtml5-order="7" type="button" unselectable="on" title="Insert image" class="coursera-wysihtml5-toolbar-item"><span class="icon-picture"></span> Pic</button><button data-wysihtml5-custom-command="latex" type="button" unselectable="on" title="Math Options" data-popup="#coursera-wysihtml5-toolbar-latex-popup" aria-haspopup="true" aria-expanded="false" aria-owns="coursera-wysihtml5-toolbar-latex-popup" data-popup-close="data-popup-close" data-popup-direction="sw" class="coursera-wysihtml5-toolbar-item" data-wysihtml5-order="100">Math</button><div id="coursera-wysihtml5-toolbar-latex-popup" style="display:none;" data-wysihtml5-order="100"><a data-popup-close="data-popup-close" class="coursera-wysihtml5-toolbar-latex-popup-item coursera-wysihtml5-toolbar-latex-popup-item-editor">Equation Builder</a><a data-popup-close="data-popup-close" class="coursera-wysihtml5-toolbar-latex-popup-item coursera-wysihtml5-toolbar-latex-popup-item-preview">Full Preview</a></div></div><div style="float:right;" class="right coursera-wysihtml5-command-view"><span data-wysihtml5-order="0" class="hide"></span><div class="coursera-wysihtml5-toolbar-modes" data-wysihtml5-order="100"><button data-wysihtml5-custom-command="change-editor" type="button" title="Change editing mode to HTML" class="coursera-wysihtml5-toolbar-item coursera-wysihtml5-toolbar-item-right coursera-wysihtml5-toolbar-source"><span>&lt;HTML&gt;</span></button><button data-wysihtml5-custom-command="change-editor" type="button" title="Change editing mode to Markdown" class="coursera-wysihtml5-toolbar-item coursera-wysihtml5-toolbar-item-right coursera-wysihtml5-toolbar-markdown"> <span>`MD`</span></button><button data-wysihtml5-custom-command="change-editor" type="button" title="Change editing mode to rich editor" style="display:none;" class="coursera-wysihtml5-toolbar-item coursera-wysihtml5-toolbar-item-right coursera-wysihtml5-toolbar-wysi"><span>Rich</span></button></div><button type="button" title="Close Preview" style="display:none;" class="coursera-wysihtml5-toolbar-item coursera-wysihtml5-toolbar-item-right coursera-wysihtml5-toolbar-latex-preview" data-wysihtml5-order="200">Close Math Preview</button></div></div><div class="coursera-wysihtml5-toolbar-modals"><div data-wysihtml5-modal-link="data-wysihtml5-modal-link" data-modal-overlay-class="coursera-wysihtml5-overlay" role="dialog" aria-label="Create a link" class="modal hide"><form><div class="modal-body"><label style="display:inline-block;margin-right:15px;"><span>URL &nbsp;&nbsp;</span><input name="url" placeholder="http://" style="width:350px;" class="coursera-wysihtml5-modal-url"></label></div><div class="modal-footer"><button type="submit" data-modal-close="data-modal-close" style="margin-right:10px;" class="btn coursera-wysihtml5-modal-link-submit">Create</button><a data-modal-close="data-modal-close" href="javascript:;">Cancel</a></div></form></div><div data-wysihtml5-modal-image="data-wysihtml5-modal-image" data-modal-overlay-class="coursera-wysihtml5-overlay" role="dialog" aria-label="Create Image" tabindex="-1" class="modal hide" style="position: fixed; left: 50%; margin-left: 0px; z-index: 10000; top: 50%; margin-top: 0px;"><form><div class="modal-body"><div class="control-group bootstrap-wysihtml5-upload-image"><div style="text-align:center;" class="uploader-controls transloadit-uploader"><div class="uploader-preview" style="display: none;"><div><img src=""></div><div style="margin-top:10px;"> <span>What size would you like to embed it at? </span><input type="text" style="width:50px;margin-left: 5px; margin-right:5px;" class="uploader-input-width"><span>x</span><input type="text" style="width:50px;margin-left:5px;" class="uploader-input-height"></div></div><div class="uploader-side"><button type="button" class="btn uploader-button">Pick File</button><div class="uploader-file-input"><input type="file" name="my_file" accept="image/png,image/jpeg,image/gif,image/jpg"></div><div style="display:none;" class="progress progress-striped active uploader-progress"><div style="width:0%" class="bar"></div></div><div class="uploader-input hide"><input type="text" value="" name="result" class="uploader-input-url"></div></div></div></div></div><div class="modal-footer"><button type="submit" data-modal-close="data-modal-close" style="margin-right:10px;" class="btn hide coursera-wysihtml5-modal-image-submit">Insert</button><a data-modal-close="data-modal-close" href="javascript:;">Cancel</a></div></form></div><div data-wysihtml5-modal-latex="data-wysihtml5-modal-latex" data-modal-overlay-class="coursera-wysihtml5-overlay" class="modal hide"><form style="margin:0px;padding:0px;"><div style="overflow:auto;"><div style="float:left;width:20%;"><label style="padding:10px;font-weight:bold;text-align:right;">LaTeX:</label></div><div style="float:right;width:80%;"><textarea name="latex" placeholder="enter a latex equation" class="coursera-wysihtml5-modal-latex-textarea"></textarea></div></div><div class="coursera-wysihtml5-latex-preview-area"><div style="float:left;width:20%;"> <label style="padding:10px;font-weight:bold;text-align:right;">Preview:</label></div><div style="float:right;width:80%;"><div class="coursera-wysihtml5-latex-preview"><span class="MathJax_Preview"></span><span class="MathJax" id="MathJax-Element-1-Frame" role="textbox" aria-readonly="true" style=""><nobr><span class="math" id="MathJax-Span-1"><span style="display: inline-block; position: relative; width: 0px; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(64px 16800px 70px -9px); top: -67px; left: 0px;"><span class="mrow" id="MathJax-Span-2"></span><span style="display: inline-block; width: 0px; height: 67px;"></span></span></span><span style="border-left-width: 0px; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 2px; vertical-align: -1px;"></span></span></nobr></span><script type="math/tex" id="MathJax-Element-1"></script></div></div></div><div class="modal-footer"><button type="submit" data-modal-close="data-modal-close" style="margin-right:10px;" class="btn coursera-wysihtml5-modal-link-submit">Create</button><a data-modal-close="data-modal-close" href="javascript:;">Cancel</a></div></form></div></div></div><textarea name="post_text" style="width: 100%; min-height: 100px; height: 100px; overflow-y: hidden; display: none;" class="coursera-wysihtml5-rich-editor"></textarea><input type="hidden" name="_wysihtml5_mode" value="1"><iframe class="wysihtml5-sandbox" security="restricted" allowtransparency="true" frameborder="0" width="0" height="0" marginwidth="0" marginheight="0" style="background-color: rgb(255, 255, 255); border-width: 1px; clear: none; display: inline-block; float: none; margin: 0px; outline: rgb(85, 85, 85) none 0px; outline-offset: 0px; padding: 4px 6px; position: static; top: auto; left: auto; right: auto; bottom: auto; z-index: auto; vertical-align: middle; text-align: start; box-sizing: border-box; -webkit-box-shadow: rgba(0, 0, 0, 0.0745098) 0px 0.9090908765792847px 0.9090908765792847px 0px inset; box-shadow: rgba(0, 0, 0, 0.0745098) 0px 0.9090908765792847px 0.9090908765792847px 0px inset; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; border-top-left-radius: 4px; width: 100%; min-width: 0px; min-height: 100px; max-width: none; max-height: none; height: 100px;"></iframe><div class="coursera-wysihtml5-footer"><div class="coursera-wysihtml5-footer-rich"><div style="float:left;"></div><div style="float:right;"><label class="coursera-wysihtml5-default-mode checkbox"><input type="checkbox" name="default-mode">Default Editor</label></div></div></div></div><div class="controls"><label class="checkbox"><input type="checkbox" name="anonymous" value="1">Make this post anonymous to other students</label></div><div class="controls"><label class="checkbox"><input type="checkbox" name="subscribe" value="1" checked="checked">Subscribe to this thread at the same time</label></div><div class="control-group"><button type="submit" class="btn course-forum-post-edit-save">Add post</button><span>&nbsp; &nbsp;</span><a href="javascript:void(0)" role="Button" class="course-forum-post-edit-cancel">Cancel</a></div></form></div></li></div></div></div></div></div><div style="display:none; position: fixed; bottom: 10px; right: 40px; width: 240px;" class="alert alert-info course-forum-hangouts-popup"><button type="button" data-action="hide" class="close">×</button>This looks like a great topic! Maybe you'd like to...<a style="margin-bottom:6px;" data-action="start" class="btn btn-info">Start a Google+ Hangout on this topic</a><p style="margin-bottom:10px; display:none;">Go to <a href="https://class.coursera.org/behavioralecon-001/wiki/view?page=ScheduleGoogleHangouts&from_popout" target="_blank">the scheduler page</a> to learn how, and post the URL to this thread after to let people know.</p><a data-action="join" class="btn btn-info">Join a Google+ Hangout on this topic</a><p style="margin-bottom:15px; display:none;">Hm, it looks like there's none yet on this topic, but you can <a href="https://class.coursera.org/behavioralecon-001/wiki/view?page=ScheduleGoogleHangouts&from_popout" target="_blank">go here</a> to check out all the upcoming hangouts or schedule your own.</p><a href="javascript:void(0)" data-action="nothanks">No, thanks, I'm not interested in hangouts.</a></div></div></div>

            </div>
        </div>
    </div>
        
    
        <script type="text/javascript" async="" src="./Timing_files/204.min.js"></script><script type="text/javascript" async="" src="./Timing_files/ga.js"></script><script src="./Timing_files/spark.js"></script>
    
    <script>
        $("[data-readme]").each(function() {
            window.ReadMe(this);
        });
    </script>

    <script src="./Timing_files/modal_focus.js" type="text/javascript"></script>
    <script src="./Timing_files/get_query_parameters.js" type="text/javascript"></script>
    <script src="./Timing_files/signature_track.js" type="text/javascript"></script>
    <script src="./Timing_files/item_list.js" type="text/javascript"></script>
    <script src="./Timing_files/navbar.js" type="text/javascript"></script>

    
    <script type="text/javascript">
        // SET UP THE MULTITRACKER
                window.logger = window.Log({level:"error"});
                window.multitracker = window.MultiTracker({logger:window.logger});
        window.multitracker.register('204', window._204 = window._204 || []);
        window.multitracker.register('ga', window._gaq = window._gaq || [], 'google');

        // SET UP GA and 204
        window._gaq.push(['_setAccount', 'UA-28377374-1']);
        window._gaq.push(['_setDomainName', 'coursera.org']);
        window._gaq.push(['_setAllowLinker', true]);  
        window._gaq.push(['_trackPageview']);
        
        window._204.push({key:"pageview", val:{}});

        // override our multitracker queues with the ga queue when it is ready
        (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        
          ga.onload = ga.onreadystatechange = function() {
              ga.onreadystatechange = ga.onload = null;
              window.multitracker.get('ga').queue = window._gaq;
          };
        })();

        // override our multitracker queues with the 204 queue when it is ready
        (function() {
          var a = document.createElement('script'); a.type = 'text/javascript'; a.async = true;
          a.src = 'https://eventing.coursera.org/204.min.js?client=spark&user=1484404';
          var s = document.getElementsByTagName('script')[0];
          s.parentNode.insertBefore(a, s);
          a.onload = a.onreadystatechange = function() {
              a.onreadystatechange = a.onload = null;
              window.multitracker.get('204').queue = window._204;
          };
        })();
    </script>

    <script>
      // Set up shared AB testing object
      (function() {
          var userId = $('[data-user-id]:first').attr('data-user-id');

          // Adapted from app/www/static/js/models/user.js
          if (userId == 0) {
              userId = window.Cookie.get('ab-session-id');
              if (!userId) {
                  userId =
                      (Math.random() * 10000000000).toFixed() + '-' +
                      (new Date()).getTime();
                  window.Cookie.set("ab-session-id", userId, { expires: 36500 });
              }
          }

                        window.ab = window.AB(userId, {debug:false, tracker:window.multitracker, logger:window.logger});
          
      })();
      // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();
    </script>

    <script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
  config: ["MMLorHTML.js"],
  
  styleSheets: [],
  styles: {},

  jax: ["input/TeX"],
  
  extensions: ["tex2jax.js"],

  preJax: null,
  postJax: null,

  preRemoveClass: "MathJax_Preview",

  showProcessingMessages: true,

  messageStyle: "none",
  
  displayAlign: "center",
  displayIndent: "0em",
  
  delayStartupUntil: "none",

  skipStartupTypeset: false,
  
  elements: [],
  
  tex2jax: {
	    inlineMath: [
	                 ['$$','$$'],      // uncomment this for standard TeX math delimiters
	                 ['\\(','\\)']
	                 ],

	                 displayMath: [
	                 ['\\[','\\]']
	                 ],

    skipTags: ["script","noscript","style","textarea","pre","code"],
    ignoreClass: "tex2jax_ignore",
    processClass: "tex2jax_process",
    processEscapes: false,
    processEnvironments: true,
    preview: "TeX"
    
  },
  
  mml2jax: {
    preview: "alttext"
    
  },
  
  jsMath2jax: {
    preview: "TeX"
    
  },

  TeX: {
    TagSide: "right",
    TagIndent: ".8em",
    MultLineWidth: "85%",
    Macros: {},

    extensions: ["AMSmath.js", "AMSsymbols.js"]
    
  },

  //============================================================================
  //
  //  These parameters control the MathML inupt jax.
  //
  MathML: {
    //
    //  This specifies whether to use TeX spacing or MathML spacing when the
    //  HTML-CSS output jax is used.
    //
    useMathMLspacing: false
  },
  
  //============================================================================
  //
  //  These parameters control the HTML-CSS output jax.
  //
  "HTML-CSS": {
    
    scale: 100,
    
    availableFonts: ["STIX","TeX"],
    
    preferredFont: "TeX",
    
    webFont: "TeX",
    
    imageFont: "TeX",
    
    undefinedFamily: "STIXGeneral,'Arial Unicode MS',serif",
      
    showMathMenu: true,

    styles: {},
    
    tooltip: {
      delayPost: 600,          // milliseconds delay before tooltip is posted after mouseover
      delayClear: 600,         // milliseconds delay before tooltip is cleared after mouseout
      offsetX: 10, offsetY: 5  // pixels to offset tooltip from mouse position
    }
  },
  
  //============================================================================
  //
  //  These parameters control the NativeMML output jax.
  //
  NativeMML: {

    scale: 100,

    showMathMenu: true,
    showMathMenuMSIE: true,

    styles: {}
  },
  
  MathMenu: {
    delay: 400,
    
    helpURL: "http://www.mathjax.org/help/user/",

    showRenderer: true,
    showFontMenu: false,
    showContext:  false,

    windowSettings: {
      status: "no", toolbar: "no", locationbar: "no", menubar: "no",
      directories: "no", personalbar: "no", resizable: "yes", scrollbars: "yes",
      width: 100, height: 50
    },
    
    styles: {}
    
  },

  MMLorHTML: {
    prefer: {
      MSIE:    "MML",
      Firefox: "MML",
      Opera:   "HTML",
      other:   "HTML"
    }
  }
});
</script>
<script type="text/javascript">
(function () {

  function loadMathJax() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://duqnjvq4jwr55.cloudfront.net/2.1/MathJax.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  window.loadOrRefreshMathJax = function(domId) {
    if (window.MathJax) {
      if (domId) {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, domId]);
      } else {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    } else {
      loadMathJax();
    }
  }
})();
</script>
    
    <script type="text/javascript">
        var site_base_url = "https:\/\/www.coursera.org\/";
        var site_static_asset_url = "https:\/\/dt5zaw6a98blc.cloudfront.net\/site-static\/";
        var spark_class_short_name = "algs4partI";
        var spark_class_id = 970302;
        var spark_class_url = "\/algs4partI-002";
        var spark_signature_url = "https:\/\/class.coursera.org\/algs4partI-002\/signature\/";
        
        var course_strings_name = "Algorithms, Part I";
        var student_full_name = "Vishal Juneja";
    </script>

    
<script type="text/javascript" src="./Timing_files/require.js"></script><script type="text/javascript" data-baseurl="https://d2wvvaown1ul17.cloudfront.net/site-static/8be561f5d56b20136c99ea175f81d0a2cc74b164/" data-version="8be561f5d56b20136c99ea175f81d0a2cc74b164" data-timestamp="1369679880735" data-debug="0" id="_require">(function(el) {
  //prevent throw
  require.onError = function() { };
  
  require.config({
    enforceDefine: true,
    waitSeconds: 14,
    baseUrl: el.getAttribute("data-baseurl"),
    urlArgs: el.getAttribute("data-debug") == "1" ? "v=" + el.getAttribute("data-timestamp") : "",
    shim: {
       "underscore": {
          exports: "_"
       },
       
       "backbone": {
          deps: ["underscore", "jquery"],
          exports: "Backbone",
          init: function(_, $) {
            _.noConflict();
            $.noConflict();
            return Backbone.noConflict();
          }
       }
    },
    paths: {
       "jquery":       "js/core/jquery",
       "underscore":   "js/core/underscore",
       "backbone":     "js/core/backbone"
    },
    callback: function() {
      require(["pages/forum/widgets"]);
    }
  });
})(document.getElementById("_require"));</script>




<div class="hide confirm-navigation modal"><div class="modal-header"><h3>Confirm Navigation</h3></div><div class="modal-body"><div class="confirm-navigation-message"></div><div>Are you sure you want to leave this page?</div></div><div class="modal-footer"><button data-modal-close="data-modal-close" class="btn confirm-navigation-stay">Stay on this Page</button><button data-modal-close="data-modal-close" class="btn btn-danger confirm-navigation-leave">Leave this Page</button></div></div><div class="coursera-async-message" style="display: none;"></div><div id="MathJax_Font_Test" style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-family: MathJax_Size1, monospace;"></div></body></html>