<!DOCTYPE html>
<!-- saved from url=(0076)https://class.coursera.org/algs4partI-002/assignment/part_results?part_id=17 -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Assignment Results | Algorithms, Part I</title>
<link rel="stylesheet" href="https://dt5zaw6a98blc.cloudfront.net/site-static/4944d1bc2a0d373afb4d94a4f292639ec1a3f100/css/spark.main.css">
<link rel="stylesheet" href="https://www.coursera.org/maestro/api/course/970302/course.css">
<link rel="icon" href="https://spark-public.s3.amazonaws.com/algs4partI/static/images/favicon.ico">
</head>

<body>
    <a href="https://class.coursera.org/algs4partI-002/assignment/part_results?part_id=17#course-page-content" class="hidden">Skip Navigation</a>
    <div class="hidden">
        This page features MathJax technology to render mathematical formulae.
        If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.
    </div>

    <h1 class="hidden">Algorithms, Part I</h1>

    

<div class="course-topbar container-fluid">

    <div class="row-fluid">
        
        <div class="span3">
          <a href="https://www.coursera.org/" class="course-topbar-logo" data-if-linkable="add-referrer"></a>
        </div>

        <div class="course-topbar-nav-container span9" style="float:right;">
            <h2 class="hidden">Top Navigation Bar</h2>

            <ul class="course-topbar-nav-list">
                <li class="course-topbar-nav-list-item">
                  <a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a>
                </li>

                                
                <li class="course-topbar-nav-list-item" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="" style="cursor:pointer;" data-popup-direction="se">
                                        <a data-user-id="1484404">  
                        Vishal Juneja 
                        <i class="icon-caret-down"></i>
                    </a>
                </li>
               
                            </ul>
        </div>
    </div>

    <div id="course-topbar-aboutus" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/jobs" target="_new" data-if-linkable="add-referrer">Jobs</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/team" target="_new" data-if-linkable="add-referrer">Team</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/contact" target="_new" data-if-linkable="add-referrer">Contact Us</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/" target="_new" data-if-linkable="add-referrer">About Us</a>
    </div>

    <div id="course-topbar-my" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/" target="_new">Courses</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/profile" target="_new">Profile</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/records" target="_new">Course Records</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/settings" target="_new">Settings</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/class/preferences">Course Preferences</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/auth/logout">Logout</a>
    </div>

</div>








<style type="text/css">
 


</style>
<div class="course-topbanner">
  <div class="course-topbanner-university-logo">
    <a href="https://www.coursera.org/princeton" class="coursera-university-color" target="_blank" data-if-linkable="add-referrer">
      <img src="./Assignment Results   Algorithms, Part I_files/university_logo" alt="University logo">
    </a>
  </div>

  
  <h1 class="course-topbanner-header">
      <a class="course-topbanner-name coursera-university-color" href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock">
        Algorithms, Part I      </a>
      <br>
      <span class="course-topbanner-instructor" style="">
        by Kevin  Wayne, Robert  Sedgewick      </span>
  </h1>
</div>
    
        <div class="container-fluid" style="position:relative;">
        <div class="row-fluid">
            <div id="course-page-sidebar">
                <div class="course-navbar-container">
	<a href="https://class.coursera.org/algs4partI-002/class/index">
	<img src="./Assignment Results   Algorithms, Part I_files/logo" style="width: 210px;height: 112px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.35);">
	</a>
<h2 class="hidden">Side Navigation Bar</h2>
<ul class="course-navbar-list">
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Home							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Syllabus							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=schedule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Schedule							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Lectures							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Exercises							</a>
						</li>
	
		
	<li class="course-navbar-item active">
								<a href="https://class.coursera.org/algs4partI-002/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Programming Assignments							<span class="course-navbar-selected-marker">(selected)</span></a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Job Interview Questions							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/forum/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Discussion Forums							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=errata" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Errata							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Surveys							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="http://algs4.cs.princeton.edu/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Booksite				<span class="icon-share"></span>			</a>
						</li>
	
	
		
		<li class="course-navbar-item">
		<a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">
			Join a Meetup
			<span class="icon-share"></span>
		</a>
	</li>
	
    </ul>

</div>
            </div>
            <div id="course-page-content">

                                <h2>Programming Assignment 1: Percolation | percolation.zip</h2>
<hr>

<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Wed-06-Mar 05:21:49</td></tr>
        <tr><td>Raw Score</td><td>100.00 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">20/20 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#009900">9/9 tests passed</font>

Raw score: <font color="#009900">100.00%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 16K
-rw-r--r-- 1 4.3K Mar  5 23:52 Percolation.java
-rw-r--r-- 1 2.8K Mar  5 23:52 PercolationStats.java
-rw-r--r-- 1 2.1K Mar  5 23:52 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Percolation.java
*-----------------------------------------------------------
================================================================

% javac PercolationStats.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Percolation.java:2:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:3:27: Array brackets at illegal position.
Percolation.java:5:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:6:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:12:30: '{' is not preceded with whitespace.
Percolation.java:23:12: 'for' is not followed by whitespace.
Percolation.java:23:18: '=' is not preceded with whitespace.
Percolation.java:23:19: '=' is not followed by whitespace.
Percolation.java:23:23: '&lt;=' is not preceded with whitespace.
Percolation.java:23:25: '&lt;=' is not followed by whitespace.
Percolation.java:23:32: '{' is not preceded with whitespace.
Percolation.java:24:31: ',' is not followed by whitespace.
Percolation.java:25:31: ',' is not followed by whitespace.
Percolation.java:27:33: ',' is not followed by whitespace.
Percolation.java:32:35: '{' is not preceded with whitespace.
Percolation.java:33:20: ',' is not followed by whitespace.
Percolation.java:37:11: 'if' is not followed by whitespace.
Percolation.java:37:35: ',' is not followed by whitespace.
Percolation.java:38:31: ',' is not followed by whitespace.
Percolation.java:39:33: ',' is not followed by whitespace.
Percolation.java:41:11: 'if' is not followed by whitespace.
Percolation.java:41:35: ',' is not followed by whitespace.
Percolation.java:42:31: ',' is not followed by whitespace.
Percolation.java:43:33: ',' is not followed by whitespace.
Percolation.java:45:11: 'if' is not followed by whitespace.
Percolation.java:45:35: ',' is not followed by whitespace.
Percolation.java:46:31: ',' is not followed by whitespace.
Percolation.java:47:33: ',' is not followed by whitespace.
Percolation.java:49:11: 'if' is not followed by whitespace.
Percolation.java:49:35: ',' is not followed by whitespace.
Percolation.java:50:31: ',' is not followed by whitespace.
Percolation.java:51:33: ',' is not followed by whitespace.
Percolation.java:56:40: '{' is not preceded with whitespace.
Percolation.java:57:20: ',' is not followed by whitespace.
Percolation.java:62:40: '{' is not preceded with whitespace.
Percolation.java:63:20: ',' is not followed by whitespace.
Percolation.java:64:32: Expression can be simplified.
Percolation.java:65:48: ',' is not followed by whitespace.
Percolation.java:70:11: 'if' is not followed by whitespace.
Percolation.java:70:35: ',' is not followed by whitespace.
Percolation.java:70:37: ')' is preceded with whitespace.
Percolation.java:74:13: Declaring variables, return values or parameters of type 'Boolean' is not allowed.
Percolation.java:74:67: '{' is not preceded with whitespace.
Percolation.java:75:11: 'if' is not followed by whitespace.
Percolation.java:75:31: '{' is not preceded with whitespace.
Percolation.java:76:13: Conditional logic can be removed.
Percolation.java:76:15: 'if' is not followed by whitespace.
Percolation.java:76:40: Expression can be simplified.
Percolation.java:80:18: 'if' is not followed by whitespace.
Percolation.java:80:39: '{' is not preceded with whitespace.
Percolation.java:81:13: Conditional logic can be removed.
Percolation.java:81:15: 'if' is not followed by whitespace.
Percolation.java:81:41: Expression can be simplified.
Percolation.java:85:18: 'if' is not followed by whitespace.
Percolation.java:85:37: '{' is not preceded with whitespace.
Percolation.java:86:13: Conditional logic can be removed.
Percolation.java:86:15: 'if' is not followed by whitespace.
Percolation.java:86:40: Expression can be simplified.
Percolation.java:90:18: 'if' is not followed by whitespace.
Percolation.java:90:40: '{' is not preceded with whitespace.
Percolation.java:91:13: Conditional logic can be removed.
Percolation.java:91:15: 'if' is not followed by whitespace.
Percolation.java:91:41: Expression can be simplified.
Percolation.java:101:34: '{' is not preceded with whitespace.
Percolation.java:102:12: 'for' is not followed by whitespace.
Percolation.java:102:18: '=' is not preceded with whitespace.
Percolation.java:102:19: '=' is not followed by whitespace.
Percolation.java:102:23: '&lt;' is not preceded with whitespace.
Percolation.java:102:24: '&lt;' is not followed by whitespace.
Percolation.java:102:28: ';' is preceded with whitespace.
Percolation.java:102:35: '{' is not preceded with whitespace.
Percolation.java:103:16: 'for' is not followed by whitespace.
Percolation.java:103:22: '=' is not preceded with whitespace.
Percolation.java:103:23: '=' is not followed by whitespace.
Percolation.java:103:27: '&lt;' is not preceded with whitespace.
Percolation.java:103:28: '&lt;' is not followed by whitespace.
Percolation.java:103:32: ';' is preceded with whitespace.
Percolation.java:103:39: '{' is not preceded with whitespace.
Percolation.java:109:40: '{' is not preceded with whitespace.
Percolation.java:116:13: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:116:41: '{' is not preceded with whitespace.
Percolation.java:120:43: '{' is not preceded with whitespace.
Percolation.java:127:18: ',' is not followed by whitespace.
Percolation.java:128:18: ',' is not followed by whitespace.
Percolation.java:129:18: ',' is not followed by whitespace.
Percolation.java:130:18: ',' is not followed by whitespace.
Percolation.java:131:18: ',' is not followed by whitespace.
Percolation.java:132:47: ',' is not followed by whitespace.
Percolation.java:133:47: ',' is not followed by whitespace.
Percolation.java:134:35: ',' is not followed by whitespace.
PercolationStats.java:3:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
PercolationStats.java:11:42: '{' is not preceded with whitespace.
PercolationStats.java:12:11: 'if' is not followed by whitespace.
PercolationStats.java:12:13: '&lt;=' is not preceded with whitespace.
PercolationStats.java:12:15: '&lt;=' is not followed by whitespace.
PercolationStats.java:12:21: '&lt;=' is not preceded with whitespace.
PercolationStats.java:12:23: '&lt;=' is not followed by whitespace.
PercolationStats.java:16:26: Array brackets at illegal position.
PercolationStats.java:18:12: 'for' is not followed by whitespace.
PercolationStats.java:18:18: '=' is not preceded with whitespace.
PercolationStats.java:18:19: '=' is not followed by whitespace.
PercolationStats.java:18:23: '&lt;' is not preceded with whitespace.
PercolationStats.java:18:24: '&lt;' is not followed by whitespace.
PercolationStats.java:18:31: '{' is not preceded with whitespace.
PercolationStats.java:21:18: 'while' is not followed by whitespace.
PercolationStats.java:21:35: '{' is not preceded with whitespace.
PercolationStats.java:24:19: 'if' is not followed by whitespace.
PercolationStats.java:24:32: ',' is not followed by whitespace.
PercolationStats.java:24:35: '{' is not preceded with whitespace.
PercolationStats.java:25:30: ',' is not followed by whitespace.
PercolationStats.java:34:12: 'for' is not followed by whitespace.
PercolationStats.java:34:18: '=' is not preceded with whitespace.
PercolationStats.java:34:19: '=' is not followed by whitespace.
PercolationStats.java:34:23: '&lt;' is not preceded with whitespace.
PercolationStats.java:34:24: '&lt;' is not followed by whitespace.
PercolationStats.java:34:44: '{' is not preceded with whitespace.
PercolationStats.java:40:11: 'if' is not followed by whitespace.
PercolationStats.java:40:32: '{' is not preceded with whitespace.
PercolationStats.java:46:16: 'for' is not followed by whitespace.
PercolationStats.java:46:22: '=' is not preceded with whitespace.
PercolationStats.java:46:23: '=' is not followed by whitespace.
PercolationStats.java:46:27: '&lt;' is not preceded with whitespace.
PercolationStats.java:46:28: '&lt;' is not followed by whitespace.
PercolationStats.java:46:48: '{' is not preceded with whitespace.
PercolationStats.java:56:25: '{' is not preceded with whitespace.
PercolationStats.java:61:27: '{' is not preceded with whitespace.
PercolationStats.java:66:33: '{' is not preceded with whitespace.
PercolationStats.java:71:33: '{' is not preceded with whitespace.
PercolationStats.java:76:43: '{' is not preceded with whitespace.
PercolationStats.java:81:74: '+' should be on a new line.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Percolation
*-----------------------------------------------------------
Running 13 total tests.

Test 1: Check whether exception is called if (i, j) are out of bounds
  *  N = 10, (i, j) = (0, 6)
  *  N = 10, (i, j) = (12, 6)
  *  N = 10, (i, j) = (11, 6)
  *  N = 10, (i, j) = (6, 0)
  *  N = 10, (i, j) = (6, 12)
  *  N = 10, (i, j) = (6, 11)
==&gt; passed

Tests 2 through 8 create a Percolation object using your code, then repeatedly
open sites using open(i, j). After each call to open, we check that isFull(),
isOpen(), and percolates() return the corrrect results.

Test 2: Open predetermined list of sites using files
  *  filename = input6.txt
  *  filename = input8.txt
  *  filename = input8-no.txt
  *  filename = input10-no.txt
  *  filename = greeting57.txt
  *  filename = heart25.txt
==&gt; passed

Test 3: Open random sites until system percolates (then test is terminated)
  *  N = 3
  *  N = 5
  *  N = 10
  *  N = 10
  *  N = 20
  *  N = 20
  *  N = 50
  *  N = 50
==&gt; passed

Test 4: Opens predetermined sites, but where N = 1 and N = 2 (corner case test)
  *  filename = input1.txt
  *  filename = input1-no.txt
  *  filename = input2.txt
  *  filename = input2-no.txt
==&gt; passed

Test 5: Check for backwash with predetermined sites
  *  filename = input20.txt
  *  filename = input10.txt
  *  filename = input50.txt
==&gt; passed

Test 6: Check for backwash with predetermined sites that havemultiple percolating paths
  *  filename = input3.txt
  *  filename = input4.txt
  *  filename = input7.txt
==&gt; passed

Test 7: Predetermined sites with very long percolating path
  *  filename = snake13.txt
  *  filename = snake101.txt
==&gt; passed

Test 8: Opens every site
  *  filename = input5.txt
==&gt; passed

Test 9: Create multiple Percolation objects at the same time
        (to make sure you didn't store data in static variables)
==&gt; passed

Test 10: Open predetermined list of sites using file
         but change the order in which methods are called
  *  filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  *  filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  *  filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  *  filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  *  filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  *  filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==&gt; passed

Test 11: Call all methods in random order until just before system percolates
  *  N = 3
  *  N = 5
  *  N = 7
  *  N = 10
  *  N = 20
  *  N = 50
==&gt; passed

Test 12: Call all methods in random order with inputs not prone to backwash
  *  N = 3
  *  N = 5
  *  N = 7
  *  N = 10
  *  N = 20
  *  N = 50
==&gt; passed

Test 13: Call all methods in random order until all sites are open
  *  N = 3
  *  N = 5
  *  N = 7
  *  N = 10
  *  N = 20
  *  N = 50
==&gt; passed


Total: 13/13 tests passed!
================================================================

Testing methods in PercolationStats
*-----------------------------------------------------------
Running 7 total tests.

Test 1a-1b: Test mean and standard deviation of percolation threshold

Creating new PercolationStats(100, 50)
------------------------------------------------

PercolationStats reports:
	mean():    0.590 (passed)
	stddev():  0.016 (passed)

	Overall result: passed

Creating new PercolationStats(200, 10)
------------------------------------------------

PercolationStats reports:
	mean():    0.592 (passed)
	stddev():  0.009 (passed)

	Overall result: passed


Test 1c-d: Test confidence interval of PercolationStats

Creating new PercolationStats(100, 50)
------------------------------------------------
PercolationStats reports:
	confidenceLo():    0.590 (passed)
	confidenceHi():  0.599 (passed)
==&gt; passed

Creating new PercolationStats(200, 10)
------------------------------------------------
PercolationStats reports:
	confidenceLo():    0.588 (passed)
	confidenceHi():  0.598 (passed)
==&gt; passed

Test 2: Check whether exception is called if N, T are out of bounds
  *  N = -23, T = 42
  *  N =  23, T =  0
  *  N = -42, T =  0
==&gt; passed

Test 3: Create multiple PercolationStats objects at the same time (to make sure you didn't store data in static variables)
==&gt; passed

Test 4: Call the methods of PercolationStats in either order.
  *  order = mean(), stddev()
  *  order = stddev(), mean()
==&gt; passed

Total: 7/7 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Measuring total memory usage as a function of grid size (max allowed: 17 N^2 + 128 N + 1024 bytes)

                 N        bytes
--------------------------------------------
=&gt; passed       64        72048         
=&gt; passed      256      1122672         
=&gt; passed      512      4473200         
=&gt; passed     1024     17858928         
==&gt; 4/4 tests passed


Estimated student memory = 17.00 N^2 + 32.00 N + 368.00  (R^2 = 1.000)

Total: 4/4 tests passed!

================================================================



Computing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Measuring total memory usage as a function of T (max allowed: 8 T + 128 bytes)

                 T        bytes
--------------------------------------------
=&gt; passed       16           80         
=&gt; passed       32           80         
=&gt; passed       64           80         
=&gt; passed      128           80         
==&gt; 4/4 tests passed


Estimated student memory = 80.00  (R^2 = 1.000)

Total: 4/4 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 9 total tests.

Tests 1a-1e: Measuring runtime and counting calls to connected(), union() and
             find() in WeightedQuickUnionUF.


For each N, a percolation object is generated and sites are randomly opened
until the system percolates. If you do not pass the correctness tests, these
results may be meaningless.

                                                 2 * connected()
                 N   seconds       union()              + find()        constructor
---------------------------------------------------------------------------------------------
=&gt; passed        8     0.00          126                   164                   2         
=&gt; passed       32     0.01         1530                  1866                   2         
=&gt; passed      128     0.04        22670                 28834                   2         
=&gt; passed      512     0.22       371032                474148                   2         
=&gt; passed     1024     0.62      1458534               1864838                   2         
==&gt; 5/5 tests passed

Running time in seconds depends on the machine on which the script runs,
and  varies each time that you submit. If one of the values in the table
violates the performance limits, the factor by which you failed the test
appears in parentheses. For example, (9.6x) in the union() column
indicates that it uses 9.6x too many calls.


Tests 2a-2d: This test checks whether you use a constant number of calls to
union(), connected(), and find() per call to open(), isFull(), and percolates().
The table below shows max(union(), connected(), find()) calls made during a
single call to open(), isFull(), and percolates().

                 N     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------
=&gt; passed       32        8               0               1               1         
=&gt; passed      128        8               0               1               1         
=&gt; passed      512        8               0               1               1         
=&gt; passed     1024        8               0               1               1         
==&gt; 4/4 tests passed

Total: 9/9 tests passed!
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Wed-06-Mar 04:16:21</td></tr>
        <tr><td>Raw Score</td><td>83.75 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#339900">15/20 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#009900">9/9 tests passed</font>

Raw score: <font color="#1D9900">83.75%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 12K
-rw-r--r-- 1 3.7K Mar  5 22:46 Percolation.java
-rw-r--r-- 1 2.8K Mar  5 22:46 PercolationStats.java
-rw-r--r-- 1 2.0K Mar  5 22:46 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Percolation.java
*-----------------------------------------------------------
================================================================

% javac PercolationStats.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Percolation.java:2:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:3:27: Array brackets at illegal position.
Percolation.java:5:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:6:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:11:30: '{' is not preceded with whitespace.
Percolation.java:20:12: 'for' is not followed by whitespace.
Percolation.java:20:18: '=' is not preceded with whitespace.
Percolation.java:20:19: '=' is not followed by whitespace.
Percolation.java:20:23: '&lt;=' is not preceded with whitespace.
Percolation.java:20:25: '&lt;=' is not followed by whitespace.
Percolation.java:20:32: '{' is not preceded with whitespace.
Percolation.java:21:31: ',' is not followed by whitespace.
Percolation.java:22:31: ',' is not followed by whitespace.
Percolation.java:27:35: '{' is not preceded with whitespace.
Percolation.java:28:20: ',' is not followed by whitespace.
Percolation.java:32:11: 'if' is not followed by whitespace.
Percolation.java:32:35: ',' is not followed by whitespace.
Percolation.java:33:31: ',' is not followed by whitespace.
Percolation.java:34:11: 'if' is not followed by whitespace.
Percolation.java:34:35: ',' is not followed by whitespace.
Percolation.java:35:31: ',' is not followed by whitespace.
Percolation.java:36:11: 'if' is not followed by whitespace.
Percolation.java:36:35: ',' is not followed by whitespace.
Percolation.java:37:31: ',' is not followed by whitespace.
Percolation.java:38:11: 'if' is not followed by whitespace.
Percolation.java:38:35: ',' is not followed by whitespace.
Percolation.java:39:31: ',' is not followed by whitespace.
Percolation.java:43:40: '{' is not preceded with whitespace.
Percolation.java:44:20: ',' is not followed by whitespace.
Percolation.java:46:11: 'if' is not followed by whitespace.
Percolation.java:51:40: '{' is not preceded with whitespace.
Percolation.java:52:20: ',' is not followed by whitespace.
Percolation.java:53:62: ',' is not followed by whitespace.
Percolation.java:61:13: Declaring variables, return values or parameters of type 'Boolean' is not allowed.
Percolation.java:61:67: '{' is not preceded with whitespace.
Percolation.java:62:11: 'if' is not followed by whitespace.
Percolation.java:62:31: '{' is not preceded with whitespace.
Percolation.java:63:13: Conditional logic can be removed.
Percolation.java:63:15: 'if' is not followed by whitespace.
Percolation.java:67:18: 'if' is not followed by whitespace.
Percolation.java:67:39: '{' is not preceded with whitespace.
Percolation.java:68:13: Conditional logic can be removed.
Percolation.java:68:15: 'if' is not followed by whitespace.
Percolation.java:72:18: 'if' is not followed by whitespace.
Percolation.java:72:37: '{' is not preceded with whitespace.
Percolation.java:73:13: Conditional logic can be removed.
Percolation.java:73:15: 'if' is not followed by whitespace.
Percolation.java:77:18: 'if' is not followed by whitespace.
Percolation.java:77:40: '{' is not preceded with whitespace.
Percolation.java:78:13: Conditional logic can be removed.
Percolation.java:78:15: 'if' is not followed by whitespace.
Percolation.java:88:34: '{' is not preceded with whitespace.
Percolation.java:89:12: 'for' is not followed by whitespace.
Percolation.java:89:18: '=' is not preceded with whitespace.
Percolation.java:89:19: '=' is not followed by whitespace.
Percolation.java:89:23: '&lt;' is not preceded with whitespace.
Percolation.java:89:24: '&lt;' is not followed by whitespace.
Percolation.java:89:28: ';' is preceded with whitespace.
Percolation.java:89:35: '{' is not preceded with whitespace.
Percolation.java:90:16: 'for' is not followed by whitespace.
Percolation.java:90:22: '=' is not preceded with whitespace.
Percolation.java:90:23: '=' is not followed by whitespace.
Percolation.java:90:27: '&lt;' is not preceded with whitespace.
Percolation.java:90:28: '&lt;' is not followed by whitespace.
Percolation.java:90:32: ';' is preceded with whitespace.
Percolation.java:90:39: '{' is not preceded with whitespace.
Percolation.java:96:40: '{' is not preceded with whitespace.
Percolation.java:103:13: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:103:41: '{' is not preceded with whitespace.
Percolation.java:107:43: '{' is not preceded with whitespace.
Percolation.java:109:18: ',' is not followed by whitespace.
Percolation.java:110:35: ',' is not followed by whitespace.
Percolation.java:111:35: ',' is not followed by whitespace.
PercolationStats.java:3:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
PercolationStats.java:11:42: '{' is not preceded with whitespace.
PercolationStats.java:12:11: 'if' is not followed by whitespace.
PercolationStats.java:12:13: '&lt;=' is not preceded with whitespace.
PercolationStats.java:12:15: '&lt;=' is not followed by whitespace.
PercolationStats.java:12:21: '&lt;=' is not preceded with whitespace.
PercolationStats.java:12:23: '&lt;=' is not followed by whitespace.
PercolationStats.java:16:26: Array brackets at illegal position.
PercolationStats.java:18:12: 'for' is not followed by whitespace.
PercolationStats.java:18:18: '=' is not preceded with whitespace.
PercolationStats.java:18:19: '=' is not followed by whitespace.
PercolationStats.java:18:23: '&lt;' is not preceded with whitespace.
PercolationStats.java:18:24: '&lt;' is not followed by whitespace.
PercolationStats.java:18:31: '{' is not preceded with whitespace.
PercolationStats.java:21:18: 'while' is not followed by whitespace.
PercolationStats.java:21:35: '{' is not preceded with whitespace.
PercolationStats.java:24:19: 'if' is not followed by whitespace.
PercolationStats.java:24:32: ',' is not followed by whitespace.
PercolationStats.java:24:35: '{' is not preceded with whitespace.
PercolationStats.java:25:30: ',' is not followed by whitespace.
PercolationStats.java:34:12: 'for' is not followed by whitespace.
PercolationStats.java:34:18: '=' is not preceded with whitespace.
PercolationStats.java:34:19: '=' is not followed by whitespace.
PercolationStats.java:34:23: '&lt;' is not preceded with whitespace.
PercolationStats.java:34:24: '&lt;' is not followed by whitespace.
PercolationStats.java:34:44: '{' is not preceded with whitespace.
PercolationStats.java:40:11: 'if' is not followed by whitespace.
PercolationStats.java:40:32: '{' is not preceded with whitespace.
PercolationStats.java:46:16: 'for' is not followed by whitespace.
PercolationStats.java:46:22: '=' is not preceded with whitespace.
PercolationStats.java:46:23: '=' is not followed by whitespace.
PercolationStats.java:46:27: '&lt;' is not preceded with whitespace.
PercolationStats.java:46:28: '&lt;' is not followed by whitespace.
PercolationStats.java:46:48: '{' is not preceded with whitespace.
PercolationStats.java:56:25: '{' is not preceded with whitespace.
PercolationStats.java:61:27: '{' is not preceded with whitespace.
PercolationStats.java:66:33: '{' is not preceded with whitespace.
PercolationStats.java:71:33: '{' is not preceded with whitespace.
PercolationStats.java:76:43: '{' is not preceded with whitespace.
PercolationStats.java:81:74: '+' should be on a new line.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Percolation
*-----------------------------------------------------------
Running 13 total tests.

Test 1: Check whether exception is called if (i, j) are out of bounds
  *  N = 10, (i, j) = (0, 6)
  *  N = 10, (i, j) = (12, 6)
  *  N = 10, (i, j) = (11, 6)
  *  N = 10, (i, j) = (6, 0)
  *  N = 10, (i, j) = (6, 12)
  *  N = 10, (i, j) = (6, 11)
==&gt; passed

Tests 2 through 8 create a Percolation object using your code, then repeatedly
open sites using open(i, j). After each call to open, we check that isFull(),
isOpen(), and percolates() return the corrrect results.

Test 2: Open predetermined list of sites using files
  *  filename = input6.txt
  *  filename = input8.txt
  *  filename = input8-no.txt
  *  filename = input10-no.txt
  *  filename = greeting57.txt
  *  filename = heart25.txt
==&gt; passed

Test 3: Open random sites until system percolates (then test is terminated)
  *  N = 3
  *  N = 5
  *  N = 10
  *  N = 10
  *  N = 20
  *  N = 20
  *  N = 50
  *  N = 50
==&gt; passed

Test 4: Opens predetermined sites, but where N = 1 and N = 2 (corner case test)
  *  filename = input1.txt
     percolates() returns wrong value [after 0 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input1-no.txt
     percolates() returns wrong value [after 0 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input2.txt
  *  filename = input2-no.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5: Check for backwash with predetermined sites
  *  filename = input20.txt
     isFull(18, 1) returns wrong value [after 231 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input10.txt
     isFull(9, 1) returns wrong value [after 56 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input50.txt
     isFull(22, 28) returns wrong value [after 1412 total calls to open()]
     - student   = true
     - reference = false
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6: Check for backwash with predetermined sites that havemultiple percolating paths
  *  filename = input3.txt
     isFull(3, 1) returns wrong value [after 4 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input4.txt
     isFull(4, 4) returns wrong value [after 7 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input7.txt
     isFull(6, 1) returns wrong value [after 12 total calls to open()]
     - student   = true
     - reference = false
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 7: Predetermined sites with very long percolating path
  *  filename = snake13.txt
  *  filename = snake101.txt
==&gt; passed

Test 8: Opens every site
  *  filename = input5.txt
==&gt; passed

Test 9: Create multiple Percolation objects at the same time
        (to make sure you didn't store data in static variables)
==&gt; passed

Test 10: Open predetermined list of sites using file
         but change the order in which methods are called
  *  filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  *  filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  *  filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  *  filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  *  filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  *  filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==&gt; passed

Test 11: Call all methods in random order until just before system percolates
  *  N = 3
  *  N = 5
  *  N = 7
  *  N = 10
  *  N = 20
  *  N = 50
==&gt; passed

Test 12: Call all methods in random order with inputs not prone to backwash
  *  N = 3
  *  N = 5
     isFull(5, 1) returns wrong value [after 17 total calls to open()]
     - student   = true
     - reference = false
  *  N = 7
     isFull(7, 1) returns wrong value [after 35 total calls to open()]
     - student   = true
     - reference = false
  *  N = 10
  *  N = 20
  *  N = 50
     isFull(50, 1) returns wrong value [after 2202 total calls to open()]
     - student   = true
     - reference = false
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Call all methods in random order until all sites are open
  *  N = 3
  *  N = 5
  *  N = 7
     isFull(5, 7) returns wrong value [after 36 total calls to open()]
     - student   = true
     - reference = false
  *  N = 10
     isFull(10, 9) returns wrong value [after 46 total calls to open()]
     - student   = true
     - reference = false
  *  N = 20
     isFull(15, 16) returns wrong value [after 225 total calls to open()]
     - student   = true
     - reference = false
  *  N = 50
     isFull(47, 31) returns wrong value [after 1455 total calls to open()]
     - student   = true
     - reference = false
==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 8/13 tests passed!
================================================================

Testing methods in PercolationStats
*-----------------------------------------------------------
Running 7 total tests.

Test 1a-1b: Test mean and standard deviation of percolation threshold

Creating new PercolationStats(100, 50)
------------------------------------------------

PercolationStats reports:
	mean():    0.592 (passed)
	stddev():  0.015 (passed)

	Overall result: passed

Creating new PercolationStats(200, 10)
------------------------------------------------

PercolationStats reports:
	mean():    0.592 (passed)
	stddev():  0.011 (passed)

	Overall result: passed


Test 1c-d: Test confidence interval of PercolationStats

Creating new PercolationStats(100, 50)
------------------------------------------------
PercolationStats reports:
	confidenceLo():    0.584 (passed)
	confidenceHi():  0.594 (passed)
==&gt; passed

Creating new PercolationStats(200, 10)
------------------------------------------------
PercolationStats reports:
	confidenceLo():    0.581 (passed)
	confidenceHi():  0.594 (passed)
==&gt; passed

Test 2: Check whether exception is called if N, T are out of bounds
  *  N = -23, T = 42
  *  N =  23, T =  0
  *  N = -42, T =  0
==&gt; passed

Test 3: Create multiple PercolationStats objects at the same time (to make sure you didn't store data in static variables)
==&gt; passed

Test 4: Call the methods of PercolationStats in either order.
  *  order = mean(), stddev()
  *  order = stddev(), mean()
==&gt; passed

Total: 7/7 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Measuring total memory usage as a function of grid size (max allowed: 17 N^2 + 128 N + 1024 bytes)

                 N        bytes
--------------------------------------------
=&gt; passed       64        67864         
=&gt; passed      256      1057048         
=&gt; passed      512      4210968         
=&gt; passed     1024     16810264         
==&gt; 4/4 tests passed


Estimated student memory = 16.00 N^2 + 32.00 N + 280.00  (R^2 = 1.000)

Total: 4/4 tests passed!

================================================================



Computing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Measuring total memory usage as a function of T (max allowed: 8 T + 128 bytes)

                 T        bytes
--------------------------------------------
=&gt; passed       16           80         
=&gt; passed       32           80         
=&gt; passed       64           80         
=&gt; passed      128           80         
==&gt; 4/4 tests passed


Estimated student memory = 80.00  (R^2 = 1.000)

Total: 4/4 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 9 total tests.

Tests 1a-1e: Measuring runtime and counting calls to connected(), union() and
             find() in WeightedQuickUnionUF.


For each N, a percolation object is generated and sites are randomly opened
until the system percolates. If you do not pass the correctness tests, these
results may be meaningless.

                                                 2 * connected()
                 N   seconds       union()              + find()        constructor
---------------------------------------------------------------------------------------------
=&gt; passed        8     0.00           67                   164                   1         
=&gt; passed       32     0.01          781                  1866                   1         
=&gt; passed      128     0.04        11399                 28834                   1         
=&gt; passed      512     0.22       185772                474148                   1         
=&gt; passed     1024     0.61       729779               1864838                   1         
==&gt; 5/5 tests passed

Running time in seconds depends on the machine on which the script runs,
and  varies each time that you submit. If one of the values in the table
violates the performance limits, the factor by which you failed the test
appears in parentheses. For example, (9.6x) in the union() column
indicates that it uses 9.6x too many calls.


Tests 2a-2d: This test checks whether you use a constant number of calls to
union(), connected(), and find() per call to open(), isFull(), and percolates().
The table below shows max(union(), connected(), find()) calls made during a
single call to open(), isFull(), and percolates().

                 N     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------
=&gt; passed       32        4               0               1               1         
=&gt; passed      128        4               0               1               1         
=&gt; passed      512        4               0               1               1         
=&gt; passed     1024        4               0               1               1         
==&gt; 4/4 tests passed

Total: 9/9 tests passed!
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Wed-06-Mar 04:12:57</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
        <tr><td>Feedback</td><td><pre>Compilation:  <font color="#990000">FAILED</font>

PercolationStats.java failed to compile, javac reports: <p>
</p><pre>PercolationStats.java:16: incompatible types
found   : java.lang.Double[]
required: java.lang.Double
        Double thresholds = new Double[T];
                            ^
PercolationStats.java:29: array required, but java.lang.Double found
            thresholds[i] = opencount/(N*N);
                      ^
PercolationStats.java:35: array required, but java.lang.Double found
            sum = sum + thresholds[i];
                                  ^
PercolationStats.java:35: operator + cannot be applied to double,&lt;any&gt;
            sum = sum + thresholds[i];
                  ^
PercolationStats.java:35: incompatible types
found   : &lt;nulltype&gt;
required: double
            sum = sum + thresholds[i];
                      ^
PercolationStats.java:47: array required, but java.lang.Double found
                sum = sum + (thresholds[i]-mean)*(thresholds[i]-mean);
                                       ^
PercolationStats.java:47: array required, but java.lang.Double found
                sum = sum + (thresholds[i]-mean)*(thresholds[i]-mean);
                                                            ^
7 errors</pre></pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Wed-06-Mar 03:57:41</td></tr>
        <tr><td>Raw Score</td><td>78.75 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#339900">15/20 tests passed</font>
Memory:       <font color="#999900">4/8 tests passed</font>
Timing:       <font color="#009900">9/9 tests passed</font>

Raw score: <font color="#299900">78.75%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 12K
-rw-r--r-- 1 3.7K Mar  5 22:27 Percolation.java
-rw-r--r-- 1 2.8K Mar  5 22:27 PercolationStats.java
-rw-r--r-- 1 2.0K Mar  5 22:27 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Percolation.java
*-----------------------------------------------------------
================================================================

% javac PercolationStats.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Percolation.java:2:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:3:27: Array brackets at illegal position.
Percolation.java:5:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:6:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:11:30: '{' is not preceded with whitespace.
Percolation.java:20:12: 'for' is not followed by whitespace.
Percolation.java:20:18: '=' is not preceded with whitespace.
Percolation.java:20:19: '=' is not followed by whitespace.
Percolation.java:20:23: '&lt;=' is not preceded with whitespace.
Percolation.java:20:25: '&lt;=' is not followed by whitespace.
Percolation.java:20:32: '{' is not preceded with whitespace.
Percolation.java:21:31: ',' is not followed by whitespace.
Percolation.java:22:31: ',' is not followed by whitespace.
Percolation.java:27:35: '{' is not preceded with whitespace.
Percolation.java:28:20: ',' is not followed by whitespace.
Percolation.java:32:11: 'if' is not followed by whitespace.
Percolation.java:32:35: ',' is not followed by whitespace.
Percolation.java:33:31: ',' is not followed by whitespace.
Percolation.java:34:11: 'if' is not followed by whitespace.
Percolation.java:34:35: ',' is not followed by whitespace.
Percolation.java:35:31: ',' is not followed by whitespace.
Percolation.java:36:11: 'if' is not followed by whitespace.
Percolation.java:36:35: ',' is not followed by whitespace.
Percolation.java:37:31: ',' is not followed by whitespace.
Percolation.java:38:11: 'if' is not followed by whitespace.
Percolation.java:38:35: ',' is not followed by whitespace.
Percolation.java:39:31: ',' is not followed by whitespace.
Percolation.java:43:40: '{' is not preceded with whitespace.
Percolation.java:44:20: ',' is not followed by whitespace.
Percolation.java:46:11: 'if' is not followed by whitespace.
Percolation.java:51:40: '{' is not preceded with whitespace.
Percolation.java:52:20: ',' is not followed by whitespace.
Percolation.java:53:62: ',' is not followed by whitespace.
Percolation.java:61:13: Declaring variables, return values or parameters of type 'Boolean' is not allowed.
Percolation.java:61:67: '{' is not preceded with whitespace.
Percolation.java:62:11: 'if' is not followed by whitespace.
Percolation.java:62:31: '{' is not preceded with whitespace.
Percolation.java:63:13: Conditional logic can be removed.
Percolation.java:63:15: 'if' is not followed by whitespace.
Percolation.java:67:18: 'if' is not followed by whitespace.
Percolation.java:67:39: '{' is not preceded with whitespace.
Percolation.java:68:13: Conditional logic can be removed.
Percolation.java:68:15: 'if' is not followed by whitespace.
Percolation.java:72:18: 'if' is not followed by whitespace.
Percolation.java:72:37: '{' is not preceded with whitespace.
Percolation.java:73:13: Conditional logic can be removed.
Percolation.java:73:15: 'if' is not followed by whitespace.
Percolation.java:77:18: 'if' is not followed by whitespace.
Percolation.java:77:40: '{' is not preceded with whitespace.
Percolation.java:78:13: Conditional logic can be removed.
Percolation.java:78:15: 'if' is not followed by whitespace.
Percolation.java:88:34: '{' is not preceded with whitespace.
Percolation.java:89:12: 'for' is not followed by whitespace.
Percolation.java:89:18: '=' is not preceded with whitespace.
Percolation.java:89:19: '=' is not followed by whitespace.
Percolation.java:89:23: '&lt;' is not preceded with whitespace.
Percolation.java:89:24: '&lt;' is not followed by whitespace.
Percolation.java:89:28: ';' is preceded with whitespace.
Percolation.java:89:35: '{' is not preceded with whitespace.
Percolation.java:90:16: 'for' is not followed by whitespace.
Percolation.java:90:22: '=' is not preceded with whitespace.
Percolation.java:90:23: '=' is not followed by whitespace.
Percolation.java:90:27: '&lt;' is not preceded with whitespace.
Percolation.java:90:28: '&lt;' is not followed by whitespace.
Percolation.java:90:32: ';' is preceded with whitespace.
Percolation.java:90:39: '{' is not preceded with whitespace.
Percolation.java:96:40: '{' is not preceded with whitespace.
Percolation.java:103:13: Declaring variables, return values or parameters of type 'Integer' is not allowed.
Percolation.java:103:41: '{' is not preceded with whitespace.
Percolation.java:107:43: '{' is not preceded with whitespace.
Percolation.java:109:18: ',' is not followed by whitespace.
Percolation.java:110:35: ',' is not followed by whitespace.
Percolation.java:111:35: ',' is not followed by whitespace.
PercolationStats.java:3:13: Declaring variables, return values or parameters of type 'Double' is not allowed.
PercolationStats.java:3:30: Array brackets at illegal position.
PercolationStats.java:4:19: Declaring variables, return values or parameters of type 'Integer' is not allowed.
PercolationStats.java:12:42: '{' is not preceded with whitespace.
PercolationStats.java:13:11: 'if' is not followed by whitespace.
PercolationStats.java:13:13: '&lt;=' is not preceded with whitespace.
PercolationStats.java:13:15: '&lt;=' is not followed by whitespace.
PercolationStats.java:13:21: '&lt;=' is not preceded with whitespace.
PercolationStats.java:13:23: '&lt;=' is not followed by whitespace.
PercolationStats.java:19:12: 'for' is not followed by whitespace.
PercolationStats.java:19:18: '=' is not preceded with whitespace.
PercolationStats.java:19:19: '=' is not followed by whitespace.
PercolationStats.java:19:23: '&lt;' is not preceded with whitespace.
PercolationStats.java:19:24: '&lt;' is not followed by whitespace.
PercolationStats.java:19:31: '{' is not preceded with whitespace.
PercolationStats.java:22:18: 'while' is not followed by whitespace.
PercolationStats.java:22:35: '{' is not preceded with whitespace.
PercolationStats.java:25:19: 'if' is not followed by whitespace.
PercolationStats.java:25:32: ',' is not followed by whitespace.
PercolationStats.java:25:35: '{' is not preceded with whitespace.
PercolationStats.java:26:30: ',' is not followed by whitespace.
PercolationStats.java:35:12: 'for' is not followed by whitespace.
PercolationStats.java:35:18: '=' is not preceded with whitespace.
PercolationStats.java:35:19: '=' is not followed by whitespace.
PercolationStats.java:35:23: '&lt;' is not preceded with whitespace.
PercolationStats.java:35:24: '&lt;' is not followed by whitespace.
PercolationStats.java:35:44: '{' is not preceded with whitespace.
PercolationStats.java:41:11: 'if' is not followed by whitespace.
PercolationStats.java:41:32: '{' is not preceded with whitespace.
PercolationStats.java:47:16: 'for' is not followed by whitespace.
PercolationStats.java:47:22: '=' is not preceded with whitespace.
PercolationStats.java:47:23: '=' is not followed by whitespace.
PercolationStats.java:47:27: '&lt;' is not preceded with whitespace.
PercolationStats.java:47:28: '&lt;' is not followed by whitespace.
PercolationStats.java:47:48: '{' is not preceded with whitespace.
PercolationStats.java:57:25: '{' is not preceded with whitespace.
PercolationStats.java:62:27: '{' is not preceded with whitespace.
PercolationStats.java:67:33: '{' is not preceded with whitespace.
PercolationStats.java:72:33: '{' is not preceded with whitespace.
PercolationStats.java:77:43: '{' is not preceded with whitespace.
PercolationStats.java:82:74: '+' should be on a new line.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in Percolation
*-----------------------------------------------------------
Running 13 total tests.

Test 1: Check whether exception is called if (i, j) are out of bounds
  *  N = 10, (i, j) = (0, 6)
  *  N = 10, (i, j) = (12, 6)
  *  N = 10, (i, j) = (11, 6)
  *  N = 10, (i, j) = (6, 0)
  *  N = 10, (i, j) = (6, 12)
  *  N = 10, (i, j) = (6, 11)
==&gt; passed

Tests 2 through 8 create a Percolation object using your code, then repeatedly
open sites using open(i, j). After each call to open, we check that isFull(),
isOpen(), and percolates() return the corrrect results.

Test 2: Open predetermined list of sites using files
  *  filename = input6.txt
  *  filename = input8.txt
  *  filename = input8-no.txt
  *  filename = input10-no.txt
  *  filename = greeting57.txt
  *  filename = heart25.txt
==&gt; passed

Test 3: Open random sites until system percolates (then test is terminated)
  *  N = 3
  *  N = 5
  *  N = 10
  *  N = 10
  *  N = 20
  *  N = 20
  *  N = 50
  *  N = 50
==&gt; passed

Test 4: Opens predetermined sites, but where N = 1 and N = 2 (corner case test)
  *  filename = input1.txt
     percolates() returns wrong value [after 0 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input1-no.txt
     percolates() returns wrong value [after 0 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input2.txt
  *  filename = input2-no.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5: Check for backwash with predetermined sites
  *  filename = input20.txt
     isFull(18, 1) returns wrong value [after 231 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input10.txt
     isFull(9, 1) returns wrong value [after 56 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input50.txt
     isFull(22, 28) returns wrong value [after 1412 total calls to open()]
     - student   = true
     - reference = false
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6: Check for backwash with predetermined sites that havemultiple percolating paths
  *  filename = input3.txt
     isFull(3, 1) returns wrong value [after 4 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input4.txt
     isFull(4, 4) returns wrong value [after 7 total calls to open()]
     - student   = true
     - reference = false
  *  filename = input7.txt
     isFull(6, 1) returns wrong value [after 12 total calls to open()]
     - student   = true
     - reference = false
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 7: Predetermined sites with very long percolating path
  *  filename = snake13.txt
  *  filename = snake101.txt
==&gt; passed

Test 8: Opens every site
  *  filename = input5.txt
==&gt; passed

Test 9: Create multiple Percolation objects at the same time
        (to make sure you didn't store data in static variables)
==&gt; passed

Test 10: Open predetermined list of sites using file
         but change the order in which methods are called
  *  filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  *  filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  *  filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  *  filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  *  filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  *  filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==&gt; passed

Test 11: Call all methods in random order until just before system percolates
  *  N = 3
  *  N = 5
  *  N = 7
  *  N = 10
  *  N = 20
  *  N = 50
==&gt; passed

Test 12: Call all methods in random order with inputs not prone to backwash
  *  N = 3
  *  N = 5
     isFull(5, 1) returns wrong value [after 15 total calls to open()]
     - student   = true
     - reference = false
  *  N = 7
  *  N = 10
  *  N = 20
     isFull(20, 1) returns wrong value [after 346 total calls to open()]
     - student   = true
     - reference = false
  *  N = 50
     isFull(50, 1) returns wrong value [after 2053 total calls to open()]
     - student   = true
     - reference = false
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Call all methods in random order until all sites are open
  *  N = 3
  *  N = 5
     isFull(5, 2) returns wrong value [after 14 total calls to open()]
     - student   = true
     - reference = false
  *  N = 7
     isFull(7, 2) returns wrong value [after 20 total calls to open()]
     - student   = true
     - reference = false
  *  N = 10
     isFull(10, 1) returns wrong value [after 56 total calls to open()]
     - student   = true
     - reference = false
  *  N = 20
     isFull(11, 5) returns wrong value [after 223 total calls to open()]
     - student   = true
     - reference = false
  *  N = 50
     isFull(41, 37) returns wrong value [after 1507 total calls to open()]
     - student   = true
     - reference = false
==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 8/13 tests passed!
================================================================

Testing methods in PercolationStats
*-----------------------------------------------------------
Running 7 total tests.

Test 1a-1b: Test mean and standard deviation of percolation threshold

Creating new PercolationStats(100, 50)
------------------------------------------------

PercolationStats reports:
	mean():    0.592 (passed)
	stddev():  0.018 (passed)

	Overall result: passed

Creating new PercolationStats(200, 10)
------------------------------------------------

PercolationStats reports:
	mean():    0.597 (passed)
	stddev():  0.009 (passed)

	Overall result: passed


Test 1c-d: Test confidence interval of PercolationStats

Creating new PercolationStats(100, 50)
------------------------------------------------
PercolationStats reports:
	confidenceLo():    0.588 (passed)
	confidenceHi():  0.596 (passed)
==&gt; passed

Creating new PercolationStats(200, 10)
------------------------------------------------
PercolationStats reports:
	confidenceLo():    0.586 (passed)
	confidenceHi():  0.598 (passed)
==&gt; passed

Test 2: Check whether exception is called if N, T are out of bounds
  *  N = -23, T = 42
  *  N =  23, T =  0
  *  N = -42, T =  0
==&gt; passed

Test 3: Create multiple PercolationStats objects at the same time (to make sure you didn't store data in static variables)
==&gt; passed

Test 4: Call the methods of PercolationStats in either order.
  *  order = mean(), stddev()
  *  order = stddev(), mean()
==&gt; passed

Total: 7/7 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Measuring total memory usage as a function of grid size (max allowed: 17 N^2 + 128 N + 1024 bytes)

                 N        bytes
--------------------------------------------
=&gt; passed       64        67864         
=&gt; passed      256      1057048         
=&gt; passed      512      4210968         
=&gt; passed     1024     16810264         
==&gt; 4/4 tests passed


Estimated student memory = 16.00 N^2 + 32.00 N + 280.00  (R^2 = 1.000)

Total: 4/4 tests passed!

================================================================



Computing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Measuring total memory usage as a function of T (max allowed: 8 T + 128 bytes)

                 T        bytes
--------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>       16          624   (2.4x)
=&gt; <font color="#990000"><b>FAILED</b></font>       32         1136   (3.0x)
=&gt; <font color="#990000"><b>FAILED</b></font>       64         2160   (3.4x)
=&gt; <font color="#990000"><b>FAILED</b></font>      128         4208   (3.7x)
==&gt; 0/4 tests passed


Estimated student memory = 32.00 T + 112.00  (R^2 = 1.000)

Total: 0/4 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 9 total tests.

Tests 1a-1e: Measuring runtime and counting calls to connected(), union() and
             find() in WeightedQuickUnionUF.


For each N, a percolation object is generated and sites are randomly opened
until the system percolates. If you do not pass the correctness tests, these
results may be meaningless.

                                                 2 * connected()
                 N   seconds       union()              + find()        constructor
---------------------------------------------------------------------------------------------
=&gt; passed        8     0.00           67                   164                   1         
=&gt; passed       32     0.01          781                  1866                   1         
=&gt; passed      128     0.04        11399                 28834                   1         
=&gt; passed      512     0.19       185772                474148                   1         
=&gt; passed     1024     0.55       729779               1864838                   1         
==&gt; 5/5 tests passed

Running time in seconds depends on the machine on which the script runs,
and  varies each time that you submit. If one of the values in the table
violates the performance limits, the factor by which you failed the test
appears in parentheses. For example, (9.6x) in the union() column
indicates that it uses 9.6x too many calls.


Tests 2a-2d: This test checks whether you use a constant number of calls to
union(), connected(), and find() per call to open(), isFull(), and percolates().
The table below shows max(union(), connected(), find()) calls made during a
single call to open(), isFull(), and percolates().

                 N     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------
=&gt; passed       32        4               0               1               1         
=&gt; passed      128        4               0               1               1         
=&gt; passed      512        4               0               1               1         
=&gt; passed     1024        4               0               1               1         
==&gt; 4/4 tests passed

Total: 9/9 tests passed!
================================================================



</pre> </td></tr>
    </tbody>
</table>

            </div>
        </div>
    </div>
        
        <script type="text/javascript" async="" src="./Assignment Results   Algorithms, Part I_files/204.min.js"></script><script type="text/javascript" async="" src="./Assignment Results   Algorithms, Part I_files/ga.js"></script><script src="./Assignment Results   Algorithms, Part I_files/spark.js"></script>
    
    <script>
        $("[data-readme]").each(function() {
            window.ReadMe(this);
        });
    </script>
    <script src="./Assignment Results   Algorithms, Part I_files/modal_focus.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/get_query_parameters.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/signature_track.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/item_list.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/navbar.js" type="text/javascript"></script>

    
    <script type="text/javascript">
        // SET UP THE MULTITRACKER
                window.logger = window.Log({level:"error"});
                window.multitracker = window.MultiTracker({logger:window.logger});
        window.multitracker.register('204', window._204 = window._204 || []);
        window.multitracker.register('ga', window._gaq = window._gaq || [], 'google');

        // SET UP GA and 204
        window._gaq.push(['_setAccount', 'UA-28377374-1']);
        window._gaq.push(['_setDomainName', 'coursera.org']);
        window._gaq.push(['_setAllowLinker', true]);  
        window._gaq.push(['_trackPageview']);
        
        window._204.push({key:"pageview", val:{}});

        // override our multitracker queues with the ga queue when it is ready
        (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        
          ga.onload = ga.onreadystatechange = function() {
              ga.onreadystatechange = ga.onload = null;
              window.multitracker.get('ga').queue = window._gaq;
          };
        })();

        // override our multitracker queues with the 204 queue when it is ready
        (function() {
          var a = document.createElement('script'); a.type = 'text/javascript'; a.async = true;
          a.src = 'https://eventing.coursera.org/204.min.js?client=spark&user=1484404';
          var s = document.getElementsByTagName('script')[0];
          s.parentNode.insertBefore(a, s);
          a.onload = a.onreadystatechange = function() {
              a.onreadystatechange = a.onload = null;
              window.multitracker.get('204').queue = window._204;
          };
        })();
    </script>

    <script>
      // Set up shared AB testing object
      (function() {
          var userId = $('[data-user-id]:first').attr('data-user-id');

          // Adapted from app/www/static/js/models/user.js
          if (userId == 0) {
              userId = window.cookie.get('ab-session-id');
              if (!userId) {
                  userId =
                      (Math.random() * 10000000000).toFixed() + '-' +
                      (new Date()).getTime();
                  cookie.set("ab-session-id", userId, { expires: 36500 });
              }
          }

                        window.ab = window.AB(userId, {debug:false, tracker:window.multitracker, logger:window.logger});
          
      })();
    </script>

    <script type="text/x-mathjax-config">
MathJax.Hub.Config({
  config: ["MMLorHTML.js"],
  
  styleSheets: [],
  styles: {},

  jax: ["input/TeX"],
  
  extensions: ["tex2jax.js"],

  preJax: null,
  postJax: null,

  preRemoveClass: "MathJax_Preview",

  showProcessingMessages: true,

  messageStyle: "none",
  
  displayAlign: "center",
  displayIndent: "0em",
  
  delayStartupUntil: "none",

  skipStartupTypeset: false,
  
  elements: [],
  
  tex2jax: {
	    inlineMath: [
	                 ['$$','$$'],      // uncomment this for standard TeX math delimiters
	                 ['\\(','\\)']
	                 ],

	                 displayMath: [
	                 ['\\[','\\]']
	                 ],

    skipTags: ["script","noscript","style","textarea","pre","code"],
    ignoreClass: "tex2jax_ignore",
    processClass: "tex2jax_process",
    processEscapes: false,
    processEnvironments: true,
    preview: "TeX"
    
  },
  
  mml2jax: {
    preview: "alttext"
    
  },
  
  jsMath2jax: {
    preview: "TeX"
    
  },

  TeX: {
    TagSide: "right",
    TagIndent: ".8em",
    MultLineWidth: "85%",
    Macros: {},

    extensions: ["AMSmath.js", "AMSsymbols.js"]
    
  },

  //============================================================================
  //
  //  These parameters control the MathML inupt jax.
  //
  MathML: {
    //
    //  This specifies whether to use TeX spacing or MathML spacing when the
    //  HTML-CSS output jax is used.
    //
    useMathMLspacing: false
  },
  
  //============================================================================
  //
  //  These parameters control the HTML-CSS output jax.
  //
  "HTML-CSS": {
    
    scale: 100,
    
    availableFonts: ["STIX","TeX"],
    
    preferredFont: "TeX",
    
    webFont: "TeX",
    
    imageFont: "TeX",
    
    undefinedFamily: "STIXGeneral,'Arial Unicode MS',serif",
      
    showMathMenu: true,

    styles: {},
    
    tooltip: {
      delayPost: 600,          // milliseconds delay before tooltip is posted after mouseover
      delayClear: 600,         // milliseconds delay before tooltip is cleared after mouseout
      offsetX: 10, offsetY: 5  // pixels to offset tooltip from mouse position
    }
  },
  
  //============================================================================
  //
  //  These parameters control the NativeMML output jax.
  //
  NativeMML: {

    scale: 100,

    showMathMenu: true,
    showMathMenuMSIE: true,

    styles: {}
  },
  
  MathMenu: {
    delay: 400,
    
    helpURL: "http://www.mathjax.org/help/user/",

    showRenderer: true,
    showFontMenu: false,
    showContext:  false,

    windowSettings: {
      status: "no", toolbar: "no", locationbar: "no", menubar: "no",
      directories: "no", personalbar: "no", resizable: "yes", scrollbars: "yes",
      width: 100, height: 50
    },
    
    styles: {}
    
  },

  MMLorHTML: {
    prefer: {
      MSIE:    "MML",
      Firefox: "MML",
      Opera:   "HTML",
      other:   "HTML"
    }
  }
});
</script>
<script type="text/javascript">
(function () {

  function loadMathJax() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://duqnjvq4jwr55.cloudfront.net/2.1/MathJax.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  window.loadOrRefreshMathJax = function(domId) {
    if (window.MathJax) {
      if (domId) {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, domId]);
      } else {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    } else {
      loadMathJax();
    }
  }
})();
</script>
    
    <script type="text/javascript">
        var site_base_url = "https:\/\/www.coursera.org\/";
        var site_static_asset_url = "https:\/\/dt5zaw6a98blc.cloudfront.net\/site-static\/";
        var spark_class_short_name = "algs4partI";
        var spark_class_id = 970302;
        var spark_class_url = "\/algs4partI-002";
        var spark_signature_url = "https:\/\/class.coursera.org\/algs4partI-002\/signature\/";
        
        var course_strings_name = "Algorithms, Part I";
        var student_full_name = "Vishal Juneja";
    </script>

    




</body></html>