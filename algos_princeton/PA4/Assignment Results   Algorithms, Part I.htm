<!DOCTYPE html>
<!-- saved from url=(0075)https://class.coursera.org/algs4partI-002/assignment/part_results?part_id=8 -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Assignment Results | Algorithms, Part I</title>
<link rel="stylesheet" href="https://dt5zaw6a98blc.cloudfront.net/site-static/8be561f5d56b20136c99ea175f81d0a2cc74b164/css/spark.main.css">
<link rel="stylesheet" href="https://www.coursera.org/maestro/api/course/970302/course.css">
<link rel="icon" href="https://spark-public.s3.amazonaws.com/algs4partI/static/images/favicon.ico">
</head>

<body>
    <a href="https://class.coursera.org/algs4partI-002/assignment/part_results?part_id=8#course-page-content" class="hidden">Skip Navigation</a>
    <div class="hidden">
        This page features MathJax technology to render mathematical formulae.
        If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.
    </div>

    <h1 class="hidden">Algorithms, Part I</h1>

    

<div class="course-topbar container-fluid" role="banner">

    <div class="row-fluid">
        
        <div class="span3">
          <a href="https://www.coursera.org/" class="course-topbar-logo" data-if-linkable="add-referrer"></a>
        </div>

        <div class="course-topbar-nav-container span9" style="float:right;">
            <h2 class="hidden">Top Navigation Bar</h2>

            <ul class="course-topbar-nav-list">
                <li class="course-topbar-nav-list-item">
                  <a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a>
                </li>

                                
                <li class="course-topbar-nav-list-item" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="" style="cursor:pointer;" data-popup-direction="se">
                                        <a data-user-id="1484404">  
                        Vishal Juneja 
                        <i class="icon-caret-down"></i>
                    </a>
                </li>
               
                            </ul>
        </div>
    </div>

    <div id="course-topbar-aboutus" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/jobs" target="_new" data-if-linkable="add-referrer">Jobs</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/team" target="_new" data-if-linkable="add-referrer">Team</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/contact" target="_new" data-if-linkable="add-referrer">Contact Us</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/" target="_new" data-if-linkable="add-referrer">About Us</a>
    </div>

    <div id="course-topbar-my" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/" target="_new">Courses</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/profile" target="_new">Profile</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/records" target="_new">Course Records</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/settings" target="_new">Settings</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/class/preferences">Course Preferences</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/algs4partI-002/auth/logout">Logout</a>
    </div>

</div>








<style type="text/css">
 


</style>
<div class="course-topbanner">
  <div class="course-topbanner-university-logo">
    <a href="https://www.coursera.org/princeton" class="coursera-university-color" target="_blank" data-if-linkable="add-referrer">
      <img src="./Assignment Results   Algorithms, Part I_files/university_logo" alt="University logo">
    </a>
  </div>

  
  <h1 class="course-topbanner-header">
      <a class="course-topbanner-name coursera-university-color" href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock">
        Algorithms, Part I      </a>
      <br>
      <span class="course-topbanner-instructor" style="">
        by Kevin  Wayne, Robert  Sedgewick      </span>
  </h1>
</div>
    
        <div class="container-fluid" style="position:relative;">
        <div class="row-fluid">
            <div id="course-page-sidebar" role="navigation">
                <div class="course-navbar-container">
	<a href="https://class.coursera.org/algs4partI-002/class/index">
	<img src="./Assignment Results   Algorithms, Part I_files/logo" style="width: 210px;height: 112px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.35);">
	</a>
<h2 class="hidden">Side Navigation Bar</h2>
<ul class="course-navbar-list">
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/class/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Home							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Syllabus							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=schedule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Schedule							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Lectures							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Exercises							</a>
						</li>
	
		
	<li class="course-navbar-item active">
								<a href="https://class.coursera.org/algs4partI-002/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Programming Assignments							<span class="course-navbar-selected-marker">(selected)</span></a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Job Interview Questions							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/forum/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Discussion Forums							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/wiki/view?page=errata" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Errata							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/algs4partI-002/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Surveys							</a>
						</li>
	
		
	<li class="course-navbar-item">
								</li>
	
		
	<li class="course-navbar-item">
								<a href="http://algs4.cs.princeton.edu/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Booksite				<span class="icon-share"></span>			</a>
						</li>
	
	
		
		<li class="course-navbar-item">
		<a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">
			Join a Meetup
			<span class="icon-share"></span>
		</a>
	</li>
	
    </ul>

</div>
            </div>
            <div id="course-page-content" role="main">
                                <h2>Programming Assignment 5: Kd-Trees | kdtree.zip</h2>
<hr>

<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sun-31-Mar 21:32:26</td></tr>
        <tr><td>Raw Score</td><td>83.78 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">20/20 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#995200">13/37 tests passed</font>

Raw score: <font color="#1D9900">83.78%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 20K
-rw-r--r-- 1 9.3K Mar 31 16:03 KdTree.java
-rw-r--r-- 1 2.0K Mar 31 16:03 PointSET.java
-rw-r--r-- 1 2.6K Mar 31 16:03 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac PointSET.java
*-----------------------------------------------------------
================================================================

% javac KdTree.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
PointSET.java:9:22: '{' is not preceded with whitespace.
PointSET.java:14:29: '{' is not preceded with whitespace.
PointSET.java:15:11: 'if' is not followed by whitespace.
PointSET.java:20:22: '{' is not preceded with whitespace.
PointSET.java:25:34: '{' is not preceded with whitespace.
PointSET.java:30:39: '{' is not preceded with whitespace.
PointSET.java:35:23: '{' is not preceded with whitespace.
PointSET.java:37:14: 'while' is not followed by whitespace.
PointSET.java:37:32: '{' is not preceded with whitespace.
PointSET.java:44:48: '{' is not preceded with whitespace.
PointSET.java:47:14: 'while' is not followed by whitespace.
PointSET.java:47:32: '{' is not preceded with whitespace.
PointSET.java:49:15: 'if' is not followed by whitespace.
PointSET.java:55:38: '{' is not preceded with whitespace.
PointSET.java:56:11: 'if' is not followed by whitespace.
PointSET.java:60:14: 'while' is not followed by whitespace.
PointSET.java:60:32: '{' is not preceded with whitespace.
PointSET.java:63:15: 'if' is not followed by whitespace.
PointSET.java:63:27: '{' is not preceded with whitespace.
KdTree.java:9:5: Static variable definition in wrong order.
KdTree.java:9:20: Declaring variables, return values or parameters of type 'Double' is not allowed.
KdTree.java:10:5: Static variable definition in wrong order.
KdTree.java:19:31: '{' is not preceded with whitespace.
KdTree.java:24:38: ',' is not followed by whitespace.
KdTree.java:24:40: ',' is not followed by whitespace.
KdTree.java:24:42: ',' is not followed by whitespace.
KdTree.java:27:59: '{' is not preceded with whitespace.
KdTree.java:34:15: 'if' is not followed by whitespace.
KdTree.java:34:22: '{' is not preceded with whitespace.
KdTree.java:35:19: 'if' is not followed by whitespace.
KdTree.java:35:24: '&gt;=' is not preceded with whitespace.
KdTree.java:35:26: '&gt;=' is not followed by whitespace.
KdTree.java:50:19: 'if' is not followed by whitespace.
KdTree.java:50:24: '&gt;=' is not preceded with whitespace.
KdTree.java:50:26: '&gt;=' is not followed by whitespace.
KdTree.java:65: Line is longer than 85 characters.
KdTree.java:68:39: '{' is not preceded with whitespace.
KdTree.java:75:49: '{' is not preceded with whitespace.
KdTree.java:76:15: 'if' is not followed by whitespace.
KdTree.java:76:18: '{' is not preceded with whitespace.
KdTree.java:77:19: 'if' is not followed by whitespace.
KdTree.java:78:24: 'if' is not followed by whitespace.
KdTree.java:81:19: 'if' is not followed by whitespace.
KdTree.java:82:24: 'if' is not followed by whitespace.
KdTree.java:89:20: '{' is not preceded with whitespace.
KdTree.java:94:29: '{' is not preceded with whitespace.
KdTree.java:99:22: '{' is not preceded with whitespace.
KdTree.java:104:34: '{' is not preceded with whitespace.
KdTree.java:105:11: 'if' is not followed by whitespace.
KdTree.java:105:13: '==' is not preceded with whitespace.
KdTree.java:105:15: '==' is not followed by whitespace.
KdTree.java:106:11: 'if' is not followed by whitespace.
KdTree.java:106:22: '{' is not preceded with whitespace.
KdTree.java:116:14: 'while' is not followed by whitespace.
KdTree.java:116:19: '!=' is not preceded with whitespace.
KdTree.java:116:21: '!=' is not followed by whitespace.
KdTree.java:116:26: '{' is not preceded with whitespace.
KdTree.java:117:15: 'if' is not followed by whitespace.
KdTree.java:120:15: 'if' is not followed by whitespace.
KdTree.java:120:20: '&lt;' is not preceded with whitespace.
KdTree.java:120:21: '&lt;' is not followed by whitespace.
KdTree.java:129:39: '{' is not preceded with whitespace.
KdTree.java:130:11: 'if' is not followed by whitespace.
KdTree.java:130:13: '==' is not preceded with whitespace.
KdTree.java:130:15: '==' is not followed by whitespace.
KdTree.java:131:11: 'if' is not followed by whitespace.
KdTree.java:136:14: 'while' is not followed by whitespace.
KdTree.java:136:19: '!=' is not preceded with whitespace.
KdTree.java:136:21: '!=' is not followed by whitespace.
KdTree.java:136:26: '{' is not preceded with whitespace.
KdTree.java:137:15: 'if' is not followed by whitespace.
KdTree.java:139:15: 'if' is not followed by whitespace.
KdTree.java:139:20: '&lt;' is not preceded with whitespace.
KdTree.java:139:21: '&lt;' is not followed by whitespace.
KdTree.java:147:23: '{' is not preceded with whitespace.
KdTree.java:151:45: '{' is not preceded with whitespace.
KdTree.java:152:11: 'if' is not followed by whitespace.
KdTree.java:158:11: 'if' is not followed by whitespace.
KdTree.java:158:18: '{' is not preceded with whitespace.
KdTree.java:173:48: '{' is not preceded with whitespace.
KdTree.java:174:11: 'if' is not followed by whitespace.
KdTree.java:174:16: '==' is not preceded with whitespace.
KdTree.java:174:18: '==' is not followed by whitespace.
KdTree.java:176:28: 'result' hides a field.
KdTree.java:177:11: 'if' is not followed by whitespace.
KdTree.java:180:14: 'while' is not followed by whitespace.
KdTree.java:180:32: '{' is not preceded with whitespace.
KdTree.java:182:15: 'if' is not followed by whitespace.
KdTree.java:183:15: 'if' is not followed by whitespace.
KdTree.java:183:22: '!=' is not preceded with whitespace.
KdTree.java:183:24: '!=' is not followed by whitespace.
KdTree.java:184:18: 'if' is not followed by whitespace.
KdTree.java:185:15: 'if' is not followed by whitespace.
KdTree.java:185:23: '!=' is not preceded with whitespace.
KdTree.java:185:25: '!=' is not followed by whitespace.
KdTree.java:186:18: 'if' is not followed by whitespace.
KdTree.java:192:38: '{' is not preceded with whitespace.
KdTree.java:193:11: 'if' is not followed by whitespace.
KdTree.java:195:11: 'if' is not followed by whitespace.
KdTree.java:207:44: '{' is not preceded with whitespace.
KdTree.java:208:11: 'if' is not followed by whitespace.
KdTree.java:208:13: '==' is not preceded with whitespace.
KdTree.java:208:15: '==' is not followed by whitespace.
KdTree.java:208:27: '==' is not preceded with whitespace.
KdTree.java:208:29: '==' is not followed by whitespace.
KdTree.java:211:11: 'if' is not followed by whitespace.
KdTree.java:211:17: '&gt;' is not preceded with whitespace.
KdTree.java:211:18: '&gt;' is not followed by whitespace.
KdTree.java:214:11: 'if' is not followed by whitespace.
KdTree.java:214:16: '&lt;' is not preceded with whitespace.
KdTree.java:214:17: '&lt;' is not followed by whitespace.
KdTree.java:217:14: 'if' is not followed by whitespace.
KdTree.java:217:19: '==' is not preceded with whitespace.
KdTree.java:217:21: '==' is not followed by whitespace.
KdTree.java:223:11: 'if' is not followed by whitespace.
KdTree.java:223:18: '!=' is not preceded with whitespace.
KdTree.java:223:20: '!=' is not followed by whitespace.
KdTree.java:224:11: 'if' is not followed by whitespace.
KdTree.java:224:19: '!=' is not preceded with whitespace.
KdTree.java:224:21: '!=' is not followed by whitespace.
KdTree.java:226:11: 'if' is not followed by whitespace.
KdTree.java:226:17: '&lt;=' is not preceded with whitespace.
KdTree.java:226:19: '&lt;=' is not followed by whitespace.
KdTree.java:226:26: '{' is not preceded with whitespace.
KdTree.java:237:39: '{' is not preceded with whitespace.
KdTree.java:240:17: 'result' hides a field.
KdTree.java:241:16: 'dMin' hides a field.
KdTree.java:242:14: 'while' is not followed by whitespace.
KdTree.java:242:32: '{' is not preceded with whitespace.
KdTree.java:246:15: 'if' is not followed by whitespace.
KdTree.java:246:21: '&gt;' is not preceded with whitespace.
KdTree.java:246:22: '&gt;' is not followed by whitespace.
KdTree.java:249:15: 'if' is not followed by whitespace.
KdTree.java:249:20: '&lt;' is not preceded with whitespace.
KdTree.java:249:21: '&lt;' is not followed by whitespace.
KdTree.java:252:19: 'if' is not followed by whitespace.
KdTree.java:252:24: '==' is not preceded with whitespace.
KdTree.java:252:26: '==' is not followed by whitespace.
KdTree.java:255:15: 'if' is not followed by whitespace.
KdTree.java:260:15: 'if' is not followed by whitespace.
KdTree.java:262:19: 'if' is not followed by whitespace.
KdTree.java:262:26: '&lt;' is not preceded with whitespace.
KdTree.java:262:27: '&lt;' is not followed by whitespace.
KdTree.java:262:32: '{' is not preceded with whitespace.
KdTree.java:268:15: 'if' is not followed by whitespace.
KdTree.java:268:32: '{' is not preceded with whitespace.
KdTree.java:270:19: 'if' is not followed by whitespace.
KdTree.java:270:25: '&lt;' is not preceded with whitespace.
KdTree.java:270:26: '&lt;' is not followed by whitespace.
KdTree.java:270:31: '{' is not preceded with whitespace.
KdTree.java:278:15: 'if' is not followed by whitespace.
KdTree.java:278:21: '&lt;' is not preceded with whitespace.
KdTree.java:278:22: '&lt;' is not followed by whitespace.
KdTree.java:278:29: '{' is not preceded with whitespace.
KdTree.java:280:19: 'if' is not followed by whitespace.
KdTree.java:280:26: '&lt;' is not preceded with whitespace.
KdTree.java:280:27: '&lt;' is not followed by whitespace.
KdTree.java:280:32: '{' is not preceded with whitespace.
KdTree.java:285:19: 'if' is not followed by whitespace.
KdTree.java:285:25: '&lt;' is not preceded with whitespace.
KdTree.java:285:26: '&lt;' is not followed by whitespace.
KdTree.java:285:31: '{' is not preceded with whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 6 total tests.

Test 1: Test size() by inserting N random points
(size may be less than N because of duplicates)
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3: Insert N random points and check contains() for random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 4: Insert N random points and check nearest() for random query points
  *  3000 random points in 100000-by-100000 grid
  *  3000 random points in 10000-by-10000 grid
  *  3000 random points in 1000-by-1000 grid
  *  3000 random points in 100-by-100 grid
  *  3000 random points in 10-by-10 grid
==&gt; passed

Test 5: Insert N random points and check range() for random query rectangles
  *  1000 random rectangles and points in 100000-by-100000 grid
  *  1000 random rectangles and points in 10000-by-10000 grid
  *  1000 random rectangles and points in 1000-by-1000 grid
  *  1000 random rectangles and points in 100-by-100 grid
  *  1000 random rectangles and points in 10-by-10 grid
==&gt; passed

Test 6: Test whether two PointSET objects can be created at the same time
==&gt; passed


Total: 6/6 tests passed!

================================================================

Testing methods in KdTree
*-----------------------------------------------------------
Running 14 total tests.

Test 0: Run sample client
% java TestKdTree circle10.txt
  *  testing size()
  *  testing isEmpty()
  *  testing contains() with (0.81, 0.3)
  *  testing contains() with (0.206107, 0.095492)
  *  testing range() with [0.0, 0.81] x [0.0, 0.3]
  *  testing nearest() with (0.81, 0.3)
  *  testing nearest() with (0.206107, 0.095492)
==&gt; passed

Test 1a: Insert N distinct points and check size() after each insertion
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 1b: Insert N points and check size() after each insertion
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
  *  10 random points in 1-by-1 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3a: Insert N distinct points and call contains() with random query points
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 3b: Insert N points and call contains() with random query points
  *  10000 random points in 1000-by-1000 grid
  *  10000 random points in 100-by-100 grid
  *  10000 random points in 10-by-10 grid
  *  10000 random points in 1-by-1 grid
==&gt; passed

Test 4: Test whether two KdTree objects can be created at the same time
==&gt; passed

Test 5a: Insert N distinct points and call range() for random query rectangles
  *  4000 random rectangles and 4000 distinct points in 100000-by-100000 grid
  *  4000 random rectangles and 4000 distinct points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 distinct points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 distinct points in 100-by-100 grid
  *  4000 random rectangles and 4000 distinct points in 10-by-10 grid
  *  4000 random rectangles and 4000 distinct points in 1-by-1 grid
==&gt; passed

Test 5b: Insert N points and call range() for random query rectangles
  *  4000 random rectangles and 4000 random points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 random points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 random points in 100-by-100 grid
  *  4000 random rectangles and 4000 random points in 10-by-10 grid
  *  4000 random rectangles and 4000 random points in 1-by-1 grid
==&gt; passed

Test 5c: Insert N points and call range() for tiny
rectangles enclosing each point.
  *  4000 tiny rectangles and 4000 points in 100000-by-100000 grid
  *  4000 tiny rectangles and 4000 points in 10000-by-10000 grid
  *  4000 tiny rectangles and 4000 points in 1000-by-1000 grid
  *  4000 tiny rectangles and 4000 points in 100-by-100 grid
  *  4000 tiny rectangles and 4000 points in 10-by-10 grid
==&gt; passed

Test 6a: Insert N distinct points and call nearest() with random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 6b: Insert N points and call nearest() with random query points
  *  10000 random points in 1000-by-1000 grid
  *  10000 random points in 100-by-100 grid
  *  10000 random points in 10-by-10 grid
==&gt; passed

Test 7: test intermixed sequence of calls to isEmpty(), size(), insert(), contains(),
range(), and nearest() with probabilities p1, p2, p3, p4, p5, and p6, respecively
  *  20000 calls in 100000-by-100000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10000-by-10000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1000-by-1000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 100-by-100 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10-by-10 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1-by-1 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
==&gt; passed

Test 8: test intermixed sequence of calls to isEmpty(), size(), insert(), contains(),
range(), and nearest() with probabilities p1, p2, p3 = 0, p4, p5, and p6, respecively
  *  2000 calls in 100000-by-100000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
  *  2000 calls in 10000-by-10000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
  *  2000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed


Total: 14/14 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          160                160
=&gt; passed        2          288                288
=&gt; passed        5          672                672
=&gt; passed       10         1312               1312
=&gt; passed       25         3232               3232
=&gt; passed      100        12832              12832
=&gt; passed      400        51232              51232
=&gt; passed      800       102432             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     893855         
=&gt; passed   320000     655738         
=&gt; passed   640000     617761         
=&gt; passed  1280000     619855         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     842697         
=&gt; passed    20000     862069         
=&gt; passed    40000     785340         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2439         
=&gt; passed    20000       1175         
=&gt; passed    40000        373         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2767         
=&gt; passed    20000       1325         
=&gt; passed    40000        449         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     701754               1.0              35.9              34.7              21.6         
=&gt; passed   320000     524590               1.0              37.5              35.2              22.0         
=&gt; passed   640000     526316               1.0              40.4              38.0              23.5         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     810811              26.9              26.8              17.9         
=&gt; passed    20000     824176              28.3              26.4              18.1         
=&gt; passed    40000     697674              31.6              30.2              20.8         
=&gt; passed    80000     622407              33.8              32.2              21.6         
=&gt; passed   160000     526316              37.5              35.5              24.0         
=&gt; passed   320000     439883              38.3              36.7              25.0         
=&gt; passed   640000     436047              42.1              39.0              27.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     121951              49.8              31.5              52.1              16.7         
=&gt; passed    20000     131810              51.9              32.4              53.5              14.6         
=&gt; passed    40000     227273              54.2              33.5              53.9              13.5         
=&gt; passed    80000      94637              61.1              37.7              61.9              16.2         
=&gt; passed   160000     164114              62.6              38.3              62.0              14.6         
=&gt; passed   320000     123660              68.3              41.8              67.3              14.2         
=&gt; passed   640000     169109              71.8              43.6              70.3              15.0         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   119332                  46.4                  136.3                   307.1             305.0         
=&gt; passed    20000   141509                  53.7                  159.8                   358.3             353.8         
=&gt; passed    40000   114943                  55.1                  164.6                   372.4             363.6         
=&gt; passed    80000    85082                  62.3                  188.0                   424.6             418.1         
=&gt; passed   160000    76453                  76.4                  233.0                   523.9             515.9         
=&gt; passed   320000    57870                  78.9                  240.4                   543.2             534.3         

Total: 0/24 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sun-31-Mar 21:26:47</td></tr>
        <tr><td>Raw Score</td><td>100.00 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">20/20 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#009900">37/37 tests passed</font>

Raw score: <font color="#009900">100.00%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 20K
-rw-r--r-- 1 9.3K Mar 31 15:57 KdTree.java
-rw-r--r-- 1 2.0K Mar 31 15:57 PointSET.java
-rw-r--r-- 1 2.6K Mar 31 15:57 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac PointSET.java
*-----------------------------------------------------------
================================================================

% javac KdTree.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
PointSET.java:9:22: '{' is not preceded with whitespace.
PointSET.java:14:29: '{' is not preceded with whitespace.
PointSET.java:15:11: 'if' is not followed by whitespace.
PointSET.java:20:22: '{' is not preceded with whitespace.
PointSET.java:25:34: '{' is not preceded with whitespace.
PointSET.java:30:39: '{' is not preceded with whitespace.
PointSET.java:35:23: '{' is not preceded with whitespace.
PointSET.java:37:14: 'while' is not followed by whitespace.
PointSET.java:37:32: '{' is not preceded with whitespace.
PointSET.java:44:48: '{' is not preceded with whitespace.
PointSET.java:47:14: 'while' is not followed by whitespace.
PointSET.java:47:32: '{' is not preceded with whitespace.
PointSET.java:49:15: 'if' is not followed by whitespace.
PointSET.java:55:38: '{' is not preceded with whitespace.
PointSET.java:56:11: 'if' is not followed by whitespace.
PointSET.java:60:14: 'while' is not followed by whitespace.
PointSET.java:60:32: '{' is not preceded with whitespace.
PointSET.java:63:15: 'if' is not followed by whitespace.
PointSET.java:63:27: '{' is not preceded with whitespace.
KdTree.java:9:5: Static variable definition in wrong order.
KdTree.java:9:20: Declaring variables, return values or parameters of type 'Double' is not allowed.
KdTree.java:10:5: Static variable definition in wrong order.
KdTree.java:19:31: '{' is not preceded with whitespace.
KdTree.java:24:38: ',' is not followed by whitespace.
KdTree.java:24:40: ',' is not followed by whitespace.
KdTree.java:24:42: ',' is not followed by whitespace.
KdTree.java:27:59: '{' is not preceded with whitespace.
KdTree.java:34:15: 'if' is not followed by whitespace.
KdTree.java:34:22: '{' is not preceded with whitespace.
KdTree.java:35:19: 'if' is not followed by whitespace.
KdTree.java:35:24: '&gt;=' is not preceded with whitespace.
KdTree.java:35:26: '&gt;=' is not followed by whitespace.
KdTree.java:50:19: 'if' is not followed by whitespace.
KdTree.java:50:24: '&gt;=' is not preceded with whitespace.
KdTree.java:50:26: '&gt;=' is not followed by whitespace.
KdTree.java:65: Line is longer than 85 characters.
KdTree.java:68:39: '{' is not preceded with whitespace.
KdTree.java:75:49: '{' is not preceded with whitespace.
KdTree.java:76:15: 'if' is not followed by whitespace.
KdTree.java:76:18: '{' is not preceded with whitespace.
KdTree.java:77:19: 'if' is not followed by whitespace.
KdTree.java:78:24: 'if' is not followed by whitespace.
KdTree.java:81:19: 'if' is not followed by whitespace.
KdTree.java:82:24: 'if' is not followed by whitespace.
KdTree.java:89:20: '{' is not preceded with whitespace.
KdTree.java:94:29: '{' is not preceded with whitespace.
KdTree.java:99:22: '{' is not preceded with whitespace.
KdTree.java:104:34: '{' is not preceded with whitespace.
KdTree.java:105:11: 'if' is not followed by whitespace.
KdTree.java:105:13: '==' is not preceded with whitespace.
KdTree.java:105:15: '==' is not followed by whitespace.
KdTree.java:106:11: 'if' is not followed by whitespace.
KdTree.java:106:22: '{' is not preceded with whitespace.
KdTree.java:116:14: 'while' is not followed by whitespace.
KdTree.java:116:19: '!=' is not preceded with whitespace.
KdTree.java:116:21: '!=' is not followed by whitespace.
KdTree.java:116:26: '{' is not preceded with whitespace.
KdTree.java:117:15: 'if' is not followed by whitespace.
KdTree.java:120:15: 'if' is not followed by whitespace.
KdTree.java:120:20: '&lt;' is not preceded with whitespace.
KdTree.java:120:21: '&lt;' is not followed by whitespace.
KdTree.java:129:39: '{' is not preceded with whitespace.
KdTree.java:130:11: 'if' is not followed by whitespace.
KdTree.java:130:13: '==' is not preceded with whitespace.
KdTree.java:130:15: '==' is not followed by whitespace.
KdTree.java:131:11: 'if' is not followed by whitespace.
KdTree.java:136:14: 'while' is not followed by whitespace.
KdTree.java:136:19: '!=' is not preceded with whitespace.
KdTree.java:136:21: '!=' is not followed by whitespace.
KdTree.java:136:26: '{' is not preceded with whitespace.
KdTree.java:137:15: 'if' is not followed by whitespace.
KdTree.java:139:15: 'if' is not followed by whitespace.
KdTree.java:139:20: '&lt;' is not preceded with whitespace.
KdTree.java:139:21: '&lt;' is not followed by whitespace.
KdTree.java:147:23: '{' is not preceded with whitespace.
KdTree.java:151:45: '{' is not preceded with whitespace.
KdTree.java:152:11: 'if' is not followed by whitespace.
KdTree.java:158:11: 'if' is not followed by whitespace.
KdTree.java:158:18: '{' is not preceded with whitespace.
KdTree.java:173:48: '{' is not preceded with whitespace.
KdTree.java:174:11: 'if' is not followed by whitespace.
KdTree.java:174:16: '==' is not preceded with whitespace.
KdTree.java:174:18: '==' is not followed by whitespace.
KdTree.java:176:28: 'result' hides a field.
KdTree.java:177:11: 'if' is not followed by whitespace.
KdTree.java:180:14: 'while' is not followed by whitespace.
KdTree.java:180:32: '{' is not preceded with whitespace.
KdTree.java:182:15: 'if' is not followed by whitespace.
KdTree.java:183:15: 'if' is not followed by whitespace.
KdTree.java:183:22: '!=' is not preceded with whitespace.
KdTree.java:183:24: '!=' is not followed by whitespace.
KdTree.java:184:18: 'if' is not followed by whitespace.
KdTree.java:185:15: 'if' is not followed by whitespace.
KdTree.java:185:23: '!=' is not preceded with whitespace.
KdTree.java:185:25: '!=' is not followed by whitespace.
KdTree.java:186:18: 'if' is not followed by whitespace.
KdTree.java:192:38: '{' is not preceded with whitespace.
KdTree.java:193:11: 'if' is not followed by whitespace.
KdTree.java:195:11: 'if' is not followed by whitespace.
KdTree.java:205:44: '{' is not preceded with whitespace.
KdTree.java:206:11: 'if' is not followed by whitespace.
KdTree.java:206:13: '==' is not preceded with whitespace.
KdTree.java:206:15: '==' is not followed by whitespace.
KdTree.java:206:27: '==' is not preceded with whitespace.
KdTree.java:206:29: '==' is not followed by whitespace.
KdTree.java:209:11: 'if' is not followed by whitespace.
KdTree.java:209:17: '&gt;' is not preceded with whitespace.
KdTree.java:209:18: '&gt;' is not followed by whitespace.
KdTree.java:212:11: 'if' is not followed by whitespace.
KdTree.java:212:16: '&lt;' is not preceded with whitespace.
KdTree.java:212:17: '&lt;' is not followed by whitespace.
KdTree.java:215:14: 'if' is not followed by whitespace.
KdTree.java:215:19: '==' is not preceded with whitespace.
KdTree.java:215:21: '==' is not followed by whitespace.
KdTree.java:221:11: 'if' is not followed by whitespace.
KdTree.java:221:18: '!=' is not preceded with whitespace.
KdTree.java:221:20: '!=' is not followed by whitespace.
KdTree.java:222:11: 'if' is not followed by whitespace.
KdTree.java:222:19: '!=' is not preceded with whitespace.
KdTree.java:222:21: '!=' is not followed by whitespace.
KdTree.java:224:11: 'if' is not followed by whitespace.
KdTree.java:224:17: '&lt;=' is not preceded with whitespace.
KdTree.java:224:19: '&lt;=' is not followed by whitespace.
KdTree.java:224:26: '{' is not preceded with whitespace.
KdTree.java:235:39: '{' is not preceded with whitespace.
KdTree.java:238:17: 'result' hides a field.
KdTree.java:239:16: 'dMin' hides a field.
KdTree.java:240:14: 'while' is not followed by whitespace.
KdTree.java:240:32: '{' is not preceded with whitespace.
KdTree.java:244:15: 'if' is not followed by whitespace.
KdTree.java:244:21: '&gt;' is not preceded with whitespace.
KdTree.java:244:22: '&gt;' is not followed by whitespace.
KdTree.java:247:15: 'if' is not followed by whitespace.
KdTree.java:247:20: '&lt;' is not preceded with whitespace.
KdTree.java:247:21: '&lt;' is not followed by whitespace.
KdTree.java:250:19: 'if' is not followed by whitespace.
KdTree.java:250:24: '==' is not preceded with whitespace.
KdTree.java:250:26: '==' is not followed by whitespace.
KdTree.java:253:15: 'if' is not followed by whitespace.
KdTree.java:258:15: 'if' is not followed by whitespace.
KdTree.java:260:19: 'if' is not followed by whitespace.
KdTree.java:260:26: '&lt;' is not preceded with whitespace.
KdTree.java:260:27: '&lt;' is not followed by whitespace.
KdTree.java:260:32: '{' is not preceded with whitespace.
KdTree.java:266:15: 'if' is not followed by whitespace.
KdTree.java:266:32: '{' is not preceded with whitespace.
KdTree.java:268:19: 'if' is not followed by whitespace.
KdTree.java:268:25: '&lt;' is not preceded with whitespace.
KdTree.java:268:26: '&lt;' is not followed by whitespace.
KdTree.java:268:31: '{' is not preceded with whitespace.
KdTree.java:276:15: 'if' is not followed by whitespace.
KdTree.java:276:21: '&lt;' is not preceded with whitespace.
KdTree.java:276:22: '&lt;' is not followed by whitespace.
KdTree.java:276:29: '{' is not preceded with whitespace.
KdTree.java:278:19: 'if' is not followed by whitespace.
KdTree.java:278:26: '&lt;' is not preceded with whitespace.
KdTree.java:278:27: '&lt;' is not followed by whitespace.
KdTree.java:278:32: '{' is not preceded with whitespace.
KdTree.java:283:19: 'if' is not followed by whitespace.
KdTree.java:283:25: '&lt;' is not preceded with whitespace.
KdTree.java:283:26: '&lt;' is not followed by whitespace.
KdTree.java:283:31: '{' is not preceded with whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
M D ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD ST: Write to static field KdTree.dMin from instance method KdTree.nearest(Point2D)  At KdTree.java:[line 198]
M D ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD ST: Write to static field KdTree.result from instance method KdTree.nearest(Point2D)  At KdTree.java:[line 199]
Warnings generated: 2
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 6 total tests.

Test 1: Test size() by inserting N random points
(size may be less than N because of duplicates)
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3: Insert N random points and check contains() for random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 4: Insert N random points and check nearest() for random query points
  *  3000 random points in 100000-by-100000 grid
  *  3000 random points in 10000-by-10000 grid
  *  3000 random points in 1000-by-1000 grid
  *  3000 random points in 100-by-100 grid
  *  3000 random points in 10-by-10 grid
==&gt; passed

Test 5: Insert N random points and check range() for random query rectangles
  *  1000 random rectangles and points in 100000-by-100000 grid
  *  1000 random rectangles and points in 10000-by-10000 grid
  *  1000 random rectangles and points in 1000-by-1000 grid
  *  1000 random rectangles and points in 100-by-100 grid
  *  1000 random rectangles and points in 10-by-10 grid
==&gt; passed

Test 6: Test whether two PointSET objects can be created at the same time
==&gt; passed


Total: 6/6 tests passed!

================================================================

Testing methods in KdTree
*-----------------------------------------------------------
Running 14 total tests.

Test 0: Run sample client
% java TestKdTree circle10.txt
  *  testing size()
  *  testing isEmpty()
  *  testing contains() with (0.81, 0.3)
  *  testing contains() with (0.206107, 0.095492)
  *  testing range() with [0.0, 0.81] x [0.0, 0.3]
  *  testing nearest() with (0.81, 0.3)
  *  testing nearest() with (0.206107, 0.095492)
==&gt; passed

Test 1a: Insert N distinct points and check size() after each insertion
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 1b: Insert N points and check size() after each insertion
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
  *  10 random points in 1-by-1 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3a: Insert N distinct points and call contains() with random query points
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 3b: Insert N points and call contains() with random query points
  *  10000 random points in 1000-by-1000 grid
  *  10000 random points in 100-by-100 grid
  *  10000 random points in 10-by-10 grid
  *  10000 random points in 1-by-1 grid
==&gt; passed

Test 4: Test whether two KdTree objects can be created at the same time
==&gt; passed

Test 5a: Insert N distinct points and call range() for random query rectangles
  *  4000 random rectangles and 4000 distinct points in 100000-by-100000 grid
  *  4000 random rectangles and 4000 distinct points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 distinct points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 distinct points in 100-by-100 grid
  *  4000 random rectangles and 4000 distinct points in 10-by-10 grid
  *  4000 random rectangles and 4000 distinct points in 1-by-1 grid
==&gt; passed

Test 5b: Insert N points and call range() for random query rectangles
  *  4000 random rectangles and 4000 random points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 random points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 random points in 100-by-100 grid
  *  4000 random rectangles and 4000 random points in 10-by-10 grid
  *  4000 random rectangles and 4000 random points in 1-by-1 grid
==&gt; passed

Test 5c: Insert N points and call range() for tiny
rectangles enclosing each point.
  *  4000 tiny rectangles and 4000 points in 100000-by-100000 grid
  *  4000 tiny rectangles and 4000 points in 10000-by-10000 grid
  *  4000 tiny rectangles and 4000 points in 1000-by-1000 grid
  *  4000 tiny rectangles and 4000 points in 100-by-100 grid
  *  4000 tiny rectangles and 4000 points in 10-by-10 grid
==&gt; passed

Test 6a: Insert N distinct points and call nearest() with random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 6b: Insert N points and call nearest() with random query points
  *  10000 random points in 1000-by-1000 grid
  *  10000 random points in 100-by-100 grid
  *  10000 random points in 10-by-10 grid
==&gt; passed

Test 7: test intermixed sequence of calls to isEmpty(), size(), insert(), contains(),
range(), and nearest() with probabilities p1, p2, p3, p4, p5, and p6, respecively
  *  20000 calls in 100000-by-100000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10000-by-10000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1000-by-1000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 100-by-100 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10-by-10 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1-by-1 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
==&gt; passed

Test 8: test intermixed sequence of calls to isEmpty(), size(), insert(), contains(),
range(), and nearest() with probabilities p1, p2, p3 = 0, p4, p5, and p6, respecively
  *  2000 calls in 100000-by-100000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
  *  2000 calls in 10000-by-10000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
  *  2000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed


Total: 14/14 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          160                160
=&gt; passed        2          288                288
=&gt; passed        5          672                672
=&gt; passed       10         1312               1312
=&gt; passed       25         3232               3232
=&gt; passed      100        12832              12832
=&gt; passed      400        51232              51232
=&gt; passed      800       102432             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
Reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     816327         
=&gt; passed   320000     714286         
=&gt; passed   640000     700219         
=&gt; passed  1280000     547711         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     837989         
=&gt; passed    20000     862069         
=&gt; passed    40000     765306         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2478         
=&gt; passed    20000       1189         
=&gt; passed    40000        431         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2705         
=&gt; passed    20000       1289         
=&gt; passed    40000        453         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     701754               1.0              35.9              34.7              21.6         
=&gt; passed   320000     515298               1.0              37.5              35.2              22.0         
=&gt; passed   640000     483019               1.0              40.4              38.0              23.5         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     828729              26.9              26.8              17.9         
=&gt; passed    20000     828729              28.3              26.4              18.1         
=&gt; passed    40000     700935              31.6              30.2              20.8         
=&gt; passed    80000     553506              33.8              32.2              21.6         
=&gt; passed   160000     442478              37.5              35.5              24.0         
=&gt; passed   320000     467290              38.3              36.7              25.0         
=&gt; passed   640000     416667              42.1              39.0              27.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     187032              49.8              31.5              52.1              16.7         
=&gt; passed    20000     195822              51.9              32.4              53.5              14.6         
=&gt; passed    40000     268336              54.2              33.5              53.9              13.5         
=&gt; passed    80000     128425              61.1              37.7              61.9              16.2         
=&gt; passed   160000     143954              62.6              38.3              62.0              14.6         
=&gt; passed   320000     143130              68.3              41.8              67.3              14.2         
=&gt; passed   640000     186104              71.8              43.6              70.3              15.0         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   227618                  26.1                   86.7                   188.3             188.6         
=&gt; passed    20000   253378                  28.7                   95.9                   209.5             207.2         
=&gt; passed    40000   205479                  29.3                   98.4                   214.7             212.7         
=&gt; passed    80000   129983                  31.7                  107.0                   233.0             230.9         
=&gt; passed   160000   117096                  35.7                  121.2                   263.2             261.5         
=&gt; passed   320000   105932                  36.7                  125.6                   272.9             271.9         
=&gt; passed   640000   100134                  37.5                  128.0                   279.6             276.7         
==&gt; 7/7 tests passed

Total: 24/24 tests passed!

================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-29-Mar 12:54:03</td></tr>
        <tr><td>Raw Score</td><td>83.78 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">20/20 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#995200">13/37 tests passed</font>

Raw score: <font color="#1D9900">83.78%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 20K
-rw-r--r-- 1 8.1K Mar 29 07:24 KdTree.java
-rw-r--r-- 1 2.0K Mar 29 07:24 PointSET.java
-rw-r--r-- 1 2.4K Mar 29 07:24 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac PointSET.java
*-----------------------------------------------------------
================================================================

% javac KdTree.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
PointSET.java:9:22: '{' is not preceded with whitespace.
PointSET.java:14:29: '{' is not preceded with whitespace.
PointSET.java:15:11: 'if' is not followed by whitespace.
PointSET.java:20:22: '{' is not preceded with whitespace.
PointSET.java:25:34: '{' is not preceded with whitespace.
PointSET.java:30:39: '{' is not preceded with whitespace.
PointSET.java:35:23: '{' is not preceded with whitespace.
PointSET.java:37:14: 'while' is not followed by whitespace.
PointSET.java:37:32: '{' is not preceded with whitespace.
PointSET.java:44:48: '{' is not preceded with whitespace.
PointSET.java:47:14: 'while' is not followed by whitespace.
PointSET.java:47:32: '{' is not preceded with whitespace.
PointSET.java:49:15: 'if' is not followed by whitespace.
PointSET.java:55:38: '{' is not preceded with whitespace.
PointSET.java:56:11: 'if' is not followed by whitespace.
PointSET.java:60:14: 'while' is not followed by whitespace.
PointSET.java:60:32: '{' is not preceded with whitespace.
PointSET.java:63:15: 'if' is not followed by whitespace.
PointSET.java:63:27: '{' is not preceded with whitespace.
KdTree.java:14:31: '{' is not preceded with whitespace.
KdTree.java:19:38: ',' is not followed by whitespace.
KdTree.java:19:40: ',' is not followed by whitespace.
KdTree.java:19:42: ',' is not followed by whitespace.
KdTree.java:22:59: '{' is not preceded with whitespace.
KdTree.java:29:15: 'if' is not followed by whitespace.
KdTree.java:29:22: '{' is not preceded with whitespace.
KdTree.java:30:19: 'if' is not followed by whitespace.
KdTree.java:30:24: '&gt;=' is not preceded with whitespace.
KdTree.java:30:26: '&gt;=' is not followed by whitespace.
KdTree.java:45:19: 'if' is not followed by whitespace.
KdTree.java:45:24: '&gt;=' is not preceded with whitespace.
KdTree.java:45:26: '&gt;=' is not followed by whitespace.
KdTree.java:60: Line is longer than 85 characters.
KdTree.java:63:39: '{' is not preceded with whitespace.
KdTree.java:70:49: '{' is not preceded with whitespace.
KdTree.java:71:15: 'if' is not followed by whitespace.
KdTree.java:71:18: '{' is not preceded with whitespace.
KdTree.java:72:19: 'if' is not followed by whitespace.
KdTree.java:73:24: 'if' is not followed by whitespace.
KdTree.java:76:19: 'if' is not followed by whitespace.
KdTree.java:77:24: 'if' is not followed by whitespace.
KdTree.java:84:20: '{' is not preceded with whitespace.
KdTree.java:89:29: '{' is not preceded with whitespace.
KdTree.java:94:22: '{' is not preceded with whitespace.
KdTree.java:99:34: '{' is not preceded with whitespace.
KdTree.java:100:11: 'if' is not followed by whitespace.
KdTree.java:100:13: '==' is not preceded with whitespace.
KdTree.java:100:15: '==' is not followed by whitespace.
KdTree.java:101:11: 'if' is not followed by whitespace.
KdTree.java:101:22: '{' is not preceded with whitespace.
KdTree.java:111:14: 'while' is not followed by whitespace.
KdTree.java:111:19: '!=' is not preceded with whitespace.
KdTree.java:111:21: '!=' is not followed by whitespace.
KdTree.java:111:26: '{' is not preceded with whitespace.
KdTree.java:112:15: 'if' is not followed by whitespace.
KdTree.java:115:15: 'if' is not followed by whitespace.
KdTree.java:115:20: '&lt;' is not preceded with whitespace.
KdTree.java:115:21: '&lt;' is not followed by whitespace.
KdTree.java:124:39: '{' is not preceded with whitespace.
KdTree.java:125:11: 'if' is not followed by whitespace.
KdTree.java:125:13: '==' is not preceded with whitespace.
KdTree.java:125:15: '==' is not followed by whitespace.
KdTree.java:126:11: 'if' is not followed by whitespace.
KdTree.java:131:14: 'while' is not followed by whitespace.
KdTree.java:131:19: '!=' is not preceded with whitespace.
KdTree.java:131:21: '!=' is not followed by whitespace.
KdTree.java:131:26: '{' is not preceded with whitespace.
KdTree.java:132:15: 'if' is not followed by whitespace.
KdTree.java:134:15: 'if' is not followed by whitespace.
KdTree.java:134:20: '&lt;' is not preceded with whitespace.
KdTree.java:134:21: '&lt;' is not followed by whitespace.
KdTree.java:142:23: '{' is not preceded with whitespace.
KdTree.java:146:45: '{' is not preceded with whitespace.
KdTree.java:147:11: 'if' is not followed by whitespace.
KdTree.java:153:11: 'if' is not followed by whitespace.
KdTree.java:153:18: '{' is not preceded with whitespace.
KdTree.java:168:48: '{' is not preceded with whitespace.
KdTree.java:169:11: 'if' is not followed by whitespace.
KdTree.java:169:16: '==' is not preceded with whitespace.
KdTree.java:169:18: '==' is not followed by whitespace.
KdTree.java:172:11: 'if' is not followed by whitespace.
KdTree.java:175:14: 'while' is not followed by whitespace.
KdTree.java:175:32: '{' is not preceded with whitespace.
KdTree.java:177:15: 'if' is not followed by whitespace.
KdTree.java:178:15: 'if' is not followed by whitespace.
KdTree.java:178:22: '!=' is not preceded with whitespace.
KdTree.java:178:24: '!=' is not followed by whitespace.
KdTree.java:179:18: 'if' is not followed by whitespace.
KdTree.java:180:15: 'if' is not followed by whitespace.
KdTree.java:180:23: '!=' is not preceded with whitespace.
KdTree.java:180:25: '!=' is not followed by whitespace.
KdTree.java:181:18: 'if' is not followed by whitespace.
KdTree.java:187:38: '{' is not preceded with whitespace.
KdTree.java:188:11: 'if' is not followed by whitespace.
KdTree.java:190:11: 'if' is not followed by whitespace.
KdTree.java:196:14: 'while' is not followed by whitespace.
KdTree.java:196:32: '{' is not preceded with whitespace.
KdTree.java:200:15: 'if' is not followed by whitespace.
KdTree.java:200:21: '&gt;' is not preceded with whitespace.
KdTree.java:200:22: '&gt;' is not followed by whitespace.
KdTree.java:203:15: 'if' is not followed by whitespace.
KdTree.java:203:20: '&lt;' is not preceded with whitespace.
KdTree.java:203:21: '&lt;' is not followed by whitespace.
KdTree.java:206:19: 'if' is not followed by whitespace.
KdTree.java:206:24: '==' is not preceded with whitespace.
KdTree.java:206:26: '==' is not followed by whitespace.
KdTree.java:209:15: 'if' is not followed by whitespace.
KdTree.java:214:15: 'if' is not followed by whitespace.
KdTree.java:216:19: 'if' is not followed by whitespace.
KdTree.java:216:26: '&lt;' is not preceded with whitespace.
KdTree.java:216:27: '&lt;' is not followed by whitespace.
KdTree.java:216:32: '{' is not preceded with whitespace.
KdTree.java:222:15: 'if' is not followed by whitespace.
KdTree.java:222:32: '{' is not preceded with whitespace.
KdTree.java:224:19: 'if' is not followed by whitespace.
KdTree.java:224:25: '&lt;' is not preceded with whitespace.
KdTree.java:224:26: '&lt;' is not followed by whitespace.
KdTree.java:224:31: '{' is not preceded with whitespace.
KdTree.java:232:15: 'if' is not followed by whitespace.
KdTree.java:232:21: '&lt;' is not preceded with whitespace.
KdTree.java:232:22: '&lt;' is not followed by whitespace.
KdTree.java:232:29: '{' is not preceded with whitespace.
KdTree.java:234:19: 'if' is not followed by whitespace.
KdTree.java:234:26: '&lt;' is not preceded with whitespace.
KdTree.java:234:27: '&lt;' is not followed by whitespace.
KdTree.java:234:32: '{' is not preceded with whitespace.
KdTree.java:239:19: 'if' is not followed by whitespace.
KdTree.java:239:25: '&lt;' is not preceded with whitespace.
KdTree.java:239:26: '&lt;' is not followed by whitespace.
KdTree.java:239:31: '{' is not preceded with whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 6 total tests.

Test 1: Test size() by inserting N random points
(size may be less than N because of duplicates)
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3: Insert N random points and check contains() for random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 4: Insert N random points and check nearest() for random query points
  *  3000 random points in 100000-by-100000 grid
  *  3000 random points in 10000-by-10000 grid
  *  3000 random points in 1000-by-1000 grid
  *  3000 random points in 100-by-100 grid
  *  3000 random points in 10-by-10 grid
==&gt; passed

Test 5: Insert N random points and check range() for random query rectangles
  *  1000 random rectangles and points in 100000-by-100000 grid
  *  1000 random rectangles and points in 10000-by-10000 grid
  *  1000 random rectangles and points in 1000-by-1000 grid
  *  1000 random rectangles and points in 100-by-100 grid
  *  1000 random rectangles and points in 10-by-10 grid
==&gt; passed

Test 6: Test whether two PointSET objects can be created at the same time
==&gt; passed


Total: 6/6 tests passed!

================================================================

Testing methods in KdTree
*-----------------------------------------------------------
Running 14 total tests.

Test 0: Run sample client
% java TestKdTree circle10.txt
  *  testing size()
  *  testing isEmpty()
  *  testing contains() with (0.81, 0.3)
  *  testing contains() with (0.206107, 0.095492)
  *  testing range() with [0.0, 0.81] x [0.0, 0.3]
  *  testing nearest() with (0.81, 0.3)
  *  testing nearest() with (0.206107, 0.095492)
==&gt; passed

Test 1a: Insert N distinct points and check size() after each insertion
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 1b: Insert N points and check size() after each insertion
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
  *  10 random points in 1-by-1 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3a: Insert N distinct points and call contains() with random query points
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 3b: Insert N points and call contains() with random query points
  *  10000 random points in 1000-by-1000 grid
  *  10000 random points in 100-by-100 grid
  *  10000 random points in 10-by-10 grid
  *  10000 random points in 1-by-1 grid
==&gt; passed

Test 4: Test whether two KdTree objects can be created at the same time
==&gt; passed

Test 5a: Insert N distinct points and call range() for random query rectangles
  *  4000 random rectangles and 4000 distinct points in 100000-by-100000 grid
  *  4000 random rectangles and 4000 distinct points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 distinct points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 distinct points in 100-by-100 grid
  *  4000 random rectangles and 4000 distinct points in 10-by-10 grid
  *  4000 random rectangles and 4000 distinct points in 1-by-1 grid
==&gt; passed

Test 5b: Insert N points and call range() for random query rectangles
  *  4000 random rectangles and 4000 random points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 random points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 random points in 100-by-100 grid
  *  4000 random rectangles and 4000 random points in 10-by-10 grid
  *  4000 random rectangles and 4000 random points in 1-by-1 grid
==&gt; passed

Test 5c: Insert N points and call range() for tiny
rectangles enclosing each point.
  *  4000 tiny rectangles and 4000 points in 100000-by-100000 grid
  *  4000 tiny rectangles and 4000 points in 10000-by-10000 grid
  *  4000 tiny rectangles and 4000 points in 1000-by-1000 grid
  *  4000 tiny rectangles and 4000 points in 100-by-100 grid
  *  4000 tiny rectangles and 4000 points in 10-by-10 grid
==&gt; passed

Test 6a: Insert N distinct points and call nearest() with random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 6b: Insert N points and call nearest() with random query points
  *  10000 random points in 1000-by-1000 grid
  *  10000 random points in 100-by-100 grid
  *  10000 random points in 10-by-10 grid
==&gt; passed

Test 7: test intermixed sequence of calls to isEmpty(), size(), insert(), contains(),
range(), and nearest() with probabilities p1, p2, p3, p4, p5, and p6, respecively
  *  20000 calls in 100000-by-100000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10000-by-10000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1000-by-1000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 100-by-100 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10-by-10 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1-by-1 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
==&gt; passed

Test 8: test intermixed sequence of calls to isEmpty(), size(), insert(), contains(),
range(), and nearest() with probabilities p1, p2, p3 = 0, p4, p5, and p6, respecively
  *  2000 calls in 100000-by-100000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
  *  2000 calls in 10000-by-10000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
  *  2000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed


Total: 14/14 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          136                136
=&gt; passed        2          248                248
=&gt; passed        5          584                584
=&gt; passed       10         1144               1144
=&gt; passed       25         2824               2824
=&gt; passed      100        11224              11224
=&gt; passed      400        44824              44824
=&gt; passed      800        89624              89624
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 112.00 N + 24.00  (R^2 = 1.000)
Reference memory (bytes) = 112.00 N + 24.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     680851         
=&gt; passed   320000     720721         
=&gt; passed   640000     461428         
=&gt; passed  1280000     415450         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     815217         
=&gt; passed    20000     837989         
=&gt; passed    40000     721154         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2418         
=&gt; passed    20000       1171         
=&gt; passed    40000        421         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2763         
=&gt; passed    20000       1307         
=&gt; passed    40000        364         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     692641               1.0              35.9              34.7              21.6         
=&gt; passed   320000     468521               1.0              37.5              35.2              22.0         
=&gt; passed   640000     487433               1.0              40.4              38.0              23.5         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     828729              26.9              26.8              17.9         
=&gt; passed    20000     828729              28.3              26.4              18.1         
=&gt; passed    40000     742574              31.6              30.2              20.8         
=&gt; passed    80000     625000              33.8              32.2              21.6         
=&gt; passed   160000     522648              37.5              35.5              24.0         
=&gt; passed   320000     454545              38.3              36.7              25.0         
=&gt; passed   640000     454545              42.1              39.0              27.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     181818              49.8              31.5              52.1              16.7         
=&gt; passed    20000     181818              51.9              32.4              53.5              14.6         
=&gt; passed    40000     216450              54.2              33.5              53.9              13.5         
=&gt; passed    80000     114767              61.1              37.7              61.9              16.2         
=&gt; passed   160000     178571              62.6              38.3              62.0              14.6         
=&gt; passed   320000     138632              68.3              41.8              67.3              14.2         
=&gt; passed   640000     143678              71.8              43.6              70.3              15.0         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000    87719                  92.6                  249.9                   551.7             548.2         
=&gt; <font color="#990000"><b>FAILED</b></font>    20000    80602                 117.9                  321.3   (1.1x)          702.0             695.1         
=&gt; <font color="#990000"><b>FAILED</b></font>    40000    62683                 124.2                  339.4   (1.1x)          751.6             734.9         
=&gt; <font color="#990000"><b>FAILED</b></font>    80000    44550                 149.4                  411.0   (1.4x)          911.3   (1.1x)    898.1   (1.1x)
=&gt; <font color="#990000"><b>FAILED</b></font>   160000    22458   (0.7x)        200.8                  556.4   (1.9x)         1215.3   (1.5x)   1205.8   (1.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>   320000    22622                 200.5                  556.3   (1.9x)         1222.2   (1.5x)   1217.1   (1.5x)

Total: 0/24 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-28-Mar 22:42:28</td></tr>
        <tr><td>Raw Score</td><td>47.74 / 100.00</td></tr>
        <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-002/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#994100">6/20 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#389900">27/37 tests passed</font>

Raw score: <font color="#998B00">47.74%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>files submitted
----------------------------------
total 16K
-rw-r--r-- 1 8.0K Mar 28 18:28 KdTree.java
-rw-r--r-- 1 2.0K Mar 28 18:28 PointSET.java
-rw-r--r-- 1 2.4K Mar 28 18:28 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac PointSET.java
*-----------------------------------------------------------
================================================================

% javac KdTree.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
PointSET.java:9:22: '{' is not preceded with whitespace.
PointSET.java:14:29: '{' is not preceded with whitespace.
PointSET.java:15:11: 'if' is not followed by whitespace.
PointSET.java:20:22: '{' is not preceded with whitespace.
PointSET.java:25:34: '{' is not preceded with whitespace.
PointSET.java:30:39: '{' is not preceded with whitespace.
PointSET.java:35:23: '{' is not preceded with whitespace.
PointSET.java:37:14: 'while' is not followed by whitespace.
PointSET.java:37:32: '{' is not preceded with whitespace.
PointSET.java:44:48: '{' is not preceded with whitespace.
PointSET.java:47:14: 'while' is not followed by whitespace.
PointSET.java:47:32: '{' is not preceded with whitespace.
PointSET.java:49:15: 'if' is not followed by whitespace.
PointSET.java:55:38: '{' is not preceded with whitespace.
PointSET.java:56:11: 'if' is not followed by whitespace.
PointSET.java:60:14: 'while' is not followed by whitespace.
PointSET.java:60:32: '{' is not preceded with whitespace.
PointSET.java:63:15: 'if' is not followed by whitespace.
PointSET.java:63:27: '{' is not preceded with whitespace.
KdTree.java:14:31: '{' is not preceded with whitespace.
KdTree.java:19:38: ',' is not followed by whitespace.
KdTree.java:19:40: ',' is not followed by whitespace.
KdTree.java:19:42: ',' is not followed by whitespace.
KdTree.java:22:59: '{' is not preceded with whitespace.
KdTree.java:29:15: 'if' is not followed by whitespace.
KdTree.java:29:22: '{' is not preceded with whitespace.
KdTree.java:30:19: 'if' is not followed by whitespace.
KdTree.java:30:24: '&gt;=' is not preceded with whitespace.
KdTree.java:30:26: '&gt;=' is not followed by whitespace.
KdTree.java:45:19: 'if' is not followed by whitespace.
KdTree.java:45:24: '&gt;=' is not preceded with whitespace.
KdTree.java:45:26: '&gt;=' is not followed by whitespace.
KdTree.java:60: Line is longer than 85 characters.
KdTree.java:63:39: '{' is not preceded with whitespace.
KdTree.java:70:49: '{' is not preceded with whitespace.
KdTree.java:71:15: 'if' is not followed by whitespace.
KdTree.java:71:18: '{' is not preceded with whitespace.
KdTree.java:72:19: 'if' is not followed by whitespace.
KdTree.java:73:24: 'if' is not followed by whitespace.
KdTree.java:76:19: 'if' is not followed by whitespace.
KdTree.java:77:24: 'if' is not followed by whitespace.
KdTree.java:84:20: '{' is not preceded with whitespace.
KdTree.java:89:29: '{' is not preceded with whitespace.
KdTree.java:94:22: '{' is not preceded with whitespace.
KdTree.java:99:34: '{' is not preceded with whitespace.
KdTree.java:100:11: 'if' is not followed by whitespace.
KdTree.java:100:13: '==' is not preceded with whitespace.
KdTree.java:100:15: '==' is not followed by whitespace.
KdTree.java:101:11: 'if' is not followed by whitespace.
KdTree.java:101:22: '{' is not preceded with whitespace.
KdTree.java:111:14: 'while' is not followed by whitespace.
KdTree.java:111:19: '!=' is not preceded with whitespace.
KdTree.java:111:21: '!=' is not followed by whitespace.
KdTree.java:111:26: '{' is not preceded with whitespace.
KdTree.java:112:15: 'if' is not followed by whitespace.
KdTree.java:115:15: 'if' is not followed by whitespace.
KdTree.java:115:20: '&lt;' is not preceded with whitespace.
KdTree.java:115:21: '&lt;' is not followed by whitespace.
KdTree.java:124:39: '{' is not preceded with whitespace.
KdTree.java:125:11: 'if' is not followed by whitespace.
KdTree.java:125:13: '==' is not preceded with whitespace.
KdTree.java:125:15: '==' is not followed by whitespace.
KdTree.java:126:11: 'if' is not followed by whitespace.
KdTree.java:131:14: 'while' is not followed by whitespace.
KdTree.java:131:19: '!=' is not preceded with whitespace.
KdTree.java:131:21: '!=' is not followed by whitespace.
KdTree.java:131:26: '{' is not preceded with whitespace.
KdTree.java:132:15: 'if' is not followed by whitespace.
KdTree.java:134:15: 'if' is not followed by whitespace.
KdTree.java:134:23: '&gt;=' is not preceded with whitespace.
KdTree.java:134:25: '&gt;=' is not followed by whitespace.
KdTree.java:142:23: '{' is not preceded with whitespace.
KdTree.java:146:45: '{' is not preceded with whitespace.
KdTree.java:147:11: 'if' is not followed by whitespace.
KdTree.java:153:11: 'if' is not followed by whitespace.
KdTree.java:153:18: '{' is not preceded with whitespace.
KdTree.java:168:48: '{' is not preceded with whitespace.
KdTree.java:169:11: 'if' is not followed by whitespace.
KdTree.java:169:16: '==' is not preceded with whitespace.
KdTree.java:169:18: '==' is not followed by whitespace.
KdTree.java:172:11: 'if' is not followed by whitespace.
KdTree.java:175:14: 'while' is not followed by whitespace.
KdTree.java:175:32: '{' is not preceded with whitespace.
KdTree.java:177:15: 'if' is not followed by whitespace.
KdTree.java:178:15: 'if' is not followed by whitespace.
KdTree.java:178:22: '!=' is not preceded with whitespace.
KdTree.java:178:24: '!=' is not followed by whitespace.
KdTree.java:179:18: 'if' is not followed by whitespace.
KdTree.java:180:15: 'if' is not followed by whitespace.
KdTree.java:180:23: '!=' is not preceded with whitespace.
KdTree.java:180:25: '!=' is not followed by whitespace.
KdTree.java:181:18: 'if' is not followed by whitespace.
KdTree.java:187:38: '{' is not preceded with whitespace.
KdTree.java:188:11: 'if' is not followed by whitespace.
KdTree.java:189:11: 'if' is not followed by whitespace.
KdTree.java:195:14: 'while' is not followed by whitespace.
KdTree.java:195:32: '{' is not preceded with whitespace.
KdTree.java:199:15: 'if' is not followed by whitespace.
KdTree.java:199:21: '&gt;' is not preceded with whitespace.
KdTree.java:199:22: '&gt;' is not followed by whitespace.
KdTree.java:202:15: 'if' is not followed by whitespace.
KdTree.java:202:20: '&lt;' is not preceded with whitespace.
KdTree.java:202:21: '&lt;' is not followed by whitespace.
KdTree.java:207:15: 'if' is not followed by whitespace.
KdTree.java:212:15: 'if' is not followed by whitespace.
KdTree.java:214:19: 'if' is not followed by whitespace.
KdTree.java:214:26: '&lt;' is not preceded with whitespace.
KdTree.java:214:27: '&lt;' is not followed by whitespace.
KdTree.java:214:32: '{' is not preceded with whitespace.
KdTree.java:220:15: 'if' is not followed by whitespace.
KdTree.java:220:32: '{' is not preceded with whitespace.
KdTree.java:222:19: 'if' is not followed by whitespace.
KdTree.java:222:25: '&lt;' is not preceded with whitespace.
KdTree.java:222:26: '&lt;' is not followed by whitespace.
KdTree.java:222:31: '{' is not preceded with whitespace.
KdTree.java:230:15: 'if' is not followed by whitespace.
KdTree.java:230:21: '&lt;' is not preceded with whitespace.
KdTree.java:230:22: '&lt;' is not followed by whitespace.
KdTree.java:230:29: '{' is not preceded with whitespace.
KdTree.java:232:19: 'if' is not followed by whitespace.
KdTree.java:232:26: '&lt;' is not preceded with whitespace.
KdTree.java:232:27: '&lt;' is not followed by whitespace.
KdTree.java:232:32: '{' is not preceded with whitespace.
KdTree.java:237:19: 'if' is not followed by whitespace.
KdTree.java:237:25: '&lt;' is not preceded with whitespace.
KdTree.java:237:26: '&lt;' is not followed by whitespace.
KdTree.java:237:31: '{' is not preceded with whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
H C RV_EXCEPTION_NOT_THROWN RV: new NullPointerException() not thrown in KdTree.nearest(Point2D)  At KdTree.java:[line 188]
Warnings generated: 1
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 6 total tests.

Test 1: Test size() by inserting N random points
(size may be less than N because of duplicates)
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3: Insert N random points and check contains() for random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 4: Insert N random points and check nearest() for random query points
  *  3000 random points in 100000-by-100000 grid
  *  3000 random points in 10000-by-10000 grid
  *  3000 random points in 1000-by-1000 grid
  *  3000 random points in 100-by-100 grid
  *  3000 random points in 10-by-10 grid
==&gt; passed

Test 5: Insert N random points and check range() for random query rectangles
  *  1000 random rectangles and points in 100000-by-100000 grid
  *  1000 random rectangles and points in 10000-by-10000 grid
  *  1000 random rectangles and points in 1000-by-1000 grid
  *  1000 random rectangles and points in 100-by-100 grid
  *  1000 random rectangles and points in 10-by-10 grid
==&gt; passed

Test 6: Test whether two PointSET objects can be created at the same time
==&gt; passed


Total: 6/6 tests passed!

================================================================

Testing methods in KdTree
*-----------------------------------------------------------
Running 14 total tests.

Test 0: Run sample client
% java TestKdTree circle10.txt
  *  testing size()
  *  testing isEmpty()
  *  testing contains() with (0.81, 0.3)
  *  testing contains() with (0.206107, 0.095492)
  *  testing range() with [0.0, 0.81] x [0.0, 0.3]
  *  testing nearest() with (0.81, 0.3)
  *  testing nearest() with (0.206107, 0.095492)
==&gt; passed

Test 1a: Insert N distinct points and check size() after each insertion
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 1b: Insert N points and check size() after each insertion
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
  *  10 random points in 1-by-1 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3a: Insert N distinct points and call contains() with random query points
  *  100000 random distinct points in 100000-by-100000 grid
      -  failed on trial 2943 of 100000
      -  student   contains() = false
      -  reference contains() = true
  *  100000 random distinct points in 10000-by-10000 grid
      -  failed on trial 2614 of 100000
      -  student   contains() = false
      -  reference contains() = true
  *  100000 random distinct points in 1000-by-1000 grid
      -  failed on trial 15 of 100000
      -  student   contains() = false
      -  reference contains() = true
  *  10000 random distinct points in 100-by-100 grid
      -  failed on trial 1 of 10000
      -  student   contains() = false
      -  reference contains() = true
  *  100 random distinct points in 10-by-10 grid
      -  failed on trial 2 of 100
      -  student   contains() = false
      -  reference contains() = true
  *  1 random distinct points in 1-by-1 grid
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 3b: Insert N points and call contains() with random query points
  *  10000 random points in 1000-by-1000 grid
      -  failed on trial 117 of 10000
      -  student   contains() = false
      -  reference contains() = true
  *  10000 random points in 100-by-100 grid
      -  failed on trial 3 of 10000
      -  student   contains() = false
      -  reference contains() = true
  *  10000 random points in 10-by-10 grid
      -  failed on trial 1 of 10000
      -  student   contains() = false
      -  reference contains() = true
  *  10000 random points in 1-by-1 grid
      -  failed on trial 2 of 10000
      -  student   contains() = false
      -  reference contains() = true
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 4: Test whether two KdTree objects can be created at the same time
    - contains() give wrong answer
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5a: Insert N distinct points and call range() for random query rectangles
  *  4000 random rectangles and 4000 distinct points in 100000-by-100000 grid
  *  4000 random rectangles and 4000 distinct points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 distinct points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 distinct points in 100-by-100 grid
  *  4000 random rectangles and 4000 distinct points in 10-by-10 grid
  *  4000 random rectangles and 4000 distinct points in 1-by-1 grid
==&gt; passed

Test 5b: Insert N points and call range() for random query rectangles
  *  4000 random rectangles and 4000 random points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 random points in 1000-by-1000 grid

Total: 0/14 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          136                136
=&gt; passed        2          248                248
=&gt; passed        5          584                584
=&gt; passed       10         1144               1144
=&gt; passed       25         2824               2824
=&gt; passed      100        11224              11224
=&gt; passed      400        44824              44824
=&gt; passed      800        89624              89624
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 112.00 N + 24.00  (R^2 = 1.000)
Reference memory (bytes) = 112.00 N + 24.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     136286         
=&gt; passed   320000      98431         
=&gt; passed   640000     109758         
=&gt; passed  1280000      90179         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>    10000     163577   (0.8x)
=&gt; <font color="#990000"><b>FAILED</b></font>    20000     184049   (0.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>    40000     158898   (0.8x)
==&gt; 0/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000        359         
=&gt; passed    20000        106         
=&gt; passed    40000         37         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000        597         
=&gt; passed    20000        163         
=&gt; passed    40000         47         
==&gt; 3/3 tests passed

Total: 10/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 24 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; passed   160000     131148               1.0              35.9              34.7              21.6         
=&gt; passed   320000     177679               1.0              37.5              35.2              22.0         
=&gt; passed   640000      82613               1.0              40.4              38.0              23.5         
==&gt; 3/3 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     566038              11.8              15.7               9.3         
=&gt; passed    20000     212465              17.9              14.2              10.6         
=&gt; passed    40000     339367              14.1              12.6               9.3         
=&gt; passed    80000     301811              18.1              16.3               9.5         
=&gt; passed   160000     511945              19.6              18.7              10.7         
=&gt; passed   320000     299401              13.3              12.2              10.1         
=&gt; passed   640000     461538              19.0              27.3              17.5         
==&gt; 7/7 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000      63803              49.8              31.5              52.1              16.7         
=&gt; passed    20000      74516              51.9              32.4              53.5              14.6         
=&gt; passed    40000      61150              54.2              33.5              53.9              13.5         
=&gt; passed    80000      58072              61.1              37.7              61.9              16.2         
=&gt; passed   160000      44366              62.6              38.3              62.0              14.6         
=&gt; passed   320000      56264              68.3              41.8              67.3              14.2         
=&gt; passed   640000      27572              71.8              43.6              70.3              15.0         
==&gt; 7/7 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>    10000    20641   (0.7x)        104.3                  281.3                   622.3             615.6         
=&gt; <font color="#990000"><b>FAILED</b></font>    20000    12496   (0.4x)        114.9                  312.7                   678.1             681.7         
=&gt; <font color="#990000"><b>FAILED</b></font>    40000     9060   (0.3x)        134.6                  368.5   (1.2x)          817.4             801.4         
=&gt; <font color="#990000"><b>FAILED</b></font>    80000     6618   (0.2x)        145.4                  400.9   (1.3x)          892.7   (1.1x)    876.5   (1.1x)
=&gt; <font color="#990000"><b>FAILED</b></font>   160000     5600   (0.2x)        184.7                  510.6   (1.7x)         1118.2   (1.4x)   1124.1   (1.4x)
=&gt; <font color="#990000"><b>FAILED</b></font>   320000     6613   (0.3x)        199.5                  555.5   (1.9x)         1249.1   (1.6x)   1216.2   (1.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>   640000     4548   (0.2x)        220.3                  611.6   (2.0x)         1340.7   (1.7x)   1348.1   (1.7x)
==&gt; 0/7 tests passed

Total: 17/24 tests passed!

================================================================



</pre> </td></tr>
    </tbody>
</table>

            </div>
        </div>
    </div>
        
    
        <script type="text/javascript" async="" src="./Assignment Results   Algorithms, Part I_files/204.min.js"></script><script type="text/javascript" async="" src="./Assignment Results   Algorithms, Part I_files/ga.js"></script><script src="./Assignment Results   Algorithms, Part I_files/spark.js"></script>
    
    <script>
        $("[data-readme]").each(function() {
            window.ReadMe(this);
        });
    </script>

    <script src="./Assignment Results   Algorithms, Part I_files/modal_focus.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/get_query_parameters.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/signature_track.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/item_list.js" type="text/javascript"></script>
    <script src="./Assignment Results   Algorithms, Part I_files/navbar.js" type="text/javascript"></script>

    
    <script type="text/javascript">
        // SET UP THE MULTITRACKER
                window.logger = window.Log({level:"error"});
                window.multitracker = window.MultiTracker({logger:window.logger});
        window.multitracker.register('204', window._204 = window._204 || []);
        window.multitracker.register('ga', window._gaq = window._gaq || [], 'google');

        // SET UP GA and 204
        window._gaq.push(['_setAccount', 'UA-28377374-1']);
        window._gaq.push(['_setDomainName', 'coursera.org']);
        window._gaq.push(['_setAllowLinker', true]);  
        window._gaq.push(['_trackPageview']);
        
        window._204.push({key:"pageview", val:{}});

        // override our multitracker queues with the ga queue when it is ready
        (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        
          ga.onload = ga.onreadystatechange = function() {
              ga.onreadystatechange = ga.onload = null;
              window.multitracker.get('ga').queue = window._gaq;
          };
        })();

        // override our multitracker queues with the 204 queue when it is ready
        (function() {
          var a = document.createElement('script'); a.type = 'text/javascript'; a.async = true;
          a.src = 'https://eventing.coursera.org/204.min.js?client=spark&user=1484404';
          var s = document.getElementsByTagName('script')[0];
          s.parentNode.insertBefore(a, s);
          a.onload = a.onreadystatechange = function() {
              a.onreadystatechange = a.onload = null;
              window.multitracker.get('204').queue = window._204;
          };
        })();
    </script>

    <script>
      // Set up shared AB testing object
      (function() {
          var userId = $('[data-user-id]:first').attr('data-user-id');

          // Adapted from app/www/static/js/models/user.js
          if (userId == 0) {
              userId = window.Cookie.get('ab-session-id');
              if (!userId) {
                  userId =
                      (Math.random() * 10000000000).toFixed() + '-' +
                      (new Date()).getTime();
                  window.Cookie.set("ab-session-id", userId, { expires: 36500 });
              }
          }

                        window.ab = window.AB(userId, {debug:false, tracker:window.multitracker, logger:window.logger});
          
      })();
      // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();
    </script>

    <script type="text/x-mathjax-config">
MathJax.Hub.Config({
  config: ["MMLorHTML.js"],
  
  styleSheets: [],
  styles: {},

  jax: ["input/TeX"],
  
  extensions: ["tex2jax.js"],

  preJax: null,
  postJax: null,

  preRemoveClass: "MathJax_Preview",

  showProcessingMessages: true,

  messageStyle: "none",
  
  displayAlign: "center",
  displayIndent: "0em",
  
  delayStartupUntil: "none",

  skipStartupTypeset: false,
  
  elements: [],
  
  tex2jax: {
	    inlineMath: [
	                 ['$$','$$'],      // uncomment this for standard TeX math delimiters
	                 ['\\(','\\)']
	                 ],

	                 displayMath: [
	                 ['\\[','\\]']
	                 ],

    skipTags: ["script","noscript","style","textarea","pre","code"],
    ignoreClass: "tex2jax_ignore",
    processClass: "tex2jax_process",
    processEscapes: false,
    processEnvironments: true,
    preview: "TeX"
    
  },
  
  mml2jax: {
    preview: "alttext"
    
  },
  
  jsMath2jax: {
    preview: "TeX"
    
  },

  TeX: {
    TagSide: "right",
    TagIndent: ".8em",
    MultLineWidth: "85%",
    Macros: {},

    extensions: ["AMSmath.js", "AMSsymbols.js"]
    
  },

  //============================================================================
  //
  //  These parameters control the MathML inupt jax.
  //
  MathML: {
    //
    //  This specifies whether to use TeX spacing or MathML spacing when the
    //  HTML-CSS output jax is used.
    //
    useMathMLspacing: false
  },
  
  //============================================================================
  //
  //  These parameters control the HTML-CSS output jax.
  //
  "HTML-CSS": {
    
    scale: 100,
    
    availableFonts: ["STIX","TeX"],
    
    preferredFont: "TeX",
    
    webFont: "TeX",
    
    imageFont: "TeX",
    
    undefinedFamily: "STIXGeneral,'Arial Unicode MS',serif",
      
    showMathMenu: true,

    styles: {},
    
    tooltip: {
      delayPost: 600,          // milliseconds delay before tooltip is posted after mouseover
      delayClear: 600,         // milliseconds delay before tooltip is cleared after mouseout
      offsetX: 10, offsetY: 5  // pixels to offset tooltip from mouse position
    }
  },
  
  //============================================================================
  //
  //  These parameters control the NativeMML output jax.
  //
  NativeMML: {

    scale: 100,

    showMathMenu: true,
    showMathMenuMSIE: true,

    styles: {}
  },
  
  MathMenu: {
    delay: 400,
    
    helpURL: "http://www.mathjax.org/help/user/",

    showRenderer: true,
    showFontMenu: false,
    showContext:  false,

    windowSettings: {
      status: "no", toolbar: "no", locationbar: "no", menubar: "no",
      directories: "no", personalbar: "no", resizable: "yes", scrollbars: "yes",
      width: 100, height: 50
    },
    
    styles: {}
    
  },

  MMLorHTML: {
    prefer: {
      MSIE:    "MML",
      Firefox: "MML",
      Opera:   "HTML",
      other:   "HTML"
    }
  }
});
</script>
<script type="text/javascript">
(function () {

  function loadMathJax() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://duqnjvq4jwr55.cloudfront.net/2.1/MathJax.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  window.loadOrRefreshMathJax = function(domId) {
    if (window.MathJax) {
      if (domId) {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, domId]);
      } else {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    } else {
      loadMathJax();
    }
  }
})();
</script>
    
    <script type="text/javascript">
        var site_base_url = "https:\/\/www.coursera.org\/";
        var site_static_asset_url = "https:\/\/dt5zaw6a98blc.cloudfront.net\/site-static\/";
        var spark_class_short_name = "algs4partI";
        var spark_class_id = 970302;
        var spark_class_url = "\/algs4partI-002";
        var spark_signature_url = "https:\/\/class.coursera.org\/algs4partI-002\/signature\/";
        
        var course_strings_name = "Algorithms, Part I";
        var student_full_name = "Vishal Juneja";
    </script>

    




</body></html>